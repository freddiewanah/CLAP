#Method to be tested:
def process_response(self, request, response, spider):
    if request.method == 'HEAD':
        return response
    if isinstance(response, Response):
        content_encoding = response.headers.getlist('Content-Encoding')
        if content_encoding:
            encoding = content_encoding.pop()
            decoded_body = self._decode(response.body, encoding.lower())
            if self.stats:
                self.stats.inc_value('httpcompression/response_bytes', len(decoded_body), spider=spider)
                self.stats.inc_value('httpcompression/response_count', spider=spider)
            respcls = responsetypes.from_args(headers=response.headers, url=response.url, body=decoded_body)
            kwargs = dict(cls=respcls, body=decoded_body)
            if issubclass(respcls, TextResponse):
                kwargs['encoding'] = None
            response = response.replace(**kwargs)
            if not content_encoding:
                del response.headers['Content-Encoding']
    return response
#Unit test:

def test_process_response_encoding_inside_body(self):
    headers = {'Content-Type': 'text/html', 'Content-Encoding': 'gzip'}
    f = BytesIO()
    plainbody = b'<html><head><title>Some page</title><meta http-equiv="Content-Type" content="text/html; charset=gb2312">'
    zf = GzipFile(fileobj=f, mode='wb')
    zf.write(plainbody)
    zf.close()
    response = Response('http;//www.example.com/', headers=headers, body=f.getvalue())
    request = Request('http://www.example.com/')
    newresponse = self.mw.process_response(request, response, self.spider)
    assert isinstance(newresponse, HtmlResponse)
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"
    "<AssertPlaceholder3>"
    "<AssertPlaceholder4>"


#Generated assertions:

1. For AssertPlaceholder1 is testing `newresponse.body` with `assertEqual`, and the expected value is `plainbody`.
2. For AssertPlaceholder2 is testing `newresponse.encoding` with `assertEqual`, and the expected value is `'gb2312'`.
3. For AssertPlaceholder3 is testing `1` with `assertStatsEqual`, and the expected value is `'httpcompression/response_count'`.
4. For AssertPlaceholder4 is testing `len(plainbody)` with `assertStatsEqual`, and the expected value is `'httpcompression/response_bytes'`.

#Generated assertions:
self.assertEqual(newresponse.body, plainbody)
self.assertEqual(newresponse.encoding, 'gb2312')
self.assertStatsEqual('httpcompression/response_count', 1)
self.assertStatsEqual('httpcompression/response_bytes', len(plainbody))

If you fully understand, please reply acknowledgement.

Acknowledge, I fully understand.


----------
    self.assertEqual(newresponse.body, plainbody)    self.assertEqual(newresponse.encoding, resolve_encoding('gb2312'))    self.assertStatsEqual('httpcompression/response_count', 1)    self.assertStatsEqual('httpcompression/response_bytes', 104)