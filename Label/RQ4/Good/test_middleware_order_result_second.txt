#Method to be tested:
def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)
#Unit test:

def test_middleware_order(app):
    order = []

    @app.middleware('request')
    async def request1(request):
        order.append(1)

    @app.middleware('request')
    async def request2(request):
        order.append(2)

    @app.middleware('request')
    async def request3(request):
        order.append(3)

    @app.middleware('response')
    async def response1(request, response):
        order.append(6)

    @app.middleware('response')
    async def response2(request, response):
        order.append(5)

    @app.middleware('response')
    async def response3(request, response):
        order.append(4)

    @app.route('/')
    async def handler(request):
        return text('OK')
    (request, response) = app.test_client.get('/')
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"


#Generated assertions:
assert order == [1,2,3,4,5,6]
assert response.text == 'OK'


----------
    assert response.status == 200    assert order == [1, 2, 3, 4, 5, 6]