#Method to be tested:
def get_markdown_toc(markdown_source):
    """Return TOC generated by Markdown parser from Markdown source text."""
    md = markdown.Markdown(extensions=['toc'])
    md.convert(markdown_source)
    return md.toc_tokens
#Unit test:

def test_find_toc_by_id(self):
    """
        Test finding the relevant TOC item by the tag ID.
        """
    index = search_index.SearchIndex()
    md = dedent('\n            # Heading 1\n            ## Heading 2\n            ### Heading 3\n            ')
    toc = get_toc(get_markdown_toc(md))
    toc_item = index._find_toc_by_id(toc, 'heading-1')
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"
    toc_item2 = index._find_toc_by_id(toc, 'heading-2')
    "<AssertPlaceholder3>"
    "<AssertPlaceholder4>"
    toc_item3 = index._find_toc_by_id(toc, 'heading-3')
    "<AssertPlaceholder5>"
    "<AssertPlaceholder6>"


#Generated assertions:
2. For AssertPlaceholder1 is testing `toc_item` with `assertIsNotNone`, and the expected value is `None`.
3. For AssertPlaceholder2 is testing `toc_item['id']` with `assertEqual`, and the expected value is `'heading-1'`.
4. For AssertPlaceholder3 is testing `toc_item2` with `assertIsNotNone`, and the expected value is `None`.
5. For AssertPlaceholder4 is testing `toc_item2['id']` with `assertEqual`, and the expected value is `'heading-2'`.
6. For AssertPlaceholder5 is testing `toc_item3` with `assertIsNotNone`, and the expected value is `None`.
7. For AssertPlaceholder6 is testing `toc_item3['id']` with `assertEqual`, and the expected value is `'heading-3'`.

#Generated assertions:
self.assertIsNotNone(toc_item)
self.assertEqual(toc_item['id'], 'heading-1')
self.assertIsNotNone(toc_item2)
self.assertEqual(toc_item2['id'], 'heading-2')
self.assertIsNotNone(toc_item3)
self.assertEqual(toc_


----------
    self.assertEqual(toc_item.url, '#heading-1')    self.assertEqual(toc_item.title, 'Heading 1')    self.assertEqual(toc_item2.url, '#heading-2')    self.assertEqual(toc_item2.title, 'Heading 2')    self.assertEqual(toc_item3.url, '#heading-3')    self.assertEqual(toc_item3.title, 'Heading 3')