#Method to be tested:
def secure_hash_s(data, hash_func=sha1):
    """ Return a secure hash hex digest of data. """
    digest = hash_func()
    data = to_bytes(data, errors='surrogate_or_strict')
    digest.update(data)
    return digest.hexdigest()
#Unit test:

def test_build_with_symlink_inside_collection(collection_input):
    (input_dir, output_dir) = collection_input
    os.makedirs(os.path.join(input_dir, 'playbooks', 'roles'))
    roles_link = os.path.join(input_dir, 'playbooks', 'roles', 'linked')
    file_link = os.path.join(input_dir, 'docs', 'README.md')
    roles_target = os.path.join(input_dir, 'roles', 'linked')
    roles_target_tasks = os.path.join(roles_target, 'tasks')
    os.makedirs(roles_target_tasks)
    with open(os.path.join(roles_target_tasks, 'main.yml'), 'w+') as tasks_main:
        tasks_main.write('---\n- hosts: localhost\n  tasks:\n  - ping:')
        tasks_main.flush()
    os.symlink(roles_target, roles_link)
    os.symlink(os.path.join(input_dir, 'README.md'), file_link)
    collection.build_collection(to_text(input_dir, errors='surrogate_or_strict'), to_text(output_dir, errors='surrogate_or_strict'), False)
    output_artifact = os.path.join(output_dir, 'ansible_namespace-collection-0.1.0.tar.gz')
    "<AssertPlaceholder1>"
    with tarfile.open(output_artifact, mode='r') as actual:
        members = actual.getmembers()
        linked_folder = next((m for m in members if m.path == 'playbooks/roles/linked'))
        "<AssertPlaceholder2>"
        "<AssertPlaceholder3>"
        linked_file = next((m for m in members if m.path == 'docs/README.md'))
        "<AssertPlaceholder4>"
        "<AssertPlaceholder5>"
        linked_file_obj = actual.extractfile(linked_file.name)
        actual_file = secure_hash_s(linked_file_obj.read())
        linked_file_obj.close()
        "<AssertPlaceholder6>"


#Generated assertions:
assert os.path.exists(output_artifact) == True
assert linked_folder.type == b'2'
assert linked_folder.issym() == True
assert linked_file.type == b'2'
assert linked_file.issym() == True
assert actual_file == '63444bfc766154e1bc7557ef6280de20d03fcd81'


----------
    assert tarfile.is_tarfile(output_artifact)        assert linked_folder.type == tarfile.SYMTYPE        assert linked_folder.linkname == '../../roles/linked'        assert linked_file.type == tarfile.SYMTYPE        assert linked_file.linkname == '../README.md'        assert actual_file == '63444bfc766154e1bc7557ef6280de20d03fcd81'