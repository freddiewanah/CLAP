#Method to be tested:
def iter_fexpr_spans(s: str) -> Iterator[Tuple[int, int]]:
    """
    Yields spans corresponding to expressions in a given f-string.
    Spans are half-open ranges (left inclusive, right exclusive).
    Assumes the input string is a valid f-string, but will not crash if the input
    string is invalid.
    """
    stack: List[int] = []
    i = 0
    while i < len(s):
        if s[i] == '{':
            if not stack and i + 1 < len(s) and (s[i + 1] == '{'):
                i += 2
                continue
            stack.append(i)
            i += 1
            continue
        if s[i] == '}':
            if not stack:
                i += 1
                continue
            j = stack.pop()
            if not stack:
                yield (j, i + 1)
            i += 1
            continue
        if stack:
            delim = None
            if s[i:i + 3] in ("'''", '"""'):
                delim = s[i:i + 3]
            elif s[i] in ("'", '"'):
                delim = s[i]
            if delim:
                i += len(delim)
                while i < len(s) and s[i:i + len(delim)] != delim:
                    i += 1
                i += len(delim)
                continue
        i += 1
#Unit test:

def test_fexpr_spans() -> None:

    def check(string: str, expected_spans: List[Tuple[int, int]], expected_slices: List[str]) -> None:
        spans = list(iter_fexpr_spans(string))
        "<AssertPlaceholder1>"
        for ((i, j), slice) in zip(spans, expected_slices):
            "<AssertPlaceholder2>"
            "<AssertPlaceholder3>"
        "<AssertPlaceholder4>"
    check('{var}', [(0, 5)], ['{var}'])
    check("f'{var}'", [(2, 7)], ['{var}'])
    check('f\'{1 + f() + 2 + "asdf"}\'', [(2, 24)], ['{1 + f() + 2 + "asdf"}'])
    check('text {var} text', [(5, 10)], ['{var}'])
    check('text {{ {var} }} text', [(8, 13)], ['{var}'])
    check('{a} {b} {c}', [(0, 3), (4, 7), (8, 11)], ['{a}', '{b}', '{c}'])
    check("f'{a} {b} {c}'", [(2, 5), (6, 9), (10, 13)], ['{a}', '{b}', '{c}'])
    check('{ {} }', [(0, 6)], ['{ {} }'])
    check('{ {{}} }', [(0, 8)], ['{ {{}} }'])
    check('{ {{{}}} }', [(0, 10)], ['{ {{{}}} }'])
    check('{{ {{{}}} }}', [(5, 7)], ['{}'])
    check('{{ {{{var}}} }}', [(5, 10)], ['{var}'])
    check('{f"{0}"}', [(0, 8)], ['{f"{0}"}'])
    check('{"\'"}', [(0, 5)], ['{"\'"}'])
    check('{"{"}', [(0, 5)], ['{"{"}'])
    check('{"}"}', [(0, 5)], ['{"}"}'])
    check('{"{{"}', [(0, 6)], ['{"{{"}'])
    check("{''' '''}", [(0, 9)], ["{''' '''}"])
    check("{'''{'''}", [(0, 9)], ["{'''{'''}"])
    check("{''' {'{ '''}", [(0, 13)], ["{''' {'{ '''}"])
    check('f\'\'\'-{f"""*{f"+{f\'.{x}.\'}+"}*"""}-\'y\\\'\'\'\'', [(5, 33)], ['{f"""*{f"+{f\'.{x}.\'}+"}*"""}'])
    check('{}{', [(0, 2)], ['{}'])
    check('f"{\'{\'\'\'\'\'\'\'\'\'}"', [(2, 15)], ["{'{'''''''''}"])


#Generated assertions:
assert spans == expected_spans
assert string[i:j] == slice
assert string[i:j] == slice
assert len(spans) == len(expected_spans)


----------
        assert len(spans) == len(expected_slices)            assert len(string[i:j]) == j - i            assert string[i:j] == slice        assert spans == expected_spans