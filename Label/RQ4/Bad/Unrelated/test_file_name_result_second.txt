#Method to be tested:
def file_name(self, file_type: t.Optional[FileType]=None) -> str:
    """Get a random file name with some extension.

        :param file_type: Enum object FileType
        :return: File name.

        :Example:
            legislative.txt
        """
    word = self._text.word().strip()
    replacer = self.random.choice(['_', '-'])
    name = re.sub('\\s+', replacer, word)
    ext = self.extension(file_type)
    return f'{name}{ext}'
#Unit test:

@pytest.mark.parametrize('file_type', [FileType.AUDIO, FileType.COMPRESSED, FileType.DATA, FileType.EXECUTABLE, FileType.IMAGE, FileType.SOURCE, FileType.TEXT, FileType.VIDEO])
def test_file_name(self, file, file_type):
    result = file.file_name(file_type=file_type)
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"


#Generated assertions:
assert result.endswith(file.extension(file_type))
assert re.search('[-_]', result) is None


----------
    assert isinstance(result, str)    assert result