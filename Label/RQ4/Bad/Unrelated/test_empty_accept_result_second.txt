#Method to be tested:
def match(self, mime_with_params: Union[str, MediaType]) -> Optional[MediaType]:
    """Check if this media type matches the given mime type/subtype.
        Wildcards are supported both ways on both type and subtype.
        If mime contains a semicolon, optionally followed by parameters,
        the parameters of the two media types must match exactly.
        Note:  Use the `==` operator instead to check for literal matches
        without expanding wildcards.
        @param media_type: A type/subtype string to match.
        @return `self` if the media types are compatible, else `None`
        """
    mt = MediaType._parse(mime_with_params) if isinstance(mime_with_params, str) else mime_with_params
    return self if mt and all((self.params.get(k) == v for (k, v) in mt.params.items())) and (self.subtype == mt.subtype or self.subtype == '*' or mt.subtype == '*') and (self.type == mt.type or self.type == '*' or mt.type == '*') else None
#Unit test:

def test_empty_accept():
    a = headers.parse_accept('')
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"


#Generated assertions:
assert a.match('foo/bar') == '<no match>'
assert a.match('foo/*') == '<no match>'


----------
    assert a == []    assert not a.match('*/*')