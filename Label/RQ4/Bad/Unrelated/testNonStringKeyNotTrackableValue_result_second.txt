#Method to be tested:
@traceback_utils.filter_traceback
def load_weights(self, filepath, skip_mismatch=False, by_name=False, options=None):
    """Loads all layer weights from a saved files.

        The saved file could be a SavedModel file, a `.keras` file (v3 saving
        format), or a file created via `model.save_weights()`.

        By default, weights are loaded based on the network's
        topology. This means the architecture should be the same as when the
        weights were saved. Note that layers that don't have weights are not
        taken into account in the topological ordering, so adding or removing
        layers is fine as long as they don't have weights.

        **Partial weight loading**

        If you have modified your model, for instance by adding a new layer
        (with weights) or by changing the shape of the weights of a layer,
        you can choose to ignore errors and continue loading
        by setting `skip_mismatch=True`. In this case any layer with
        mismatching weights will be skipped. A warning will be displayed
        for each skipped layer.

        **Weight loading by name**

        If your weights are saved as a `.h5` file created
        via `model.save_weights()`, you can use the argument `by_name=True`.

        In this case, weights are loaded into layers only if they share
        the same name. This is useful for fine-tuning or transfer-learning
        models where some of the layers have changed.

        Note that only topological loading (`by_name=False`) is supported when
        loading weights from the `.keras` v3 format or from the TensorFlow
        SavedModel format.

        Args:
            filepath: String, path to the weights file to load. For weight files
                in TensorFlow format, this is the file prefix (the same as was
                passed to `save_weights()`). This can also be a path to a
                SavedModel or a `.keras` file (v3 saving format) saved
                via `model.save()`.
            skip_mismatch: Boolean, whether to skip loading of layers where
                there is a mismatch in the number of weights, or a mismatch in
                the shape of the weights.
            by_name: Boolean, whether to load weights by name or by topological
                order. Only topological loading is supported for weight files in
                the `.keras` v3 format or in the TensorFlow SavedModel format.
            options: Optional `tf.train.CheckpointOptions` object that specifies
                options for loading weights (only valid for a SavedModel file).
        """
    return saving_api.load_weights(self, filepath=filepath, by_name=by_name, skip_mismatch=skip_mismatch, options=options)
#Unit test:

def testNonStringKeyNotTrackableValue(self):
    a = tf.Module()
    a.d = {}
    a.d['a'] = [3]
    a.d[1] = data_structures.NoDependency([3])
    "<AssertPlaceholder1>"
    model = training.Model()
    model.sub = a
    save_path = os.path.join(self.get_temp_dir(), 'ckpt')
    model.save_weights(save_path)
    model.load_weights(save_path)


#Generated assertions:
self.assertIs(data_structures.NoDependency([3]), a.d[1])


----------
    self.assertEqual([a, a.d, a.d['a']], util.list_objects(a))