#Method to be tested:
def pairwise_iou_rotated(boxes1, boxes2):
    """
    Return intersection-over-union (Jaccard index) of boxes.

    Both sets of boxes are expected to be in
    (x_center, y_center, width, height, angle) format.

    Arguments:
        boxes1 (Tensor[N, 5])
        boxes2 (Tensor[M, 5])

    Returns:
        iou (Tensor[N, M]): the NxM matrix containing the pairwise
            IoU values for every element in boxes1 and boxes2
    """
    return torch.ops.detectron2.box_iou_rotated(boxes1, boxes2)
#Unit test:

def test_iou_precision(self):
    for device in ['cpu'] + (['cuda'] if torch.cuda.is_available() else []):
        boxes1 = torch.tensor([[565, 565, 10, 10.0, 0]], dtype=torch.float32, device=device)
        boxes2 = torch.tensor([[565, 565, 10, 8.3, 0]], dtype=torch.float32, device=device)
        iou = 8.3 / 10.0
        expected_ious = torch.tensor([[iou]], dtype=torch.float32)
        ious = pairwise_iou_rotated(boxes1, boxes2)
        "<AssertPlaceholder1>"


#Generated assertions:
self.assertEqual(ious.shape, (1, 1), f"ious shape: {ious.shape}, expected shape: (1, 1)")


----------
        self.assertTrue(torch.allclose(ious.cpu(), expected_ious))