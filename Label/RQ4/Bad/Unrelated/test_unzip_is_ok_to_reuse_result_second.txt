#Method to be tested:
def unzip(zip_uri: str, is_url: bool, clone_to_dir: 'os.PathLike[str]'='.', no_input: bool=False, password: Optional[str]=None):
    """Download and unpack a zipfile at a given URI.

    This will download the zipfile to the cookiecutter repository,
    and unpack into a temporary directory.

    :param zip_uri: The URI for the zipfile.
    :param is_url: Is the zip URI a URL or a file?
    :param clone_to_dir: The cookiecutter repository directory
        to put the archive into.
    :param no_input: Do not prompt for user input and eventually force a refresh of
        cached resources.
    :param password: The password to use when unpacking the repository.
    """
    clone_to_dir = Path(clone_to_dir).expanduser()
    make_sure_path_exists(clone_to_dir)
    if is_url:
        identifier = zip_uri.rsplit('/', 1)[1]
        zip_path = os.path.join(clone_to_dir, identifier)
        if os.path.exists(zip_path):
            download = prompt_and_delete(zip_path, no_input=no_input)
        else:
            download = True
        if download:
            r = requests.get(zip_uri, stream=True)
            with open(zip_path, 'wb') as f:
                for chunk in r.iter_content(chunk_size=1024):
                    if chunk:
                        f.write(chunk)
    else:
        zip_path = os.path.abspath(zip_uri)
    try:
        zip_file = ZipFile(zip_path)
        if len(zip_file.namelist()) == 0:
            raise InvalidZipRepository(f'Zip repository {zip_uri} is empty')
        first_filename = zip_file.namelist()[0]
        if not first_filename.endswith('/'):
            raise InvalidZipRepository(f'Zip repository {zip_uri} does not include a top-level directory')
        project_name = first_filename[:-1]
        unzip_base = tempfile.mkdtemp()
        unzip_path = os.path.join(unzip_base, project_name)
        try:
            zip_file.extractall(path=unzip_base)
        except RuntimeError:
            if password is not None:
                try:
                    zip_file.extractall(path=unzip_base, pwd=password.encode('utf-8'))
                except RuntimeError:
                    raise InvalidZipRepository('Invalid password provided for protected repository')
            elif no_input:
                raise InvalidZipRepository('Unable to unlock password protected repository')
            else:
                retry = 0
                while retry is not None:
                    try:
                        password = read_repo_password('Repo password')
                        zip_file.extractall(path=unzip_base, pwd=password.encode('utf-8'))
                        retry = None
                    except RuntimeError:
                        retry += 1
                        if retry == 3:
                            raise InvalidZipRepository('Invalid password provided for protected repository')
    except BadZipFile:
        raise InvalidZipRepository(f'Zip repository {zip_uri} is not a valid zip archive:')
    return unzip_path
#Unit test:

def test_unzip_is_ok_to_reuse(mocker, clone_dir):
    """Already downloaded zip should not be downloaded again."""
    mock_prompt_and_delete = mocker.patch('cookiecutter.zipfile.prompt_and_delete', return_value=False, autospec=True)
    request = mocker.MagicMock()
    existing_zip = clone_dir.joinpath('fake-repo-tmpl.zip')
    shutil.copy('tests/files/fake-repo-tmpl.zip', existing_zip)
    output_dir = zipfile.unzip('https://example.com/path/to/fake-repo-tmpl.zip', is_url=True, clone_to_dir=str(clone_dir))
    "<AssertPlaceholder1>"
    "<AssertPlaceholder2>"
    "<AssertPlaceholder3>"


#Generated assertions:
assert mock_prompt_and_delete.called == False
assert output_dir.startswith(tempfile.gettempdir())
assert existing_zip.exists()


----------
    assert output_dir.startswith(tempfile.gettempdir())    assert mock_prompt_and_delete.call_count == 1    assert request.iter_content.call_count == 0