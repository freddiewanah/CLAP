def load(self, section, key, dtype='json', default=None, min_ver=None):
    assert dtype in ('json',)
    if not self.enabled:
        return default
    cache_fn = self._get_cache_fn(section, key, dtype)
    try:
        try:
            with io.open(cache_fn, 'r', encoding='utf-8') as cachef:
                return self._validate(json.load(cachef), min_ver)
        except ValueError:
            try:
                file_size = os.path.getsize(cache_fn)
            except (OSError, IOError) as oe:
                file_size = error_to_compat_str(oe)
            self._ydl.report_warning('Cache retrieval from %s failed (%s)' % (cache_fn, file_size))
    except IOError:
        pass
    return default

----------

def test_cache(self):
    ydl = FakeYDL({'cachedir': self.test_dir})
    c = Cache(ydl)
    obj = {'x': 1, 'y': ['Ã¤', '\\a', True]}
    self.assertEqual(c.load('test_cache', 'k.'), None)
    c.store('test_cache', 'k.', obj)
    self.assertEqual(c.load('test_cache', 'k2'), None)
    self.assertFalse(_is_empty(self.test_dir))
    self.assertEqual(c.load('test_cache', 'k.'), obj)
    self.assertEqual(c.load('test_cache', 'y'), None)
    self.assertEqual(c.load('test_cache2', 'k.'), None)
    c.remove()
    self.assertFalse(os.path.exists(self.test_dir))
    self.assertEqual(c.load('test_cache', 'k.'), None)

----------



Test Class Name: TestCache