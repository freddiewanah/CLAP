def call_function(self, funcname, *args):
    return self.extract_function(funcname)(args)

----------

def test_operators(self):
    jsi = JSInterpreter('function f(){return 1 << 5;}')
    self.assertEqual(jsi.call_function('f'), 32)
    jsi = JSInterpreter('function f(){return 2 ** 5}')
    self.assertEqual(jsi.call_function('f'), 32)
    jsi = JSInterpreter('function f(){return 19 & 21;}')
    self.assertEqual(jsi.call_function('f'), 17)
    jsi = JSInterpreter('function f(){return 11 >> 2;}')
    self.assertEqual(jsi.call_function('f'), 2)
    jsi = JSInterpreter('function f(){return []? 2+3: 4;}')
    self.assertEqual(jsi.call_function('f'), 5)
    jsi = JSInterpreter('function f(){return 1 == 2}')
    self.assertEqual(jsi.call_function('f'), False)
    jsi = JSInterpreter('function f(){return 0 && 1 || 2;}')
    self.assertEqual(jsi.call_function('f'), 2)
    jsi = JSInterpreter('function f(){return 0 ?? 42;}')
    self.assertEqual(jsi.call_function('f'), 0)
    jsi = JSInterpreter('function f(){return "life, the universe and everything" < 42;}')
    self.assertFalse(jsi.call_function('f'))

----------



Test Class Name: TestJSInterpreter