def call_function(self, funcname, *args):
    return self.extract_function(funcname)(args)

----------

def test_undefined(self):
    jsi = JSInterpreter('\n        function x() { return undefined === undefined; }\n        ')
    self.assertTrue(jsi.call_function('x'))
    jsi = JSInterpreter('\n        function x() { return undefined; }\n        ')
    self.assertIs(jsi.call_function('x'), JS_Undefined)
    jsi = JSInterpreter('\n        function x() { let v; return v; }\n        ')
    self.assertIs(jsi.call_function('x'), JS_Undefined)
    jsi = JSInterpreter('\n        function x() { return [undefined === undefined, undefined == undefined, undefined < undefined, undefined > undefined]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [True, True, False, False])
    jsi = JSInterpreter('\n        function x() { return [undefined === 0, undefined == 0, undefined < 0, undefined > 0]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [False, False, False, False])
    jsi = JSInterpreter('\n        function x() { return [undefined >= 0, undefined <= 0]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [False, False])
    jsi = JSInterpreter('\n        function x() { return [undefined > null, undefined < null, undefined == null, undefined === null]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [False, False, True, False])
    jsi = JSInterpreter('\n        function x() { return [undefined === null, undefined == null, undefined < null, undefined > null]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [False, True, False, False])
    jsi = JSInterpreter('\n        function x() { let v; return [42+v, v+42, v**42, 42**v, 0**v]; }\n        ')
    for y in jsi.call_function('x'):
        self.assertTrue(math.isnan(y))
    jsi = JSInterpreter('\n        function x() { let v; return v**0; }\n        ')
    self.assertEqual(jsi.call_function('x'), 1)
    jsi = JSInterpreter('\n        function x() { let v; return [v>42, v<=42, v&&42, 42&&v]; }\n        ')
    self.assertEqual(jsi.call_function('x'), [False, False, JS_Undefined, JS_Undefined])
    jsi = JSInterpreter('function x(){return undefined ?? 42; }')
    self.assertEqual(jsi.call_function('x'), 42)

----------



Test Class Name: TestJSInterpreter