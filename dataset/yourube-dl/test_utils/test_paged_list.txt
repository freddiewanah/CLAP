def getslice(self, start=0, end=None):
    res = []
    for pagenum in itertools.count(start // self._pagesize):
        firstid = pagenum * self._pagesize
        nextfirstid = pagenum * self._pagesize + self._pagesize
        if start >= nextfirstid:
            continue
        page_results = None
        if self._use_cache:
            page_results = self._cache.get(pagenum)
        if page_results is None:
            page_results = list(self._pagefunc(pagenum))
        if self._use_cache:
            self._cache[pagenum] = page_results
        startv = start % self._pagesize if firstid <= start < nextfirstid else 0
        endv = (end - 1) % self._pagesize + 1 if end is not None and firstid <= end <= nextfirstid else None
        if startv != 0 or endv is not None:
            page_results = page_results[startv:endv]
        res.extend(page_results)
        if len(page_results) + startv < self._pagesize:
            break
        if end == nextfirstid:
            break
    return res

----------

def test_paged_list(self):

    def testPL(size, pagesize, sliceargs, expected):

        def get_page(pagenum):
            firstid = pagenum * pagesize
            upto = min(size, pagenum * pagesize + pagesize)
            for i in range(firstid, upto):
                yield i
        pl = OnDemandPagedList(get_page, pagesize)
        got = pl.getslice(*sliceargs)
        self.assertEqual(got, expected)
        iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)
        got = iapl.getslice(*sliceargs)
        self.assertEqual(got, expected)
    testPL(5, 2, (), [0, 1, 2, 3, 4])
    testPL(5, 2, (1,), [1, 2, 3, 4])
    testPL(5, 2, (2,), [2, 3, 4])
    testPL(5, 2, (4,), [4])
    testPL(5, 2, (0, 3), [0, 1, 2])
    testPL(5, 2, (1, 4), [1, 2, 3])
    testPL(5, 2, (2, 99), [2, 3, 4])
    testPL(5, 2, (20, 99), [])

----------



Test Class Name: TestUtil