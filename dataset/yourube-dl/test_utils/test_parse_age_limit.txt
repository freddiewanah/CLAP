def parse_age_limit(s):
    if type(s) == int:
        return s if 0 <= s <= 21 else None
    if not isinstance(s, compat_basestring):
        return None
    m = re.match('^(?P<age>\\d{1,2})\\+?$', s)
    if m:
        return int(m.group('age'))
    if s in US_RATINGS:
        return US_RATINGS[s]
    m = re.match('^TV[_-]?(%s)$' % '|'.join((k[3:] for k in TV_PARENTAL_GUIDELINES)), s)
    if m:
        return TV_PARENTAL_GUIDELINES['TV-' + m.group(1)]
    return None

----------

def test_parse_age_limit(self):
    self.assertEqual(parse_age_limit(None), None)
    self.assertEqual(parse_age_limit(False), None)
    self.assertEqual(parse_age_limit('invalid'), None)
    self.assertEqual(parse_age_limit(0), 0)
    self.assertEqual(parse_age_limit(18), 18)
    self.assertEqual(parse_age_limit(21), 21)
    self.assertEqual(parse_age_limit(22), None)
    self.assertEqual(parse_age_limit('18'), 18)
    self.assertEqual(parse_age_limit('18+'), 18)
    self.assertEqual(parse_age_limit('PG-13'), 13)
    self.assertEqual(parse_age_limit('TV-14'), 14)
    self.assertEqual(parse_age_limit('TV-MA'), 17)
    self.assertEqual(parse_age_limit('TV14'), 14)
    self.assertEqual(parse_age_limit('TV_G'), 0)

----------



Test Class Name: TestUtil