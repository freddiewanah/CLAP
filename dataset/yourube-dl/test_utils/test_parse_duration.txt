def parse_duration(s):
    if not isinstance(s, compat_basestring):
        return None
    s = s.strip()
    (days, hours, mins, secs, ms) = [None] * 5
    m = re.match('(?:(?:(?:(?P<days>[0-9]+):)?(?P<hours>[0-9]+):)?(?P<mins>[0-9]+):)?(?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?Z?$', s)
    if m:
        (days, hours, mins, secs, ms) = m.groups()
    else:
        m = re.match('(?ix)(?:P?\n                (?:\n                    [0-9]+\\s*y(?:ears?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*m(?:onths?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*w(?:eeks?)?\\s*\n                )?\n                (?:\n                    (?P<days>[0-9]+)\\s*d(?:ays?)?\\s*\n                )?\n                T)?\n                (?:\n                    (?P<hours>[0-9]+)\\s*h(?:ours?)?\\s*\n                )?\n                (?:\n                    (?P<mins>[0-9]+)\\s*m(?:in(?:ute)?s?)?\\s*\n                )?\n                (?:\n                    (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*s(?:ec(?:ond)?s?)?\\s*\n                )?Z?$', s)
        if m:
            (days, hours, mins, secs, ms) = m.groups()
        else:
            m = re.match('(?i)(?:(?P<hours>[0-9.]+)\\s*(?:hours?)|(?P<mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*)Z?$', s)
            if m:
                (hours, mins) = m.groups()
            else:
                return None
    duration = 0
    if secs:
        duration += float(secs)
    if mins:
        duration += float(mins) * 60
    if hours:
        duration += float(hours) * 60 * 60
    if days:
        duration += float(days) * 24 * 60 * 60
    if ms:
        duration += float(ms)
    return duration

----------

def test_parse_duration(self):
    self.assertEqual(parse_duration(None), None)
    self.assertEqual(parse_duration(False), None)
    self.assertEqual(parse_duration('invalid'), None)
    self.assertEqual(parse_duration('1'), 1)
    self.assertEqual(parse_duration('1337:12'), 80232)
    self.assertEqual(parse_duration('9:12:43'), 33163)
    self.assertEqual(parse_duration('12:00'), 720)
    self.assertEqual(parse_duration('00:01:01'), 61)
    self.assertEqual(parse_duration('x:y'), None)
    self.assertEqual(parse_duration('3h11m53s'), 11513)
    self.assertEqual(parse_duration('3h 11m 53s'), 11513)
    self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)
    self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)
    self.assertEqual(parse_duration('62m45s'), 3765)
    self.assertEqual(parse_duration('6m59s'), 419)
    self.assertEqual(parse_duration('49s'), 49)
    self.assertEqual(parse_duration('0h0m0s'), 0)
    self.assertEqual(parse_duration('0m0s'), 0)
    self.assertEqual(parse_duration('0s'), 0)
    self.assertEqual(parse_duration('01:02:03.05'), 3723.05)
    self.assertEqual(parse_duration('T30M38S'), 1838)
    self.assertEqual(parse_duration('5 s'), 5)
    self.assertEqual(parse_duration('3 min'), 180)
    self.assertEqual(parse_duration('2.5 hours'), 9000)
    self.assertEqual(parse_duration('02:03:04'), 7384)
    self.assertEqual(parse_duration('01:02:03:04'), 93784)
    self.assertEqual(parse_duration('1 hour 3 minutes'), 3780)
    self.assertEqual(parse_duration('87 Min.'), 5220)
    self.assertEqual(parse_duration('PT1H0.040S'), 3600.04)
    self.assertEqual(parse_duration('PT00H03M30SZ'), 210)
    self.assertEqual(parse_duration('P0Y0M0DT0H4M20.880S'), 260.88)

----------



Test Class Name: TestUtil