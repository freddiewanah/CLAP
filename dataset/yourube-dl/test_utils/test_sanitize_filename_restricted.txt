def sanitize_filename(s, restricted=False, is_id=False):
    """Sanitizes a string so it could be used as part of a filename.
    If restricted is set, use a stricter subset of allowed characters.
    Set is_id if this is not an arbitrary string, but an ID that should be kept
    if possible.
    """

    def replace_insane(char):
        if restricted and char in ACCENT_CHARS:
            return ACCENT_CHARS[char]
        if char == '?' or ord(char) < 32 or ord(char) == 127:
            return ''
        elif char == '"':
            return '' if restricted else "'"
        elif char == ':':
            return '_-' if restricted else ' -'
        elif char in '\\/|*<>':
            return '_'
        if restricted and (char in "!&'()[]{}$;`^,#" or char.isspace()):
            return '_'
        if restricted and ord(char) > 127:
            return '_'
        return char
    if restricted and (not is_id):
        s = unicodedata.normalize('NFKC', s)
    s = re.sub('[0-9]+(?::[0-9]+)+', lambda m: m.group(0).replace(':', '_'), s)
    result = ''.join(map(replace_insane, s))
    if not is_id:
        while '__' in result:
            result = result.replace('__', '_')
        result = result.strip('_')
        if restricted and result.startswith('-_'):
            result = result[2:]
        if result.startswith('-'):
            result = '_' + result[len('-'):]
        result = result.lstrip('.')
        if not result:
            result = '_'
    return result

----------

def test_sanitize_filename_restricted(self):
    self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')
    self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')
    self.assertEqual(sanitize_filename('123', restricted=True), '123')
    self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))
    self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))
    self.assertEqual('abc_de', sanitize_filename('abc/<>\\*|de', restricted=True))
    self.assertEqual('xxx', sanitize_filename('xxx/<>\\*|', restricted=True))
    self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))
    self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))
    tests = 'aäb中国的c'
    self.assertEqual(sanitize_filename(tests, restricted=True), 'aab_c')
    self.assertTrue(sanitize_filename('ö', restricted=True) != '')
    forbidden = '"\x00\\/&!: \'\t\n()[]{}$;`^,#'
    for fc in forbidden:
        for fbc in forbidden:
            self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))
    self.assertEqual(sanitize_filename('大声带 - Song', restricted=True), 'Song')
    self.assertEqual(sanitize_filename('总统: Speech', restricted=True), 'Speech')
    self.assertTrue(sanitize_filename('-', restricted=True) != '')
    self.assertTrue(sanitize_filename(':', restricted=True) != '')
    self.assertEqual(sanitize_filename('ÂÃÄÀÁÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖŐØŒÙÚÛÜŰÝÞßàáâãäåæçèéêëìíîïðñòóôõöőøœùúûüűýþÿ', restricted=True), 'AAAAAAAECEEEEIIIIDNOOOOOOOOEUUUUUYTHssaaaaaaaeceeeeiiiionooooooooeuuuuuythy')

----------



Test Class Name: TestUtil