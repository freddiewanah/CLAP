def dfxp2srt(dfxp_data):
    """
    @param dfxp_data A bytes-like object containing DFXP data
    @returns A unicode object containing converted SRT data
    """
    LEGACY_NAMESPACES = ((b'http://www.w3.org/ns/ttml', [b'http://www.w3.org/2004/11/ttaf1', b'http://www.w3.org/2006/04/ttaf1', b'http://www.w3.org/2006/10/ttaf1']), (b'http://www.w3.org/ns/ttml#styling', [b'http://www.w3.org/ns/ttml#style']))
    SUPPORTED_STYLING = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'textDecoration']
    _x = functools.partial(xpath_with_ns, ns_map={'xml': 'http://www.w3.org/XML/1998/namespace', 'ttml': 'http://www.w3.org/ns/ttml', 'tts': 'http://www.w3.org/ns/ttml#styling'})
    styles = {}
    default_style = {}

    class TTMLPElementParser(object):
        _out = ''
        _unclosed_elements = []
        _applied_styles = []

        def start(self, tag, attrib):
            if tag in (_x('ttml:br'), 'br'):
                self._out += '\n'
            else:
                unclosed_elements = []
                style = {}
                element_style_id = attrib.get('style')
                if default_style:
                    style.update(default_style)
                if element_style_id:
                    style.update(styles.get(element_style_id, {}))
                for prop in SUPPORTED_STYLING:
                    prop_val = attrib.get(_x('tts:' + prop))
                    if prop_val:
                        style[prop] = prop_val
                if style:
                    font = ''
                    for (k, v) in sorted(style.items()):
                        if self._applied_styles and self._applied_styles[-1].get(k) == v:
                            continue
                        if k == 'color':
                            font += ' color="%s"' % v
                        elif k == 'fontSize':
                            font += ' size="%s"' % v
                        elif k == 'fontFamily':
                            font += ' face="%s"' % v
                        elif k == 'fontWeight' and v == 'bold':
                            self._out += '<b>'
                            unclosed_elements.append('b')
                        elif k == 'fontStyle' and v == 'italic':
                            self._out += '<i>'
                            unclosed_elements.append('i')
                        elif k == 'textDecoration' and v == 'underline':
                            self._out += '<u>'
                            unclosed_elements.append('u')
                    if font:
                        self._out += '<font' + font + '>'
                        unclosed_elements.append('font')
                    applied_style = {}
                    if self._applied_styles:
                        applied_style.update(self._applied_styles[-1])
                    applied_style.update(style)
                    self._applied_styles.append(applied_style)
                self._unclosed_elements.append(unclosed_elements)

        def end(self, tag):
            if tag not in (_x('ttml:br'), 'br'):
                unclosed_elements = self._unclosed_elements.pop()
                for element in reversed(unclosed_elements):
                    self._out += '</%s>' % element
                if unclosed_elements and self._applied_styles:
                    self._applied_styles.pop()

        def data(self, data):
            self._out += data

        def close(self):
            return self._out.strip()

    def parse_node(node):
        target = TTMLPElementParser()
        parser = xml.etree.ElementTree.XMLParser(target=target)
        parser.feed(xml.etree.ElementTree.tostring(node))
        return parser.close()
    for (k, v) in LEGACY_NAMESPACES:
        for ns in v:
            dfxp_data = dfxp_data.replace(ns, k)
    dfxp = compat_etree_fromstring(dfxp_data)
    out = []
    paras = dfxp.findall(_x('.//ttml:p')) or dfxp.findall('.//p')
    if not paras:
        raise ValueError('Invalid dfxp/TTML subtitle')
    repeat = False
    while True:
        for style in dfxp.findall(_x('.//ttml:style')):
            style_id = style.get('id') or style.get(_x('xml:id'))
            if not style_id:
                continue
            parent_style_id = style.get('style')
            if parent_style_id:
                if parent_style_id not in styles:
                    repeat = True
                    continue
                styles[style_id] = styles[parent_style_id].copy()
            for prop in SUPPORTED_STYLING:
                prop_val = style.get(_x('tts:' + prop))
                if prop_val:
                    styles.setdefault(style_id, {})[prop] = prop_val
        if repeat:
            repeat = False
        else:
            break
    for p in ('body', 'div'):
        ele = xpath_element(dfxp, [_x('.//ttml:' + p), './/' + p])
        if ele is None:
            continue
        style = styles.get(ele.get('style'))
        if not style:
            continue
        default_style.update(style)
    for (para, index) in zip(paras, itertools.count(1)):
        begin_time = parse_dfxp_time_expr(para.attrib.get('begin'))
        end_time = parse_dfxp_time_expr(para.attrib.get('end'))
        dur = parse_dfxp_time_expr(para.attrib.get('dur'))
        if begin_time is None:
            continue
        if not end_time:
            if not dur:
                continue
            end_time = begin_time + dur
        out.append('%d\n%s --> %s\n%s\n\n' % (index, srt_subtitles_timecode(begin_time), srt_subtitles_timecode(end_time), parse_node(para)))
    return ''.join(out)

----------

def test_dfxp2srt(self):
    dfxp_data = '<?xml version="1.0" encoding="UTF-8"?>\n            <tt xmlns="http://www.w3.org/ns/ttml" xml:lang="en" xmlns:tts="http://www.w3.org/ns/ttml#parameter">\n            <body>\n                <div xml:lang="en">\n                    <p begin="0" end="1">The following line contains Chinese characters and special symbols</p>\n                    <p begin="1" end="2">第二行<br/>♪♪</p>\n                    <p begin="2" dur="1"><span>Third<br/>Line</span></p>\n                    <p begin="3" end="-1">Lines with invalid timestamps are ignored</p>\n                    <p begin="-1" end="-1">Ignore, two</p>\n                    <p begin="3" dur="-1">Ignored, three</p>\n                </div>\n            </body>\n            </tt>'.encode('utf-8')
    srt_data = '1\n00:00:00,000 --> 00:00:01,000\nThe following line contains Chinese characters and special symbols\n\n2\n00:00:01,000 --> 00:00:02,000\n第二行\n♪♪\n\n3\n00:00:02,000 --> 00:00:03,000\nThird\nLine\n\n'
    self.assertEqual(dfxp2srt(dfxp_data), srt_data)
    dfxp_data_no_default_namespace = '<?xml version="1.0" encoding="UTF-8"?>\n            <tt xml:lang="en" xmlns:tts="http://www.w3.org/ns/ttml#parameter">\n            <body>\n                <div xml:lang="en">\n                    <p begin="0" end="1">The first line</p>\n                </div>\n            </body>\n            </tt>'.encode('utf-8')
    srt_data = '1\n00:00:00,000 --> 00:00:01,000\nThe first line\n\n'
    self.assertEqual(dfxp2srt(dfxp_data_no_default_namespace), srt_data)
    dfxp_data_with_style = '<?xml version="1.0" encoding="utf-8"?>\n<tt xmlns="http://www.w3.org/2006/10/ttaf1" xmlns:ttp="http://www.w3.org/2006/10/ttaf1#parameter" ttp:timeBase="media" xmlns:tts="http://www.w3.org/2006/10/ttaf1#style" xml:lang="en" xmlns:ttm="http://www.w3.org/2006/10/ttaf1#metadata">\n  <head>\n    <styling>\n      <style id="s2" style="s0" tts:color="cyan" tts:fontWeight="bold" />\n      <style id="s1" style="s0" tts:color="yellow" tts:fontStyle="italic" />\n      <style id="s3" style="s0" tts:color="lime" tts:textDecoration="underline" />\n      <style id="s0" tts:backgroundColor="black" tts:fontStyle="normal" tts:fontSize="16" tts:fontFamily="sansSerif" tts:color="white" />\n    </styling>\n  </head>\n  <body tts:textAlign="center" style="s0">\n    <div>\n      <p begin="00:00:02.08" id="p0" end="00:00:05.84">default style<span tts:color="red">custom style</span></p>\n      <p style="s2" begin="00:00:02.08" id="p0" end="00:00:05.84"><span tts:color="lime">part 1<br /></span><span tts:color="cyan">part 2</span></p>\n      <p style="s3" begin="00:00:05.84" id="p1" end="00:00:09.56">line 3<br />part 3</p>\n      <p style="s1" tts:textDecoration="underline" begin="00:00:09.56" id="p2" end="00:00:12.36"><span style="s2" tts:color="lime">inner<br /> </span>style</p>\n    </div>\n  </body>\n</tt>'.encode('utf-8')
    srt_data = '1\n00:00:02,080 --> 00:00:05,839\n<font color="white" face="sansSerif" size="16">default style<font color="red">custom style</font></font>\n\n2\n00:00:02,080 --> 00:00:05,839\n<b><font color="cyan" face="sansSerif" size="16"><font color="lime">part 1\n</font>part 2</font></b>\n\n3\n00:00:05,839 --> 00:00:09,560\n<u><font color="lime">line 3\npart 3</font></u>\n\n4\n00:00:09,560 --> 00:00:12,359\n<i><u><font color="yellow"><font color="lime">inner\n </font>style</font></u></i>\n\n'
    self.assertEqual(dfxp2srt(dfxp_data_with_style), srt_data)
    dfxp_data_non_utf8 = '<?xml version="1.0" encoding="UTF-16"?>\n            <tt xmlns="http://www.w3.org/ns/ttml" xml:lang="en" xmlns:tts="http://www.w3.org/ns/ttml#parameter">\n            <body>\n                <div xml:lang="en">\n                    <p begin="0" end="1">Line 1</p>\n                    <p begin="1" end="2">第二行</p>\n                </div>\n            </body>\n            </tt>'.encode('utf-16')
    srt_data = '1\n00:00:00,000 --> 00:00:01,000\nLine 1\n\n2\n00:00:01,000 --> 00:00:02,000\n第二行\n\n'
    self.assertEqual(dfxp2srt(dfxp_data_non_utf8), srt_data)

----------



Test Class Name: TestUtil