def xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT):

    def _find_xpath(xpath):
        return node.find(compat_xpath(xpath))
    if isinstance(xpath, (str, compat_str)):
        n = _find_xpath(xpath)
    else:
        for xp in xpath:
            n = _find_xpath(xp)
            if n is not None:
                break
    if n is None:
        if default is not NO_DEFAULT:
            return default
        elif fatal:
            name = xpath if name is None else name
            raise ExtractorError('Could not find XML element %s' % name)
        else:
            return None
    return n

----------

def test_xpath_element(self):
    doc = xml.etree.ElementTree.Element('root')
    div = xml.etree.ElementTree.SubElement(doc, 'div')
    p = xml.etree.ElementTree.SubElement(div, 'p')
    p.text = 'Foo'
    self.assertEqual(xpath_element(doc, 'div/p'), p)
    self.assertEqual(xpath_element(doc, ['div/p']), p)
    self.assertEqual(xpath_element(doc, ['div/bar', 'div/p']), p)
    self.assertEqual(xpath_element(doc, 'div/bar', default='default'), 'default')
    self.assertEqual(xpath_element(doc, ['div/bar'], default='default'), 'default')
    self.assertTrue(xpath_element(doc, 'div/bar') is None)
    self.assertTrue(xpath_element(doc, ['div/bar']) is None)
    self.assertTrue(xpath_element(doc, ['div/bar'], 'div/baz') is None)
    self.assertRaises(ExtractorError, xpath_element, doc, 'div/bar', fatal=True)
    self.assertRaises(ExtractorError, xpath_element, doc, ['div/bar'], fatal=True)
    self.assertRaises(ExtractorError, xpath_element, doc, ['div/bar', 'div/baz'], fatal=True)

----------



Test Class Name: TestUtil