def js_to_json(code):
    COMMENT_RE = '/\\*(?:(?!\\*/).)*?\\*/|//[^\\n]*'
    SKIP_RE = '\\s*(?:{comment})?\\s*'.format(comment=COMMENT_RE)
    INTEGER_TABLE = (('(?s)^(0[xX][0-9a-fA-F]+){skip}:?$'.format(skip=SKIP_RE), 16), ('(?s)^(0+[0-7]+){skip}:?$'.format(skip=SKIP_RE), 8))

    def fix_kv(m):
        v = m.group(0)
        if v in ('true', 'false', 'null'):
            return v
        elif v.startswith('/*') or v.startswith('//') or v.startswith('!') or (v == ','):
            return ''
        if v[0] in ("'", '"'):
            v = re.sub('(?s)\\\\.|"', lambda m: {'"': '\\"', "\\'": "'", '\\\n': '', '\\x': '\\u00'}.get(m.group(0), m.group(0)), v[1:-1])
        else:
            for (regex, base) in INTEGER_TABLE:
                im = re.match(regex, v)
                if im:
                    i = int(im.group(1), base)
                    return '"%d":' % i if v.endswith(':') else '%d' % i
        return '"%s"' % v
    return re.sub('(?sx)\n        "(?:[^"\\\\]*(?:\\\\\\\\|\\\\[\'"nurtbfx/\\n]))*[^"\\\\]*"|\n        \'(?:[^\'\\\\]*(?:\\\\\\\\|\\\\[\'"nurtbfx/\\n]))*[^\'\\\\]*\'|\n        {comment}|,(?={skip}[\\]}}])|\n        (?:(?<![0-9])[eE]|[a-df-zA-DF-Z_])[.a-zA-Z_0-9]*|\n        \\b(?:0[xX][0-9a-fA-F]+|0+[0-7]+)(?:{skip}:)?|\n        [0-9]+(?={skip}:)|\n        !+\n        '.format(comment=COMMENT_RE, skip=SKIP_RE), fix_kv, code)

----------

def test_js_to_json_edgecases(self):
    on = js_to_json('{abc_def:\'1\\\'\\\\2\\\\\\\'3"4\'}')
    self.assertEqual(json.loads(on), {'abc_def': '1\'\\2\\\'3"4'})
    on = js_to_json('{"abc": true}')
    self.assertEqual(json.loads(on), {'abc': True})
    on = js_to_json('{\n            "x": 1,\n            y: "a",\n            z: some.code\n        }')
    d = json.loads(on)
    self.assertEqual(d['x'], 1)
    self.assertEqual(d['y'], 'a')
    on = js_to_json('{\n            a: !0,\n            b: !1,\n            c: !!0,\n            d: !!42.42,\n            e: !!![],\n            f: !"abc",\n            g: !"",\n            !42: 42\n        }')
    self.assertEqual(json.loads(on), {'a': 0, 'b': 1, 'c': 0, 'd': 42.42, 'e': [], 'f': 'abc', 'g': '', '42': 42})
    on = js_to_json('["abc", "def",]')
    self.assertEqual(json.loads(on), ['abc', 'def'])
    on = js_to_json('[/*comment\n*/"abc"/*comment\n*/,/*comment\n*/"def",/*comment\n*/]')
    self.assertEqual(json.loads(on), ['abc', 'def'])
    on = js_to_json('[//comment\n"abc" //comment\n,//comment\n"def",//comment\n]')
    self.assertEqual(json.loads(on), ['abc', 'def'])
    on = js_to_json('{"abc": "def",}')
    self.assertEqual(json.loads(on), {'abc': 'def'})
    on = js_to_json('{/*comment\n*/"abc"/*comment\n*/:/*comment\n*/"def"/*comment\n*/,/*comment\n*/}')
    self.assertEqual(json.loads(on), {'abc': 'def'})
    on = js_to_json('{ 0: /* " \n */ ",]" , }')
    self.assertEqual(json.loads(on), {'0': ',]'})
    on = js_to_json('{ /*comment\n*/0/*comment\n*/: /* " \n */ ",]" , }')
    self.assertEqual(json.loads(on), {'0': ',]'})
    on = js_to_json('{ 0: // comment\n1 }')
    self.assertEqual(json.loads(on), {'0': 1})
    on = js_to_json('["<p>x<\\/p>"]')
    self.assertEqual(json.loads(on), ['<p>x</p>'])
    on = js_to_json('["\\xaa"]')
    self.assertEqual(json.loads(on), ['Âª'])
    on = js_to_json("['a\\\nb']")
    self.assertEqual(json.loads(on), ['ab'])
    on = js_to_json("/*comment\n*/[/*comment\n*/'a\\\nb'/*comment\n*/]/*comment\n*/")
    self.assertEqual(json.loads(on), ['ab'])
    on = js_to_json('{0xff:0xff}')
    self.assertEqual(json.loads(on), {'255': 255})
    on = js_to_json('{/*comment\n*/0xff/*comment\n*/:/*comment\n*/0xff/*comment\n*/}')
    self.assertEqual(json.loads(on), {'255': 255})
    on = js_to_json('{077:077}')
    self.assertEqual(json.loads(on), {'63': 63})
    on = js_to_json('{/*comment\n*/077/*comment\n*/:/*comment\n*/077/*comment\n*/}')
    self.assertEqual(json.loads(on), {'63': 63})
    on = js_to_json('{42:42}')
    self.assertEqual(json.loads(on), {'42': 42})
    on = js_to_json('{/*comment\n*/42/*comment\n*/:/*comment\n*/42/*comment\n*/}')
    self.assertEqual(json.loads(on), {'42': 42})
    on = js_to_json('{42:4.2e1}')
    self.assertEqual(json.loads(on), {'42': 42.0})
    on = js_to_json('{ "0x40": "0x40" }')
    self.assertEqual(json.loads(on), {'0x40': '0x40'})
    on = js_to_json('{ "040": "040" }')
    self.assertEqual(json.loads(on), {'040': '040'})

----------



Test Class Name: TestUtil