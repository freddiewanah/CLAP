def prepare_filename(self, info_dict):
    """Generate the output filename."""
    try:
        template_dict = dict(info_dict)
        template_dict['epoch'] = int(time.time())
        autonumber_size = self.params.get('autonumber_size')
        if autonumber_size is None:
            autonumber_size = 5
        template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads
        if template_dict.get('resolution') is None:
            if template_dict.get('width') and template_dict.get('height'):
                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])
            elif template_dict.get('height'):
                template_dict['resolution'] = '%sp' % template_dict['height']
            elif template_dict.get('width'):
                template_dict['resolution'] = '%dx?' % template_dict['width']
        sanitize = lambda k, v: sanitize_filename(compat_str(v), restricted=self.params.get('restrictfilenames'), is_id=k == 'id' or k.endswith('_id'))
        template_dict = dict(((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v)) for (k, v) in template_dict.items() if v is not None and (not isinstance(v, (list, tuple, dict)))))
        template_dict = collections.defaultdict(lambda : self.params.get('outtmpl_na_placeholder', 'NA'), template_dict)
        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)
        field_size_compat_map = {'playlist_index': len(str(template_dict['n_entries'])), 'autonumber': autonumber_size}
        FIELD_SIZE_COMPAT_RE = '(?<!%)%\\((?P<field>autonumber|playlist_index)\\)s'
        mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)
        if mobj:
            outtmpl = re.sub(FIELD_SIZE_COMPAT_RE, '%%(\\1)0%dd' % field_size_compat_map[mobj.group('field')], outtmpl)
        for numeric_field in self._NUMERIC_FIELDS:
            if numeric_field not in template_dict:
                FORMAT_RE = '(?x)\n                        (?<!%)\n                        %\n                        \\({0}\\)  # mapping key\n                        (?:[#0\\-+ ]+)?  # conversion flags (optional)\n                        (?:\\d+)?  # minimum field width (optional)\n                        (?:\\.\\d+)?  # precision (optional)\n                        [hlL]?  # length modifier (optional)\n                        [diouxXeEfFgGcrs%]  # conversion type\n                    '
                outtmpl = re.sub(FORMAT_RE.format(numeric_field), '%({0})s'.format(numeric_field), outtmpl)
        sep = ''.join([random.choice(ascii_letters) for _ in range(32)])
        outtmpl = outtmpl.replace('%%', '%{0}%'.format(sep)).replace('$$', '${0}$'.format(sep))
        filename = expand_path(outtmpl).replace(sep, '') % template_dict
        if sys.version_info < (3, 0) and sys.platform == 'win32':
            filename = encodeFilename(filename, True).decode(preferredencoding())
        return sanitize_path(filename)
    except ValueError as err:
        self.report_error('Error in output template: ' + error_to_compat_str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')
        return None

----------

def test_prepare_filename(self):
    info = {'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}

    def fname(templ, na_placeholder='NA'):
        params = {'outtmpl': templ}
        if na_placeholder != 'NA':
            params['outtmpl_na_placeholder'] = na_placeholder
        ydl = YoutubeDL(params)
        return ydl.prepare_filename(info)
    self.assertEqual(fname('%(id)s.%(ext)s'), '1234.mp4')
    self.assertEqual(fname('%(id)s-%(width)s.%(ext)s'), '1234-NA.mp4')
    NA_TEST_OUTTMPL = '%(uploader_date)s-%(width)d-%(id)s.%(ext)s'
    self.assertEqual(fname(NA_TEST_OUTTMPL), 'NA-NA-1234.mp4')
    self.assertEqual(fname(NA_TEST_OUTTMPL, na_placeholder='none'), 'none-none-1234.mp4')
    self.assertEqual(fname(NA_TEST_OUTTMPL, na_placeholder=''), '--1234.mp4')
    self.assertEqual(fname('%(height)d.%(ext)s'), '1080.mp4')
    self.assertEqual(fname('%(height)6d.%(ext)s'), '  1080.mp4')
    self.assertEqual(fname('%(height)-6d.%(ext)s'), '1080  .mp4')
    self.assertEqual(fname('%(height)06d.%(ext)s'), '001080.mp4')
    self.assertEqual(fname('%(height) 06d.%(ext)s'), ' 01080.mp4')
    self.assertEqual(fname('%(height)   06d.%(ext)s'), ' 01080.mp4')
    self.assertEqual(fname('%(height)0 6d.%(ext)s'), ' 01080.mp4')
    self.assertEqual(fname('%(height)0   6d.%(ext)s'), ' 01080.mp4')
    self.assertEqual(fname('%(height)   0   6d.%(ext)s'), ' 01080.mp4')
    self.assertEqual(fname('%%'), '%')
    self.assertEqual(fname('%%%%'), '%%')
    self.assertEqual(fname('%%(height)06d.%(ext)s'), '%(height)06d.mp4')
    self.assertEqual(fname('%(width)06d.%(ext)s'), 'NA.mp4')
    self.assertEqual(fname('%(width)06d.%%(ext)s'), 'NA.%(ext)s')
    self.assertEqual(fname('%%(width)06d.%(ext)s'), '%(width)06d.mp4')
    self.assertEqual(fname('Hello %(title1)s'), 'Hello $PATH')
    self.assertEqual(fname('Hello %(title2)s'), 'Hello %PATH%')

----------



Test Class Name: TestYoutubeDL