def post_process(self, filename, ie_info):
    """Run all the postprocessors on the given file."""
    info = dict(ie_info)
    info['filepath'] = filename
    pps_chain = []
    if ie_info.get('__postprocessors') is not None:
        pps_chain.extend(ie_info['__postprocessors'])
    pps_chain.extend(self._pps)
    for pp in pps_chain:
        files_to_delete = []
        try:
            (files_to_delete, info) = pp.run(info)
        except PostProcessingError as e:
            self.report_error(e.msg)
        if files_to_delete and (not self.params.get('keepvideo', False)):
            for old_filename in files_to_delete:
                self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)
                try:
                    os.remove(encodeFilename(old_filename))
                except (IOError, OSError):
                    self.report_warning('Unable to remove downloaded original file')

----------

def test_postprocessors(self):
    filename = 'post-processor-testfile.mp4'
    audiofile = filename + '.mp3'

    class SimplePP(PostProcessor):

        def run(self, info):
            with open(audiofile, 'wt') as f:
                f.write('EXAMPLE')
            return ([info['filepath']], info)

    def run_pp(params, PP):
        with open(filename, 'wt') as f:
            f.write('EXAMPLE')
        ydl = YoutubeDL(params)
        ydl.add_post_processor(PP())
        ydl.post_process(filename, {'filepath': filename})
    run_pp({'keepvideo': True}, SimplePP)
    self.assertTrue(os.path.exists(filename), "%s doesn't exist" % filename)
    self.assertTrue(os.path.exists(audiofile), "%s doesn't exist" % audiofile)
    os.unlink(filename)
    os.unlink(audiofile)
    run_pp({'keepvideo': False}, SimplePP)
    self.assertFalse(os.path.exists(filename), '%s exists' % filename)
    self.assertTrue(os.path.exists(audiofile), "%s doesn't exist" % audiofile)
    os.unlink(audiofile)

    class ModifierPP(PostProcessor):

        def run(self, info):
            with open(info['filepath'], 'wt') as f:
                f.write('MODIFIED')
            return ([], info)
    run_pp({'keepvideo': False}, ModifierPP)
    self.assertTrue(os.path.exists(filename), "%s doesn't exist" % filename)
    os.unlink(filename)

----------



Test Class Name: TestYoutubeDL