def download():
    data_len = ctx.data.info().get('Content-length', None)
    if is_test and (data_len is None or int(data_len) > self._TEST_FILE_SIZE):
        data_len = self._TEST_FILE_SIZE
    if data_len is not None:
        data_len = int(data_len) + ctx.resume_len
        min_data_len = self.params.get('min_filesize')
        max_data_len = self.params.get('max_filesize')
        if min_data_len is not None and data_len < min_data_len:
            self.to_screen('\r[download] File is smaller than min-filesize (%s bytes < %s bytes). Aborting.' % (data_len, min_data_len))
            return False
        if max_data_len is not None and data_len > max_data_len:
            self.to_screen('\r[download] File is larger than max-filesize (%s bytes > %s bytes). Aborting.' % (data_len, max_data_len))
            return False
    byte_counter = 0 + ctx.resume_len
    block_size = ctx.block_size
    start = time.time()
    now = None
    before = start

    def retry(e):
        to_stdout = ctx.tmpfilename == '-'
        if ctx.stream is not None:
            if not to_stdout:
                ctx.stream.close()
            ctx.stream = None
        ctx.resume_len = byte_counter if to_stdout else os.path.getsize(encodeFilename(ctx.tmpfilename))
        raise RetryDownload(e)
    while True:
        try:
            data_block = ctx.data.read(block_size if data_len is None else min(block_size, data_len - byte_counter))
        except socket.timeout as e:
            retry(e)
        except socket.error as e:
            if e.errno in (errno.ECONNRESET, errno.ETIMEDOUT) or getattr(e, 'message', None) == 'The read operation timed out':
                retry(e)
            raise
        byte_counter += len(data_block)
        if len(data_block) == 0:
            break
        if ctx.stream is None:
            try:
                (ctx.stream, ctx.tmpfilename) = sanitize_open(ctx.tmpfilename, ctx.open_mode)
                assert ctx.stream is not None
                ctx.filename = self.undo_temp_name(ctx.tmpfilename)
                self.report_destination(ctx.filename)
            except (OSError, IOError) as err:
                self.report_error('unable to open for writing: %s' % str(err))
                return False
            if self.params.get('xattr_set_filesize', False) and data_len is not None:
                try:
                    write_xattr(ctx.tmpfilename, 'user.ytdl.filesize', str(data_len).encode('utf-8'))
                except (XAttrUnavailableError, XAttrMetadataError) as err:
                    self.report_error('unable to set filesize xattr: %s' % str(err))
        try:
            ctx.stream.write(data_block)
        except (IOError, OSError) as err:
            self.to_stderr('\n')
            self.report_error('unable to write data: %s' % str(err))
            return False
        self.slow_down(start, now, byte_counter - ctx.resume_len)
        now = time.time()
        after = now
        if not self.params.get('noresizebuffer', False):
            block_size = self.best_block_size(after - before, len(data_block))
        before = after
        speed = self.calc_speed(start, now, byte_counter - ctx.resume_len)
        if ctx.data_len is None:
            eta = None
        else:
            eta = self.calc_eta(start, time.time(), ctx.data_len - ctx.resume_len, byte_counter - ctx.resume_len)
        self._hook_progress({'status': 'downloading', 'downloaded_bytes': byte_counter, 'total_bytes': ctx.data_len, 'tmpfilename': ctx.tmpfilename, 'filename': ctx.filename, 'eta': eta, 'speed': speed, 'elapsed': now - ctx.start_time})
        if data_len is not None and byte_counter == data_len:
            break
    if not is_test and ctx.chunk_size and (ctx.data_len is not None) and (byte_counter < ctx.data_len):
        ctx.resume_len = byte_counter
        raise NextFragment()
    if ctx.stream is None:
        self.to_stderr('\n')
        self.report_error('Did not get any data blocks')
        return False
    if ctx.tmpfilename != '-':
        ctx.stream.close()
    if data_len is not None and byte_counter != data_len:
        err = ContentTooShortError(byte_counter, int(data_len))
        if count <= retries:
            retry(err)
        raise err
    self.try_rename(ctx.tmpfilename, ctx.filename)
    if self.params.get('updatetime', True):
        info_dict['filetime'] = self.try_utime(ctx.filename, ctx.data.info().get('last-modified', None))
    self._hook_progress({'downloaded_bytes': byte_counter, 'total_bytes': byte_counter, 'filename': ctx.filename, 'status': 'finished', 'elapsed': time.time() - ctx.start_time})
    return True

----------

def test_info_json(self):
    expected = list(EXPECTED_ANNOTATIONS)
    ie = youtube_dl.extractor.YoutubeIE()
    ydl = YoutubeDL(params)
    ydl.add_info_extractor(ie)
    ydl.download([TEST_ID])
    self.assertTrue(os.path.exists(ANNOTATIONS_FILE))
    annoxml = None
    with io.open(ANNOTATIONS_FILE, 'r', encoding='utf-8') as annof:
        annoxml = xml.etree.ElementTree.parse(annof)
    self.assertTrue(annoxml is not None, 'Failed to parse annotations XML')
    root = annoxml.getroot()
    self.assertEqual(root.tag, 'document')
    annotationsTag = root.find('annotations')
    self.assertEqual(annotationsTag.tag, 'annotations')
    annotations = annotationsTag.findall('annotation')
    for a in annotations:
        self.assertEqual(a.tag, 'annotation')
        if a.get('type') == 'text':
            textTag = a.find('TEXT')
            text = textTag.text
            self.assertTrue(text in expected)
            expected.remove(text)
    self.assertEqual(len(expected), 0, 'Not all expected annotations were found.')

----------



Test Class Name: TestAnnotations