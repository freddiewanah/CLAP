def aes_cbc_encrypt(data, key, iv):
    """
    Encrypt with aes in CBC mode. Using PKCS#7 padding

    @param {int[]} data        cleartext
    @param {int[]} key         16/24/32-Byte cipher key
    @param {int[]} iv          16-Byte IV
    @returns {int[]}           encrypted data
    """
    expanded_key = key_expansion(key)
    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))
    encrypted_data = []
    previous_cipher_block = iv
    for i in range(block_count):
        block = data[i * BLOCK_SIZE_BYTES:(i + 1) * BLOCK_SIZE_BYTES]
        block = pkcs7_padding(block)
        mixed_block = xor(block, previous_cipher_block)
        encrypted_block = aes_encrypt(mixed_block, expanded_key)
        encrypted_data += encrypted_block
        previous_cipher_block = encrypted_block
    return encrypted_data

----------

def test_cbc_encrypt(self):
    data = bytes_to_intlist(self.secret_msg)
    encrypted = intlist_to_bytes(aes_cbc_encrypt(data, self.key, self.iv))
    self.assertEqual(encrypted, b"\x97\x92+\xe5\x0b\xc3\x18\x91ky9m&\xb3\xb5@\xe6'\xc2\x96.\xc8u\x88\xab9-[\x9e|\xf1\xcd")

----------



Test Class Name: TestAES