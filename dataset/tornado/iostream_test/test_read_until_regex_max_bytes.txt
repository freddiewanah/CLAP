def wait(self, timeout: Optional[Union[float, datetime.timedelta]]=None) -> Awaitable[bool]:
    """Wait for `.notify`.

        Returns a `.Future` that resolves ``True`` if the condition is notified,
        or ``False`` after a timeout.
        """
    waiter = Future()
    self._waiters.append(waiter)
    if timeout:

        def on_timeout() -> None:
            if not waiter.done():
                future_set_result_unless_cancelled(waiter, False)
            self._garbage_collect()
        io_loop = ioloop.IOLoop.current()
        timeout_handle = io_loop.add_timeout(timeout, on_timeout)
        waiter.add_done_callback(lambda _: io_loop.remove_timeout(timeout_handle))
    return waiter

----------

@gen_test
def test_read_until_regex_max_bytes(self: typing.Any):
    (rs, ws) = (yield self.make_iostream_pair())
    closed = Event()
    rs.set_close_callback(closed.set)
    try:
        fut = rs.read_until_regex(b'def', max_bytes=50)
        ws.write(b'abcdef')
        data = (yield fut)
        self.assertEqual(data, b'abcdef')
        fut = rs.read_until_regex(b'def', max_bytes=6)
        ws.write(b'abcdef')
        data = (yield fut)
        self.assertEqual(data, b'abcdef')
        with ExpectLog(gen_log, 'Unsatisfiable read', level=logging.INFO):
            rs.read_until_regex(b'def', max_bytes=5)
            ws.write(b'123456')
            yield closed.wait()
    finally:
        ws.close()
        rs.close()

----------



Test Class Name: IOStreamPairContext