def sleep(duration: float) -> 'Future[None]':
    """Return a `.Future` that resolves after the given number of seconds.

    When used with ``yield`` in a coroutine, this is a non-blocking
    analogue to `time.sleep` (which should not be used in coroutines
    because it is blocking)::

        yield gen.sleep(0.5)

    Note that calling this function on its own does nothing; you must
    wait on the `.Future` it returns (usually by yielding it).

    .. versionadded:: 4.1
    """
    f = _create_future()
    IOLoop.current().call_later(duration, lambda : future_set_result_unless_cancelled(f, None))
    return f

----------

@gen_test
def test_task_done(self):
    q = self.queue_class()
    for i in range(100):
        q.put_nowait(i)
    self.accumulator = 0

    @gen.coroutine
    def worker():
        while True:
            item = (yield q.get())
            self.accumulator += item
            q.task_done()
            yield gen.sleep(random() * 0.01)
    worker()
    worker()
    yield q.join()
    self.assertEqual(sum(range(100)), self.accumulator)

----------



Test Class Name: QueueJoinTest