def get(self, timeout: Optional[Union[float, datetime.timedelta]]=None) -> Awaitable[_T]:
    """Remove and return an item from the queue.

        Returns an awaitable which resolves once an item is available, or raises
        `tornado.util.TimeoutError` after a timeout.

        ``timeout`` may be a number denoting a time (on the same
        scale as `tornado.ioloop.IOLoop.time`, normally `time.time`), or a
        `datetime.timedelta` object for a deadline relative to the
        current time.

        .. note::

           The ``timeout`` argument of this method differs from that
           of the standard library's `queue.Queue.get`. That method
           interprets numeric values as relative timeouts; this one
           interprets them as absolute deadlines and requires
           ``timedelta`` objects for relative timeouts (consistent
           with other timeouts in Tornado).

        """
    future = Future()
    try:
        future.set_result(self.get_nowait())
    except QueueEmpty:
        self._getters.append(future)
        _set_timeout(future, timeout)
    return future

----------

@gen_test
def test_put_timeout(self):
    q = queues.Queue(1)
    q.put_nowait(0)
    put_timeout = q.put(1, timeout=timedelta(seconds=0.01))
    put = q.put(2)
    with self.assertRaises(TimeoutError):
        yield put_timeout
    self.assertEqual(0, q.get_nowait())
    self.assertEqual(2, (yield q.get()))
    yield put

----------



Test Class Name: QueuePutTest