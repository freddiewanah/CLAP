def put(self, item: _T, timeout: Optional[Union[float, datetime.timedelta]]=None) -> 'Future[None]':
    """Put an item into the queue, perhaps waiting until there is room.

        Returns a Future, which raises `tornado.util.TimeoutError` after a
        timeout.

        ``timeout`` may be a number denoting a time (on the same
        scale as `tornado.ioloop.IOLoop.time`, normally `time.time`), or a
        `datetime.timedelta` object for a deadline relative to the
        current time.
        """
    future = Future()
    try:
        self.put_nowait(item)
    except QueueFull:
        self._putters.append((item, future))
        _set_timeout(future, timeout)
    else:
        future.set_result(None)
    return future

----------

def test_repr_and_str(self):
    q = queues.Queue(maxsize=1)
    self.assertIn(hex(id(q)), repr(q))
    self.assertNotIn(hex(id(q)), str(q))
    q.get()
    for q_str in (repr(q), str(q)):
        self.assertTrue(q_str.startswith('<Queue'))
        self.assertIn('maxsize=1', q_str)
        self.assertIn('getters[1]', q_str)
        self.assertNotIn('putters', q_str)
        self.assertNotIn('tasks', q_str)
    q.put(None)
    q.put(None)
    q.put(None)
    for q_str in (repr(q), str(q)):
        self.assertNotIn('getters', q_str)
        self.assertIn('putters[1]', q_str)
        self.assertIn('tasks=2', q_str)

----------



Test Class Name: QueueBasicTest