def put(self, item: _T, timeout: Optional[Union[float, datetime.timedelta]]=None) -> 'Future[None]':
    """Put an item into the queue, perhaps waiting until there is room.

        Returns a Future, which raises `tornado.util.TimeoutError` after a
        timeout.

        ``timeout`` may be a number denoting a time (on the same
        scale as `tornado.ioloop.IOLoop.time`, normally `time.time`), or a
        `datetime.timedelta` object for a deadline relative to the
        current time.
        """
    future = Future()
    try:
        self.put_nowait(item)
    except QueueFull:
        self._putters.append((item, future))
        _set_timeout(future, timeout)
    else:
        future.set_result(None)
    return future

----------

@gen_test
def test_blocking_put_wait(self):
    q = queues.Queue(1)
    q.put_nowait(0)

    def get_and_discard():
        q.get()
    self.io_loop.call_later(0.01, get_and_discard)
    self.io_loop.call_later(0.02, get_and_discard)
    futures = [q.put(0), q.put(1)]
    self.assertFalse(any((f.done() for f in futures)))
    yield futures

----------



Test Class Name: QueuePutTest