def put(self, item: _T, timeout: Optional[Union[float, datetime.timedelta]]=None) -> 'Future[None]':
    """Put an item into the queue, perhaps waiting until there is room.

        Returns a Future, which raises `tornado.util.TimeoutError` after a
        timeout.

        ``timeout`` may be a number denoting a time (on the same
        scale as `tornado.ioloop.IOLoop.time`, normally `time.time`), or a
        `datetime.timedelta` object for a deadline relative to the
        current time.
        """
    future = Future()
    try:
        self.put_nowait(item)
    except QueueFull:
        self._putters.append((item, future))
        _set_timeout(future, timeout)
    else:
        future.set_result(None)
    return future

----------

def test_nonblocking_put_exception(self):
    q = queues.Queue(1)
    q.put(0)
    self.assertRaises(queues.QueueFull, q.put_nowait, 1)

----------



Test Class Name: QueuePutTest