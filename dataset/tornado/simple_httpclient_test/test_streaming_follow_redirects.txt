def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_streaming_follow_redirects(self: typing.Any):
    headers = []
    chunk_bytes = []
    self.fetch('/redirect?url=/hello', header_callback=headers.append, streaming_callback=chunk_bytes.append)
    chunks = list(map(to_unicode, chunk_bytes))
    self.assertEqual(chunks, ['Hello world!'])
    num_start_lines = len([h for h in headers if h.startswith('HTTP/')])
    self.assertEqual(num_start_lines, 1)

----------



Test Class Name: TimeoutResolver