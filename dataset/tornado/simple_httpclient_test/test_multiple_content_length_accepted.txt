def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_multiple_content_length_accepted(self: typing.Any):
    response = self.fetch('/content_length?value=2,2')
    self.assertEqual(response.body, b'ok')
    response = self.fetch('/content_length?value=2,%202,2')
    self.assertEqual(response.body, b'ok')
    with ExpectLog(gen_log, '.*Multiple unequal Content-Lengths', level=logging.INFO):
        with self.assertRaises(HTTPStreamClosedError):
            self.fetch('/content_length?value=2,4', raise_error=True)
        with self.assertRaises(HTTPStreamClosedError):
            self.fetch('/content_length?value=2,%202,3', raise_error=True)

----------



Test Class Name: TimeoutResolver