def sleep(duration: float) -> 'Future[None]':
    """Return a `.Future` that resolves after the given number of seconds.

    When used with ``yield`` in a coroutine, this is a non-blocking
    analogue to `time.sleep` (which should not be used in coroutines
    because it is blocking)::

        yield gen.sleep(0.5)

    Note that calling this function on its own does nothing; you must
    wait on the `.Future` it returns (usually by yielding it).

    .. versionadded:: 4.1
    """
    f = _create_future()
    IOLoop.current().call_later(duration, lambda : future_set_result_unless_cancelled(f, None))
    return f

----------

def test_singleton(self: typing.Any):
    self.assertTrue(SimpleAsyncHTTPClient() is SimpleAsyncHTTPClient())
    self.assertTrue(SimpleAsyncHTTPClient() is not SimpleAsyncHTTPClient(force_instance=True))
    with closing(IOLoop()) as io_loop2:

        async def make_client():
            await gen.sleep(0)
            return SimpleAsyncHTTPClient()
        client1 = self.io_loop.run_sync(make_client)
        client2 = io_loop2.run_sync(make_client)
        self.assertTrue(client1 is not client2)

----------



Test Class Name: SimpleHTTPClientTestMixin