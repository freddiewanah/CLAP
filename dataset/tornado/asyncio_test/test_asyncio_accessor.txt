def get_event_loop(self) -> asyncio.AbstractEventLoop:
    try:
        return super().get_event_loop()
    except (RuntimeError, AssertionError):
        loop = self.new_event_loop()
        self.set_event_loop(loop)
        return loop

----------

def test_asyncio_accessor(self):
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', DeprecationWarning)
        self.assertRaises(RuntimeError, self.executor.submit(asyncio.get_event_loop).result)
        asyncio.set_event_loop_policy(AnyThreadEventLoopPolicy())
        self.assertIsInstance(self.executor.submit(asyncio.get_event_loop).result(), asyncio.AbstractEventLoop)
        self.executor.submit(lambda : asyncio.get_event_loop().close()).result()

----------



Test Class Name: AnyThreadEventLoopPolicyTest