def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_default_host_matching(self):
    self.app.add_handlers('www.example.com', [('/foo', HostMatchingTest.Handler, {'reply': '[0]'})])
    self.app.add_handlers('www\\.example\\.com', [('/bar', HostMatchingTest.Handler, {'reply': '[1]'})])
    self.app.add_handlers('www.test.com', [('/baz', HostMatchingTest.Handler, {'reply': '[2]'})])
    response = self.fetch('/foo')
    self.assertEqual(response.body, b'[0]')
    response = self.fetch('/bar')
    self.assertEqual(response.body, b'[1]')
    response = self.fetch('/baz')
    self.assertEqual(response.code, 404)
    response = self.fetch('/foo', headers={'X-Real-Ip': '127.0.0.1'})
    self.assertEqual(response.code, 404)
    self.app.default_host = 'www.test.com'
    response = self.fetch('/baz')
    self.assertEqual(response.body, b'[2]')

----------



Test Class Name: DefaultHostMatchingTest