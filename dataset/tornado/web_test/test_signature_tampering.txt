def decode_signed_value(secret: _CookieSecretTypes, name: str, value: Union[None, str, bytes], max_age_days: float=31, clock: Optional[Callable[[], float]]=None, min_version: Optional[int]=None) -> Optional[bytes]:
    if clock is None:
        clock = time.time
    if min_version is None:
        min_version = DEFAULT_SIGNED_VALUE_MIN_VERSION
    if min_version > 2:
        raise ValueError('Unsupported min_version %d' % min_version)
    if not value:
        return None
    value = utf8(value)
    version = _get_version(value)
    if version < min_version:
        return None
    if version == 1:
        assert not isinstance(secret, dict)
        return _decode_signed_value_v1(secret, name, value, max_age_days, clock)
    elif version == 2:
        return _decode_signed_value_v2(secret, name, value, max_age_days, clock)
    else:
        return None

----------

def test_signature_tampering(self):
    prefix = '2|1:0|10:1300000000|3:key|8:dmFsdWU=|'

    def validate(sig):
        return b'value' == decode_signed_value(SignedValueTest.SECRET, 'key', prefix + sig, clock=self.present)
    self.assertTrue(validate('3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152'))
    self.assertFalse(validate('0' * 32))
    self.assertFalse(validate('4d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152'))
    self.assertFalse(validate('3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e153'))
    self.assertFalse(validate('3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e15'))
    self.assertFalse(validate('3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e1538'))

----------



Test Class Name: SignedValueTest