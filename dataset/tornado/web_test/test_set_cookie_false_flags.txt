def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_set_cookie_false_flags(self):
    response = self.fetch('/set_falsy_flags')
    headers = sorted(response.headers.get_list('Set-Cookie'))
    self.assertEqual(headers[0].lower(), 'a=1; path=/; secure')
    self.assertEqual(headers[1].lower(), 'b=1; path=/')
    self.assertEqual(headers[2].lower(), 'c=1; httponly; path=/')
    self.assertEqual(headers[3].lower(), 'd=1; path=/')

----------



Test Class Name: SetCookieFalsyFlags