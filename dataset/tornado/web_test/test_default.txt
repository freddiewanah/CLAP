def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_default(self):
    with ExpectLog(app_log, 'Uncaught exception'):
        response = self.fetch('/default')
        self.assertEqual(response.code, 500)
        self.assertTrue(b'500: Internal Server Error' in response.body)
        response = self.fetch('/default?status=503')
        self.assertEqual(response.code, 503)
        self.assertTrue(b'503: Service Unavailable' in response.body)
        response = self.fetch('/default?status=435')
        self.assertEqual(response.code, 435)
        self.assertTrue(b'435: Unknown' in response.body)

----------



Test Class Name: FailedWriteErrorHandler