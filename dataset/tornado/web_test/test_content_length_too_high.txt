def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_content_length_too_high(self):
    with ExpectLog(app_log, '(Uncaught exception|Exception in callback)'):
        with ExpectLog(gen_log, '(Cannot send error response after headers written|Failed to flush partial response)'):
            with self.assertRaises(HTTPClientError):
                self.fetch('/high', raise_error=True)
    self.assertEqual(str(self.server_error), 'Tried to write 40 bytes less than Content-Length')

----------



Test Class Name: TooLow