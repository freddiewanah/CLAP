def cookie_headers(self, token=None):
    if token is None:
        token = self.xsrf_token
    return {'Cookie': '_xsrf=' + token}

----------

def test_versioning(self):
    self.assertNotEqual(self.get_token(version=1), self.get_token(version=1))
    v1_token = self.get_token(version=1)
    for i in range(5):
        self.assertEqual(self.get_token(v1_token, version=1), v1_token)
    v2_token = self.get_token(v1_token)
    self.assertNotEqual(v1_token, v2_token)
    self.assertNotEqual(v2_token, self.get_token(v1_token))
    for (cookie_token, body_token) in ((v1_token, v2_token), (v2_token, v1_token)):
        response = self.fetch('/', method='POST', body=urllib.parse.urlencode(dict(_xsrf=body_token)), headers=self.cookie_headers(cookie_token))
        self.assertEqual(response.code, 200)

----------



Test Class Name: Handler