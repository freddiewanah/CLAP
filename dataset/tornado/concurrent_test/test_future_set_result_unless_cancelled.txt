def future_set_result_unless_cancelled(future: 'Union[futures.Future[_T], Future[_T]]', value: _T) -> None:
    """Set the given ``value`` as the `Future`'s result, if not cancelled.

    Avoids ``asyncio.InvalidStateError`` when calling ``set_result()`` on
    a cancelled `asyncio.Future`.

    .. versionadded:: 5.0
    """
    if not future.cancelled():
        future.set_result(value)

----------

def test_future_set_result_unless_cancelled(self):
    fut = Future()
    future_set_result_unless_cancelled(fut, 42)
    self.assertEqual(fut.result(), 42)
    self.assertFalse(fut.cancelled())
    fut = Future()
    fut.cancel()
    is_cancelled = fut.cancelled()
    future_set_result_unless_cancelled(fut, 42)
    self.assertEqual(fut.cancelled(), is_cancelled)
    if not is_cancelled:
        self.assertEqual(fut.result(), 42)

----------



Test Class Name: MiscFutureTest