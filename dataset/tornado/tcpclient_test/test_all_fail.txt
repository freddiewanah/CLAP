def resolve_connect(self, af, addr, success):
    future = self.connect_futures.pop((af, addr))
    if success:
        future.set_result(self.streams[addr])
    else:
        self.streams.pop(addr)
        future.set_exception(IOError())
    self.io_loop.add_callback(self.stop)
    self.wait()

----------

def test_all_fail(self):
    (conn, future) = self.start_connect(self.addrinfo)
    self.assert_pending((AF1, 'a'))
    conn.on_timeout()
    self.assert_pending((AF1, 'a'), (AF2, 'c'))
    self.resolve_connect(AF2, 'c', False)
    self.assert_pending((AF1, 'a'), (AF2, 'd'))
    self.resolve_connect(AF2, 'd', False)
    self.assert_pending((AF1, 'a'))
    self.resolve_connect(AF1, 'a', False)
    self.assert_pending((AF1, 'b'))
    self.assertFalse(future.done())
    self.resolve_connect(AF1, 'b', False)
    self.assertRaises(IOError, future.result)

----------



Test Class Name: FakeStream