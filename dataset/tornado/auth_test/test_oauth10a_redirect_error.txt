def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

@unittest.skipIf(mock is None, 'mock package not present')
def test_oauth10a_redirect_error(self):
    with mock.patch.object(OAuth1ServerRequestTokenHandler, 'get') as get:
        get.side_effect = Exception('boom')
        with ExpectLog(app_log, 'Uncaught exception'):
            response = self.fetch('/oauth10a/client/login', follow_redirects=False)
        self.assertEqual(response.code, 500)

----------



Test Class Name: AuthTest