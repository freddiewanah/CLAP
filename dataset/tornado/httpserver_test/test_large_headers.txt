def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_large_headers(self):
    with ExpectLog(gen_log, 'Unsatisfiable read', required=False):
        try:
            self.fetch('/', headers={'X-Filler': 'a' * 1000}, raise_error=True)
            self.fail('did not raise expected exception')
        except HTTPError as e:
            if e.response is not None:
                self.assertIn(e.response.code, (431, 599))

----------



Test Class Name: MaxHeaderSizeTest