def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

def test_header_types(self):
    for value in ['MyUserAgent', b'MyUserAgent']:
        for container in [dict, HTTPHeaders]:
            headers = container()
            headers['User-Agent'] = value
            resp = self.fetch('/user_agent', headers=headers)
            self.assertEqual(resp.body, b'MyUserAgent', 'response=%r, value=%r, container=%r' % (resp.body, value, container))

----------



Test Class Name: HTTPClientCommonTestCase