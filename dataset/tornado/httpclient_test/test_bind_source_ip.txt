def fetch(self, request: Union['HTTPRequest', str], **kwargs: Any) -> 'HTTPResponse':
    """Executes a request, returning an `HTTPResponse`.

        The request may be either a string URL or an `HTTPRequest` object.
        If it is a string, we construct an `HTTPRequest` using any additional
        kwargs: ``HTTPRequest(request, **kwargs)``

        If an error occurs during the fetch, we raise an `HTTPError` unless
        the ``raise_error`` keyword argument is set to False.
        """
    response = self._io_loop.run_sync(functools.partial(self._async_client.fetch, request, **kwargs))
    return response

----------

@gen_test
def test_bind_source_ip(self):
    url = self.get_url('/hello')
    request = HTTPRequest(url, network_interface='127.0.0.1')
    response = (yield self.http_client.fetch(request))
    self.assertEqual(response.code, 200)
    with self.assertRaises((ValueError, HTTPError)) as context:
        request = HTTPRequest(url, network_interface='not-interface-or-ip')
        yield self.http_client.fetch(request)
    self.assertIn('not-interface-or-ip', str(context.exception))

----------



Test Class Name: HTTPClientCommonTestCase