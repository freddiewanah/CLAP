def utf8(value: Union[None, str, bytes]) -> Optional[bytes]:
    """Converts a string argument to a byte string.

    If the argument is already a byte string or None, it is returned unchanged.
    Otherwise it must be a unicode string and is encoded as utf8.
    """
    if isinstance(value, _UTF8_TYPES):
        return value
    if not isinstance(value, unicode_type):
        raise TypeError('Expected bytes, unicode, or None; got %r' % type(value))
    return value.encode('utf-8')

----------

def test_body_encoding(self):
    unicode_body = 'Ã©'
    byte_body = binascii.a2b_hex(b'e9')
    response = self.fetch('/echopost', method='POST', body=unicode_body, headers={'Content-Type': 'application/blah'})
    self.assertEqual(response.headers['Content-Length'], '2')
    self.assertEqual(response.body, utf8(unicode_body))
    response = self.fetch('/echopost', method='POST', body=byte_body, headers={'Content-Type': 'application/blah'})
    self.assertEqual(response.headers['Content-Length'], '1')
    self.assertEqual(response.body, byte_body)
    response = self.fetch('/echopost', method='POST', body=byte_body, headers={'Content-Type': 'application/blah'}, user_agent='foo')
    self.assertEqual(response.headers['Content-Length'], '1')
    self.assertEqual(response.body, byte_body)

----------



Test Class Name: HTTPClientCommonTestCase