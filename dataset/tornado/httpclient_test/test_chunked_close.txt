def write(self, chunk: Union[str, bytes, dict]) -> None:
    """Writes the given chunk to the output buffer.

        To write the output to the network, use the `flush()` method below.

        If the given chunk is a dictionary, we write it as JSON and set
        the Content-Type of the response to be ``application/json``.
        (if you want to send JSON as a different ``Content-Type``, call
        ``set_header`` *after* calling ``write()``).

        Note that lists are not converted to JSON because of a potential
        cross-site security vulnerability.  All JSON output should be
        wrapped in a dictionary.  More details at
        http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
        https://github.com/facebook/tornado/issues/1009
        """
    if self._finished:
        raise RuntimeError('Cannot write() after finish()')
    if not isinstance(chunk, (bytes, unicode_type, dict)):
        message = 'write() only accepts bytes, unicode, and dict objects'
        if isinstance(chunk, list):
            message += '. Lists not accepted for security reasons; see ' + 'http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler.write'
        raise TypeError(message)
    if isinstance(chunk, dict):
        chunk = escape.json_encode(chunk)
        self.set_header('Content-Type', 'application/json; charset=UTF-8')
    chunk = utf8(chunk)
    self._write_buffer.append(chunk)

----------

def test_chunked_close(self):
    (sock, port) = bind_unused_port()
    with closing(sock):

        @gen.coroutine
        def accept_callback(conn, address):
            stream = IOStream(conn)
            request_data = (yield stream.read_until(b'\r\n\r\n'))
            if b'HTTP/1.' not in request_data:
                self.skipTest('requires HTTP/1.x')
            yield stream.write(b'HTTP/1.1 200 OK\nTransfer-Encoding: chunked\n\n1\n1\n1\n2\n0\n\n'.replace(b'\n', b'\r\n'))
            stream.close()
        netutil.add_accept_handler(sock, accept_callback)
        resp = self.fetch('http://127.0.0.1:%d/' % port)
        resp.rethrow()
        self.assertEqual(resp.body, b'12')
        self.io_loop.remove_handler(sock.fileno())

----------



Test Class Name: HTTPClientCommonTestCase