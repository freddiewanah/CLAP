def parse_cookie(cookie: str) -> Dict[str, str]:
    """Parse a ``Cookie`` HTTP header into a dict of name/value pairs.

    This function attempts to mimic browser cookie parsing behavior;
    it specifically does not follow any of the cookie-related RFCs
    (because browsers don't either).

    The algorithm used is identical to that used by Django version 1.9.10.

    .. versionadded:: 4.4.2
    """
    cookiedict = {}
    for chunk in cookie.split(str(';')):
        if str('=') in chunk:
            (key, val) = chunk.split(str('='), 1)
        else:
            (key, val) = (str(''), chunk)
        (key, val) = (key.strip(), val.strip())
        if key or val:
            cookiedict[key] = _unquote_cookie(val)
    return cookiedict

----------

def test_python_cookies(self):
    """
        Test cases copied from Python's Lib/test/test_http_cookies.py
        """
    self.assertEqual(parse_cookie('chips=ahoy; vienna=finger'), {'chips': 'ahoy', 'vienna': 'finger'})
    self.assertEqual(parse_cookie('keebler="E=mc2; L=\\"Loves\\"; fudge=\\012;"'), {'keebler': '"E=mc2', 'L': '\\"Loves\\"', 'fudge': '\\012', '': '"'})
    self.assertEqual(parse_cookie('keebler=E=mc2'), {'keebler': 'E=mc2'})
    self.assertEqual(parse_cookie('key:term=value:term'), {'key:term': 'value:term'})
    self.assertEqual(parse_cookie('a=b; c=[; d=r; f=h'), {'a': 'b', 'c': '[', 'd': 'r', 'f': 'h'})

----------



Test Class Name: ParseCookieTest