def generate(self, **kwargs: Any) -> bytes:
    """Generate this template with the given arguments."""
    namespace = {'escape': escape.xhtml_escape, 'xhtml_escape': escape.xhtml_escape, 'url_escape': escape.url_escape, 'json_encode': escape.json_encode, 'squeeze': escape.squeeze, 'linkify': escape.linkify, 'datetime': datetime, '_tt_utf8': escape.utf8, '_tt_string_types': (unicode_type, bytes), '__name__': self.name.replace('.', '_'), '__loader__': ObjectDict(get_source=lambda name: self.code)}
    namespace.update(self.namespace)
    namespace.update(kwargs)
    exec_in(self.compiled, namespace)
    execute = typing.cast(Callable[[], bytes], namespace['_tt_execute'])
    linecache.clearcache()
    return execute()

----------

def test_whitespace_by_filename(self):
    loader = DictLoader({'foo.html': '   \n\t\n asdf\t   ', 'bar.js': ' \n\n\n\t qwer     ', 'baz.txt': '\t    zxcv\n\n', 'include.html': '  {% include baz.txt %} \n ', 'include.txt': '\t\t{% include foo.html %}    '})
    self.assertEqual(loader.load('foo.html').generate(), b'\nasdf ')
    self.assertEqual(loader.load('bar.js').generate(), b'\nqwer ')
    self.assertEqual(loader.load('baz.txt').generate(), b'\t    zxcv\n\n')
    self.assertEqual(loader.load('include.html').generate(), b' \t    zxcv\n\n\n')
    self.assertEqual(loader.load('include.txt').generate(), b'\t\t\nasdf     ')

----------



Test Class Name: AutoEscapeTest