def generate(self, **kwargs: Any) -> bytes:
    """Generate this template with the given arguments."""
    namespace = {'escape': escape.xhtml_escape, 'xhtml_escape': escape.xhtml_escape, 'url_escape': escape.url_escape, 'json_encode': escape.json_encode, 'squeeze': escape.squeeze, 'linkify': escape.linkify, 'datetime': datetime, '_tt_utf8': escape.utf8, '_tt_string_types': (unicode_type, bytes), '__name__': self.name.replace('.', '_'), '__loader__': ObjectDict(get_source=lambda name: self.code)}
    namespace.update(self.namespace)
    namespace.update(kwargs)
    exec_in(self.compiled, namespace)
    execute = typing.cast(Callable[[], bytes], namespace['_tt_execute'])
    linecache.clearcache()
    return execute()

----------

def test_custom_escape(self):
    loader = DictLoader({'foo.py': '{% autoescape py_escape %}s = {{ name }}\n'})

    def py_escape(s):
        self.assertEqual(type(s), bytes)
        return repr(native_str(s))

    def render(template, name):
        return loader.load(template).generate(py_escape=py_escape, name=name)
    self.assertEqual(render('foo.py', '<html>'), b"s = '<html>'\n")
    self.assertEqual(render('foo.py', "';sys.exit()"), b's = "\';sys.exit()"\n')
    self.assertEqual(render('foo.py', ['not a string']), b's = "[\'not a string\']"\n')

----------



Test Class Name: AutoEscapeTest