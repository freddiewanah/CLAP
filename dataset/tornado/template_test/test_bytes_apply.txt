def to_unicode(value: Union[None, str, bytes]) -> Optional[str]:
    """Converts a string argument to a unicode string.

    If the argument is already a unicode string or None, it is returned
    unchanged.  Otherwise it must be a byte string and is decoded as utf8.
    """
    if isinstance(value, _TO_UNICODE_TYPES):
        return value
    if not isinstance(value, bytes):
        raise TypeError('Expected bytes, unicode, or None; got %r' % type(value))
    return value.decode('utf-8')

----------

def test_bytes_apply(self):

    def upper(s):
        return utf8(to_unicode(s).upper())
    template = Template(utf8('{% apply upper %}foo é{% end %}'))
    self.assertEqual(template.generate(upper=upper), utf8('FOO É'))

----------



Test Class Name: TemplateTest