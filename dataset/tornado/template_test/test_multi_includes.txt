def generate(self, **kwargs: Any) -> bytes:
    """Generate this template with the given arguments."""
    namespace = {'escape': escape.xhtml_escape, 'xhtml_escape': escape.xhtml_escape, 'url_escape': escape.url_escape, 'json_encode': escape.json_encode, 'squeeze': escape.squeeze, 'linkify': escape.linkify, 'datetime': datetime, '_tt_utf8': escape.utf8, '_tt_string_types': (unicode_type, bytes), '__name__': self.name.replace('.', '_'), '__loader__': ObjectDict(get_source=lambda name: self.code)}
    namespace.update(self.namespace)
    namespace.update(kwargs)
    exec_in(self.compiled, namespace)
    execute = typing.cast(Callable[[], bytes], namespace['_tt_execute'])
    linecache.clearcache()
    return execute()

----------

def test_multi_includes(self):
    loader = DictLoader({'a.html': "{% include 'b.html' %}", 'b.html': "{% include 'c.html' %}", 'c.html': '{{1/0}}'})
    try:
        loader.load('a.html').generate()
        self.fail('did not get expected exception')
    except ZeroDivisionError:
        self.assertTrue('# c.html:1 (via b.html:1, a.html:1)' in traceback.format_exc())

----------



Test Class Name: StackTraceTest