def run_in_executor(self, executor: Optional[concurrent.futures.Executor], func: Callable[..., _T], *args: Any) -> Awaitable[_T]:
    """Runs a function in a ``concurrent.futures.Executor``. If
        ``executor`` is ``None``, the IO loop's default executor will be used.

        Use `functools.partial` to pass keyword arguments to ``func``.

        .. versionadded:: 5.0
        """
    if executor is None:
        if not hasattr(self, '_executor'):
            from tornado.process import cpu_count
            self._executor = concurrent.futures.ThreadPoolExecutor(max_workers=cpu_count() * 5)
        executor = self._executor
    c_future = executor.submit(func, *args)
    t_future = Future()
    self.add_future(c_future, lambda f: chain_future(f, t_future))
    return t_future

----------

@gen_test
def test_set_default_executor(self):
    count = [0]

    class MyExecutor(futures.ThreadPoolExecutor):

        def submit(self, func, *args):
            count[0] += 1
            return super().submit(func, *args)
    event = threading.Event()

    def sync_func():
        event.set()
    executor = MyExecutor(1)
    loop = IOLoop.current()
    loop.set_default_executor(executor)
    yield loop.run_in_executor(None, sync_func)
    self.assertEqual(1, count[0])
    self.assertTrue(event.is_set())

----------



Test Class Name: TestIOLoopFutures