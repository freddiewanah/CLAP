def process_response(self, request, response, spider):
    if request.meta.get('dont_redirect', False) or response.status in getattr(spider, 'handle_httpstatus_list', []) or response.status in request.meta.get('handle_httpstatus_list', []) or request.meta.get('handle_httpstatus_all', False):
        return response
    allowed_status = (301, 302, 303, 307, 308)
    if 'Location' not in response.headers or response.status not in allowed_status:
        return response
    location = safe_url_string(response.headers['Location'])
    if response.headers['Location'].startswith(b'//'):
        request_scheme = urlparse(request.url).scheme
        location = request_scheme + '://' + location.lstrip('/')
    redirected_url = urljoin(request.url, location)
    if response.status in (301, 307, 308) or request.method == 'HEAD':
        redirected = _build_redirect_request(request, url=redirected_url)
        return self._redirect(redirected, request, spider, response.status)
    redirected = self._redirect_request_using_get(request, redirected_url)
    return self._redirect(redirected, request, spider, response.status)

----------

def test_utf8_location(self):
    req = Request('http://scrapytest.org/first')
    utf8_location = '/ação'.encode('utf-8')
    resp = Response('http://scrapytest.org/first', headers={'Location': utf8_location}, status=302)
    req_result = self.mw.process_response(req, resp, self.spider)
    perc_encoded_utf8_url = 'http://scrapytest.org/a%C3%A7%C3%A3o'
    self.assertEqual(perc_encoded_utf8_url, req_result.url)

----------



Test Class Name: RedirectMiddlewareTest