def process_response(self, request, response, spider):
    if request.meta.get('dont_redirect', False) or response.status in getattr(spider, 'handle_httpstatus_list', []) or response.status in request.meta.get('handle_httpstatus_list', []) or request.meta.get('handle_httpstatus_all', False):
        return response
    allowed_status = (301, 302, 303, 307, 308)
    if 'Location' not in response.headers or response.status not in allowed_status:
        return response
    location = safe_url_string(response.headers['Location'])
    if response.headers['Location'].startswith(b'//'):
        request_scheme = urlparse(request.url).scheme
        location = request_scheme + '://' + location.lstrip('/')
    redirected_url = urljoin(request.url, location)
    if response.status in (301, 307, 308) or request.method == 'HEAD':
        redirected = _build_redirect_request(request, url=redirected_url)
        return self._redirect(redirected, request, spider, response.status)
    redirected = self._redirect_request_using_get(request, redirected_url)
    return self._redirect(redirected, request, spider, response.status)

----------

def test_ignore_tags_1_x_list(self):
    """Test that Scrapy 1.x behavior remains possible"""
    settings = {'METAREFRESH_IGNORE_TAGS': ['script', 'noscript']}
    crawler = get_crawler(Spider, settings)
    mw = MetaRefreshMiddleware.from_crawler(crawler)
    req = Request(url='http://example.org')
    body = '<noscript><meta http-equiv="refresh" content="0;URL=\'http://example.org/newpage\'"></noscript>'
    rsp = HtmlResponse(req.url, body=body.encode())
    response = mw.process_response(req, rsp, self.spider)
    assert isinstance(response, Response)

----------



Test Class Name: MetaRefreshMiddlewareTest