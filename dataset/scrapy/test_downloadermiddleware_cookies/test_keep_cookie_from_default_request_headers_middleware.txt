def process_request(self, request, spider):
    if request.meta.get('dont_merge_cookies', False):
        return
    cookiejarkey = request.meta.get('cookiejar')
    jar = self.jars[cookiejarkey]
    cookies = self._get_request_cookies(jar, request)
    self._process_cookies(cookies, jar=jar, request=request)
    request.headers.pop('Cookie', None)
    jar.add_cookie_header(request)
    self._debug_cookie(request, spider)

----------

@pytest.mark.xfail(reason='Cookie header is not currently being processed')
def test_keep_cookie_from_default_request_headers_middleware(self):
    DEFAULT_REQUEST_HEADERS = dict(Cookie='default=value; asdf=qwerty')
    mw_default_headers = DefaultHeadersMiddleware(DEFAULT_REQUEST_HEADERS.items())
    req1 = Request('http://example.org', cookies={'default': 'something'})
    assert mw_default_headers.process_request(req1, self.spider) is None
    assert self.mw.process_request(req1, self.spider) is None
    self.assertCookieValEqual(req1.headers['Cookie'], b'default=something; asdf=qwerty')
    req2 = Request('http://example.com', cookies={'a': 'b'})
    assert mw_default_headers.process_request(req2, self.spider) is None
    assert self.mw.process_request(req2, self.spider) is None
    self.assertCookieValEqual(req2.headers['Cookie'], b'default=value; a=b; asdf=qwerty')

----------



Test Class Name: CookiesMiddlewareTest