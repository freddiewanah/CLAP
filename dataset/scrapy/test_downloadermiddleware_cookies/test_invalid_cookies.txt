def process_request(self, request, spider):
    if request.meta.get('dont_merge_cookies', False):
        return
    cookiejarkey = request.meta.get('cookiejar')
    jar = self.jars[cookiejarkey]
    cookies = self._get_request_cookies(jar, request)
    self._process_cookies(cookies, jar=jar, request=request)
    request.headers.pop('Cookie', None)
    jar.add_cookie_header(request)
    self._debug_cookie(request, spider)

----------

def test_invalid_cookies(self):
    """
        Invalid cookies are logged as warnings and discarded
        """
    with LogCapture('scrapy.downloadermiddlewares.cookies', propagate=False, level=logging.INFO) as lc:
        cookies1 = [{'value': 'bar'}, {'name': 'key', 'value': 'value1'}]
        req1 = Request('http://example.org/1', cookies=cookies1)
        assert self.mw.process_request(req1, self.spider) is None
        cookies2 = [{'name': 'foo'}, {'name': 'key', 'value': 'value2'}]
        req2 = Request('http://example.org/2', cookies=cookies2)
        assert self.mw.process_request(req2, self.spider) is None
        cookies3 = [{'name': 'foo', 'value': None}, {'name': 'key', 'value': ''}]
        req3 = Request('http://example.org/3', cookies=cookies3)
        assert self.mw.process_request(req3, self.spider) is None
        lc.check(('scrapy.downloadermiddlewares.cookies', 'WARNING', "Invalid cookie found in request <GET http://example.org/1>: {'value': 'bar'} ('name' is missing)"), ('scrapy.downloadermiddlewares.cookies', 'WARNING', "Invalid cookie found in request <GET http://example.org/2>: {'name': 'foo'} ('value' is missing)"), ('scrapy.downloadermiddlewares.cookies', 'WARNING', "Invalid cookie found in request <GET http://example.org/3>: {'name': 'foo', 'value': None} ('value' is missing)"))
    self.assertCookieValEqual(req1.headers['Cookie'], 'key=value1')
    self.assertCookieValEqual(req2.headers['Cookie'], 'key=value2')
    self.assertCookieValEqual(req3.headers['Cookie'], 'key=')

----------



Test Class Name: CookiesMiddlewareTest