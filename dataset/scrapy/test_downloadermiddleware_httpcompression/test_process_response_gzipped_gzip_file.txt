def process_response(self, request, response, spider):
    if request.method == 'HEAD':
        return response
    if isinstance(response, Response):
        content_encoding = response.headers.getlist('Content-Encoding')
        if content_encoding:
            encoding = content_encoding.pop()
            decoded_body = self._decode(response.body, encoding.lower())
            if self.stats:
                self.stats.inc_value('httpcompression/response_bytes', len(decoded_body), spider=spider)
                self.stats.inc_value('httpcompression/response_count', spider=spider)
            respcls = responsetypes.from_args(headers=response.headers, url=response.url, body=decoded_body)
            kwargs = dict(cls=respcls, body=decoded_body)
            if issubclass(respcls, TextResponse):
                kwargs['encoding'] = None
            response = response.replace(**kwargs)
            if not content_encoding:
                del response.headers['Content-Encoding']
    return response

----------

def test_process_response_gzipped_gzip_file(self):
    """Test that a gzip Content-Encoded .gz file is gunzipped
        only once by the middleware, leaving gunzipping of the file
        to upper layers.
        """
    headers = {'Content-Type': 'application/gzip', 'Content-Encoding': 'gzip'}
    f = BytesIO()
    plainbody = b'<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.google.com/schemas/sitemap/0.84">\n  <url>\n    <loc>http://www.example.com/</loc>\n    <lastmod>2009-08-16</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>http://www.example.com/Special-Offers.html</loc>\n    <lastmod>2009-08-16</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.8</priority>\n  </url>\n</urlset>'
    gz_file = GzipFile(fileobj=f, mode='wb')
    gz_file.write(plainbody)
    gz_file.close()
    r = BytesIO()
    gz_resp = GzipFile(fileobj=r, mode='wb')
    gz_resp.write(f.getvalue())
    gz_resp.close()
    response = Response('http;//www.example.com/', headers=headers, body=r.getvalue())
    request = Request('http://www.example.com/')
    newresponse = self.mw.process_response(request, response, self.spider)
    self.assertEqual(gunzip(newresponse.body), plainbody)
    self.assertStatsEqual('httpcompression/response_count', 1)
    self.assertStatsEqual('httpcompression/response_bytes', 230)

----------



Test Class Name: HttpCompressionTest