def process_response(self, request, response, spider):
    if request.method == 'HEAD':
        return response
    if isinstance(response, Response):
        content_encoding = response.headers.getlist('Content-Encoding')
        if content_encoding:
            encoding = content_encoding.pop()
            decoded_body = self._decode(response.body, encoding.lower())
            if self.stats:
                self.stats.inc_value('httpcompression/response_bytes', len(decoded_body), spider=spider)
                self.stats.inc_value('httpcompression/response_count', spider=spider)
            respcls = responsetypes.from_args(headers=response.headers, url=response.url, body=decoded_body)
            kwargs = dict(cls=respcls, body=decoded_body)
            if issubclass(respcls, TextResponse):
                kwargs['encoding'] = None
            response = response.replace(**kwargs)
            if not content_encoding:
                del response.headers['Content-Encoding']
    return response

----------

def test_process_response_plain(self):
    response = Response('http://scrapytest.org', body=b'<!DOCTYPE...')
    request = Request('http://scrapytest.org')
    assert not response.headers.get('Content-Encoding')
    newresponse = self.mw.process_response(request, response, self.spider)
    assert newresponse is response
    assert newresponse.body.startswith(b'<!DOCTYPE')
    self.assertStatsEqual('httpcompression/response_count', None)
    self.assertStatsEqual('httpcompression/response_bytes', None)

----------



Test Class Name: HttpCompressionTest