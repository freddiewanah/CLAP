def process_response(self, request, response, spider):
    if request.method == 'HEAD':
        return response
    if isinstance(response, Response):
        content_encoding = response.headers.getlist('Content-Encoding')
        if content_encoding:
            encoding = content_encoding.pop()
            decoded_body = self._decode(response.body, encoding.lower())
            if self.stats:
                self.stats.inc_value('httpcompression/response_bytes', len(decoded_body), spider=spider)
                self.stats.inc_value('httpcompression/response_count', spider=spider)
            respcls = responsetypes.from_args(headers=response.headers, url=response.url, body=decoded_body)
            kwargs = dict(cls=respcls, body=decoded_body)
            if issubclass(respcls, TextResponse):
                kwargs['encoding'] = None
            response = response.replace(**kwargs)
            if not content_encoding:
                del response.headers['Content-Encoding']
    return response

----------

def test_process_response_zstd(self):
    try:
        import zstandard
    except ImportError:
        raise SkipTest('no zstd support (zstandard)')
    raw_content = None
    for check_key in FORMAT:
        if not check_key.startswith('zstd-'):
            continue
        response = self._getresponse(check_key)
        request = response.request
        self.assertEqual(response.headers['Content-Encoding'], b'zstd')
        newresponse = self.mw.process_response(request, response, self.spider)
        if raw_content is None:
            raw_content = newresponse.body
        else:
            assert raw_content == newresponse.body
        assert newresponse is not response
        assert newresponse.body.startswith(b'<!DOCTYPE')
        assert 'Content-Encoding' not in newresponse.headers

----------

def _getresponse(self, coding):
    if coding not in FORMAT:
        raise ValueError()
    (samplefile, contentencoding) = FORMAT[coding]
    body = (SAMPLEDIR / samplefile).read_bytes()
    headers = {'Server': 'Yaws/1.49 Yet Another Web Server', 'Date': 'Sun, 08 Mar 2009 00:41:03 GMT', 'Content-Length': len(body), 'Content-Type': 'text/html', 'Content-Encoding': contentencoding}
    response = Response('http://scrapytest.org/', body=body, headers=headers)
    response.request = Request('http://scrapytest.org', headers={'Accept-Encoding': 'gzip, deflate'})
    return response

Test Class Name: HttpCompressionTest