def process_response(self, request, response, spider):
    if not isinstance(response, HtmlResponse) or response.status != 200:
        return response
    if request.method != 'GET':
        return response
    if 'ajax_crawlable' in request.meta:
        return response
    if not self._has_ajax_crawlable_variant(response):
        return response
    ajax_crawl_request = request.replace(url=request.url + '#!')
    logger.debug('Downloading AJAX crawlable %(ajax_crawl_request)s instead of %(request)s', {'ajax_crawl_request': ajax_crawl_request, 'request': request}, extra={'spider': spider})
    ajax_crawl_request.meta['ajax_crawlable'] = True
    return ajax_crawl_request

----------

def test_noncrawlable_body(self):
    (req, resp) = self._req_resp('http://example.com/', {}, {'body': b'<html></html>'})
    resp2 = self.mw.process_response(req, resp, self.spider)
    self.assertIs(resp, resp2)

----------

def _req_resp(self, url, req_kwargs=None, resp_kwargs=None):
    req = Request(url, **req_kwargs or {})
    resp = HtmlResponse(url, request=req, **resp_kwargs or {})
    return (req, resp)

Test Class Name: AjaxCrawlMiddlewareTest