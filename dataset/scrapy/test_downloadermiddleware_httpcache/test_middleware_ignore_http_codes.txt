def process_request(self, request: Request, spider: Spider) -> Optional[Response]:
    if request.meta.get('dont_cache', False):
        return None
    if not self.policy.should_cache_request(request):
        request.meta['_dont_cache'] = True
        return None
    cachedresponse = self.storage.retrieve_response(spider, request)
    if cachedresponse is None:
        self.stats.inc_value('httpcache/miss', spider=spider)
        if self.ignore_missing:
            self.stats.inc_value('httpcache/ignore', spider=spider)
            raise IgnoreRequest(f'Ignored request not in cache: {request}')
        return None
    cachedresponse.flags.append('cached')
    if self.policy.is_cached_response_fresh(cachedresponse, request):
        self.stats.inc_value('httpcache/hit', spider=spider)
        return cachedresponse
    request.meta['cached_response'] = cachedresponse
    return None

----------

def test_middleware_ignore_http_codes(self):
    with self._middleware(HTTPCACHE_IGNORE_HTTP_CODES=[202]) as mw:
        assert mw.process_request(self.request, self.spider) is None
        mw.process_response(self.request, self.response, self.spider)
        assert mw.storage.retrieve_response(self.spider, self.request) is None
        assert mw.process_request(self.request, self.spider) is None
    with self._middleware(HTTPCACHE_IGNORE_HTTP_CODES=[203]) as mw:
        mw.process_response(self.request, self.response, self.spider)
        response = mw.process_request(self.request, self.spider)
        assert isinstance(response, HtmlResponse)
        self.assertEqualResponse(self.response, response)
        assert 'cached' in response.flags

----------



Test Class Name: DummyPolicyTest