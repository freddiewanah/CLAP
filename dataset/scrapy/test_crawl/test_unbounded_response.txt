@defer.inlineCallbacks
def crawl(self, *args, **kwargs):
    if self.crawling:
        raise RuntimeError('Crawling already taking place')
    self.crawling = True
    try:
        self.spider = self._create_spider(*args, **kwargs)
        self.engine = self._create_engine()
        start_requests = iter(self.spider.start_requests())
        yield self.engine.open_spider(self.spider, start_requests)
        yield defer.maybeDeferred(self.engine.start)
    except Exception:
        self.crawling = False
        if self.engine is not None:
            yield self.engine.close()
        raise

----------

@defer.inlineCallbacks
def test_unbounded_response(self):
    from urllib.parse import urlencode
    query = urlencode({'raw': 'HTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nX-Powered-By: Servlet 2.4; JBoss-4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200807181417)/JBossWeb-2.0\nSet-Cookie: JSESSIONID=08515F572832D0E659FD2B0D8031D75F; Path=/\nPragma: no-cache\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\nCache-Control: no-cache\nCache-Control: no-store\nContent-Type: text/html;charset=UTF-8\nContent-Language: en\nDate: Tue, 27 Aug 2013 13:05:05 GMT\nConnection: close\n\nfoo body\nwith multiples lines\n'})
    crawler = get_crawler(SimpleSpider)
    with LogCapture() as log:
        yield crawler.crawl(self.mockserver.url(f'/raw?{query}'), mockserver=self.mockserver)
    self.assertEqual(str(log).count('Got response 200'), 1)

----------



Test Class Name: CrawlTestCase