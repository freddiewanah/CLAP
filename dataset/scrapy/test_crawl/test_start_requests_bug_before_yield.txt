@defer.inlineCallbacks
def crawl(self, *args, **kwargs):
    if self.crawling:
        raise RuntimeError('Crawling already taking place')
    self.crawling = True
    try:
        self.spider = self._create_spider(*args, **kwargs)
        self.engine = self._create_engine()
        start_requests = iter(self.spider.start_requests())
        yield self.engine.open_spider(self.spider, start_requests)
        yield defer.maybeDeferred(self.engine.start)
    except Exception:
        self.crawling = False
        if self.engine is not None:
            yield self.engine.close()
        raise

----------

@defer.inlineCallbacks
def test_start_requests_bug_before_yield(self):
    with LogCapture('scrapy', level=logging.ERROR) as log:
        crawler = get_crawler(BrokenStartRequestsSpider)
        yield crawler.crawl(fail_before_yield=1, mockserver=self.mockserver)
    self.assertEqual(len(log.records), 1)
    record = log.records[0]
    self.assertIsNotNone(record.exc_info)
    self.assertIs(record.exc_info[0], ZeroDivisionError)

----------



Test Class Name: CrawlTestCase