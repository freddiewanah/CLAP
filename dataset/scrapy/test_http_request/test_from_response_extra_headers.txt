@classmethod
def from_response(cls: Type[FormRequestTypeVar], response: TextResponse, formname: Optional[str]=None, formid: Optional[str]=None, formnumber: Optional[int]=0, formdata: FormdataType=None, clickdata: Optional[dict]=None, dont_click: bool=False, formxpath: Optional[str]=None, formcss: Optional[str]=None, **kwargs) -> FormRequestTypeVar:
    kwargs.setdefault('encoding', response.encoding)
    if formcss is not None:
        from parsel.csstranslator import HTMLTranslator
        formxpath = HTMLTranslator().css_to_xpath(formcss)
    form = _get_form(response, formname, formid, formnumber, formxpath)
    formdata = _get_inputs(form, formdata, dont_click, clickdata)
    url = _get_form_url(form, kwargs.pop('url', None))
    method = kwargs.pop('method', form.method)
    if method is not None:
        method = method.upper()
        if method not in cls.valid_form_methods:
            method = 'GET'
    return cls(url=url, method=method, formdata=formdata, **kwargs)

----------

def test_from_response_extra_headers(self):
    response = _buildresponse('<form action="post.php" method="POST">\n            <input type="hidden" name="test" value="val1">\n            <input type="hidden" name="test" value="val2">\n            <input type="hidden" name="test2" value="xxx">\n            </form>')
    req = self.request_class.from_response(response=response, formdata={'one': ['two', 'three'], 'six': 'seven'}, headers={'Accept-Encoding': 'gzip,deflate'})
    self.assertEqual(req.method, 'POST')
    self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')
    self.assertEqual(req.headers['Accept-Encoding'], b'gzip,deflate')

----------



Test Class Name: FormRequestTest