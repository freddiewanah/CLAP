@classmethod
def from_response(cls: Type[FormRequestTypeVar], response: TextResponse, formname: Optional[str]=None, formid: Optional[str]=None, formnumber: Optional[int]=0, formdata: FormdataType=None, clickdata: Optional[dict]=None, dont_click: bool=False, formxpath: Optional[str]=None, formcss: Optional[str]=None, **kwargs) -> FormRequestTypeVar:
    kwargs.setdefault('encoding', response.encoding)
    if formcss is not None:
        from parsel.csstranslator import HTMLTranslator
        formxpath = HTMLTranslator().css_to_xpath(formcss)
    form = _get_form(response, formname, formid, formnumber, formxpath)
    formdata = _get_inputs(form, formdata, dont_click, clickdata)
    url = _get_form_url(form, kwargs.pop('url', None))
    method = kwargs.pop('method', form.method)
    if method is not None:
        method = method.upper()
        if method not in cls.valid_form_methods:
            method = 'GET'
    return cls(url=url, method=method, formdata=formdata, **kwargs)

----------

def test_from_response_unicode_xpath(self):
    response = _buildresponse(b'<form name="\xd1\x8a"></form>')
    r = self.request_class.from_response(response, formxpath="//form[@name='ъ']")
    fs = _qs(r)
    self.assertEqual(fs, {})
    xpath = "//form[@name='α']"
    self.assertRaisesRegex(ValueError, re.escape(xpath), self.request_class.from_response, response, formxpath=xpath)

----------



Test Class Name: FormRequestTest