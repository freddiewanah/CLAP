@classmethod
def from_response(cls: Type[FormRequestTypeVar], response: TextResponse, formname: Optional[str]=None, formid: Optional[str]=None, formnumber: Optional[int]=0, formdata: FormdataType=None, clickdata: Optional[dict]=None, dont_click: bool=False, formxpath: Optional[str]=None, formcss: Optional[str]=None, **kwargs) -> FormRequestTypeVar:
    kwargs.setdefault('encoding', response.encoding)
    if formcss is not None:
        from parsel.csstranslator import HTMLTranslator
        formxpath = HTMLTranslator().css_to_xpath(formcss)
    form = _get_form(response, formname, formid, formnumber, formxpath)
    formdata = _get_inputs(form, formdata, dont_click, clickdata)
    url = _get_form_url(form, kwargs.pop('url', None))
    method = kwargs.pop('method', form.method)
    if method is not None:
        method = method.upper()
        if method not in cls.valid_form_methods:
            method = 'GET'
    return cls(url=url, method=method, formdata=formdata, **kwargs)

----------

def test_from_response_valid_form_methods(self):
    form_methods = [[method, method] for method in self.request_class.valid_form_methods]
    form_methods.append(['UNKNOWN', 'GET'])
    for (method, expected) in form_methods:
        response = _buildresponse(f'<form action="post.php" method="{method}"><input type="hidden" name="one" value="1"></form>')
        r = self.request_class.from_response(response)
        self.assertEqual(r.method, expected)

----------



Test Class Name: FormRequestTest