def send_catch_log(signal=Any, sender=Anonymous, *arguments, **named):
    """Like pydispatcher.robust.sendRobust but it also logs errors and returns
    Failures instead of exceptions.
    """
    dont_log = named.pop('dont_log', ())
    dont_log = tuple(dont_log) if isinstance(dont_log, collections.abc.Sequence) else (dont_log,)
    dont_log += (StopDownload,)
    spider = named.get('spider', None)
    responses = []
    for receiver in liveReceivers(getAllReceivers(sender, signal)):
        try:
            response = robustApply(receiver, *arguments, signal=signal, sender=sender, **named)
            if isinstance(response, Deferred):
                logger.error('Cannot return deferreds from signal handler: %(receiver)s', {'receiver': receiver}, extra={'spider': spider})
        except dont_log:
            result = Failure()
        except Exception:
            result = Failure()
            logger.error('Error caught on signal handler: %(receiver)s', {'receiver': receiver}, exc_info=True, extra={'spider': spider})
        else:
            result = response
        responses.append((receiver, result))
    return responses

----------

def test_closed_signal_call(self):

    class TestSpider(self.spider_class):
        closed_called = False

        def closed(self, reason):
            self.closed_called = True
    crawler = get_crawler()
    spider = TestSpider.from_crawler(crawler, 'example.com')
    crawler.signals.send_catch_log(signal=signals.spider_opened, spider=spider)
    crawler.signals.send_catch_log(signal=signals.spider_closed, spider=spider, reason=None)
    self.assertTrue(spider.closed_called)

----------



Test Class Name: SpiderTest