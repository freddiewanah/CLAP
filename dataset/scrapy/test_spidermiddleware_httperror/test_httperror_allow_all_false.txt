def process_spider_input(self, response, spider):
    if 200 <= response.status < 300:
        return
    meta = response.meta
    if meta.get('handle_httpstatus_all', False):
        return
    if 'handle_httpstatus_list' in meta:
        allowed_statuses = meta['handle_httpstatus_list']
    elif self.handle_httpstatus_all:
        return
    else:
        allowed_statuses = getattr(spider, 'handle_httpstatus_list', self.handle_httpstatus_list)
    if response.status in allowed_statuses:
        return
    raise HttpError(response, 'Ignoring non-200 response')

----------

def test_httperror_allow_all_false(self):
    crawler = get_crawler(_HttpErrorSpider)
    mw = HttpErrorMiddleware.from_crawler(crawler)
    request_httpstatus_false = Request('http://scrapytest.org', meta={'handle_httpstatus_all': False})
    request_httpstatus_true = Request('http://scrapytest.org', meta={'handle_httpstatus_all': True})
    res404 = self.res404.copy()
    res404.request = request_httpstatus_false
    res402 = self.res402.copy()
    res402.request = request_httpstatus_true
    self.assertRaises(HttpError, mw.process_spider_input, res404, self.spider)
    self.assertIsNone(mw.process_spider_input(res402, self.spider))

----------



Test Class Name: TestHttpErrorMiddlewareHandleAll