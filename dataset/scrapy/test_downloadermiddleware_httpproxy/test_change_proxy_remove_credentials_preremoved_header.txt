def process_request(self, request, spider):
    (creds, proxy_url) = (None, None)
    if 'proxy' in request.meta:
        if request.meta['proxy'] is not None:
            (creds, proxy_url) = self._get_proxy(request.meta['proxy'], '')
    elif self.proxies:
        parsed = urlparse_cached(request)
        scheme = parsed.scheme
        if (scheme not in ('http', 'https') or not proxy_bypass(parsed.hostname)) and scheme in self.proxies:
            (creds, proxy_url) = self.proxies[scheme]
    self._set_proxy_and_creds(request, proxy_url, creds)

----------

def test_change_proxy_remove_credentials_preremoved_header(self):
    """Corner case of proxy switch with credentials removal where the
        credentials have been removed beforehand.

        It ensures that our implementation does not assume that the credentials
        header exists when trying to remove it.
        """
    middleware = HttpProxyMiddleware()
    request = Request('https://example.com', meta={'proxy': 'https://user1:password1@example.com'})
    assert middleware.process_request(request, spider) is None
    request.meta['proxy'] = 'https://example.org'
    del request.headers[b'Proxy-Authorization']
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta, {'proxy': 'https://example.org'})
    self.assertNotIn(b'Proxy-Authorization', request.headers)

----------



Test Class Name: TestHttpProxyMiddleware