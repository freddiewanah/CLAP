def process_request(self, request, spider):
    (creds, proxy_url) = (None, None)
    if 'proxy' in request.meta:
        if request.meta['proxy'] is not None:
            (creds, proxy_url) = self._get_proxy(request.meta['proxy'], '')
    elif self.proxies:
        parsed = urlparse_cached(request)
        scheme = parsed.scheme
        if (scheme not in ('http', 'https') or not proxy_bypass(parsed.hostname)) and scheme in self.proxies:
            (creds, proxy_url) = self.proxies[scheme]
    self._set_proxy_and_creds(request, proxy_url, creds)

----------

def test_proxy_auth(self):
    os.environ['http_proxy'] = 'https://user:pass@proxy:3128'
    mw = HttpProxyMiddleware()
    req = Request('http://scrapytest.org')
    assert mw.process_request(req, spider) is None
    self.assertEqual(req.meta['proxy'], 'https://proxy:3128')
    self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic dXNlcjpwYXNz')
    req = Request('http://scrapytest.org', meta={'proxy': 'https://username:password@proxy:3128'})
    assert mw.process_request(req, spider) is None
    self.assertEqual(req.meta['proxy'], 'https://proxy:3128')
    self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic dXNlcm5hbWU6cGFzc3dvcmQ=')

----------



Test Class Name: TestHttpProxyMiddleware