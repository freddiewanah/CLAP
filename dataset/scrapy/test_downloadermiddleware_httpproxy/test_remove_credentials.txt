def process_request(self, request, spider):
    (creds, proxy_url) = (None, None)
    if 'proxy' in request.meta:
        if request.meta['proxy'] is not None:
            (creds, proxy_url) = self._get_proxy(request.meta['proxy'], '')
    elif self.proxies:
        parsed = urlparse_cached(request)
        scheme = parsed.scheme
        if (scheme not in ('http', 'https') or not proxy_bypass(parsed.hostname)) and scheme in self.proxies:
            (creds, proxy_url) = self.proxies[scheme]
    self._set_proxy_and_creds(request, proxy_url, creds)

----------

def test_remove_credentials(self):
    """If the proxy request meta switches to a proxy URL with the same
        proxy but no credentials, the original credentials must be still
        used.

        To remove credentials while keeping the same proxy URL, users must
        delete the Proxy-Authorization header.
        """
    middleware = HttpProxyMiddleware()
    request = Request('https://example.com', meta={'proxy': 'https://user1:password1@example.com'})
    assert middleware.process_request(request, spider) is None
    request.meta['proxy'] = 'https://example.com'
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta['proxy'], 'https://example.com')
    encoded_credentials = middleware._basic_auth_header('user1', 'password1')
    self.assertEqual(request.headers['Proxy-Authorization'], b'Basic ' + encoded_credentials)
    request.meta['proxy'] = 'https://example.com'
    del request.headers[b'Proxy-Authorization']
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta['proxy'], 'https://example.com')
    self.assertNotIn(b'Proxy-Authorization', request.headers)

----------



Test Class Name: TestHttpProxyMiddleware