def process_request(self, request, spider):
    (creds, proxy_url) = (None, None)
    if 'proxy' in request.meta:
        if request.meta['proxy'] is not None:
            (creds, proxy_url) = self._get_proxy(request.meta['proxy'], '')
    elif self.proxies:
        parsed = urlparse_cached(request)
        scheme = parsed.scheme
        if (scheme not in ('http', 'https') or not proxy_bypass(parsed.hostname)) and scheme in self.proxies:
            (creds, proxy_url) = self.proxies[scheme]
    self._set_proxy_and_creds(request, proxy_url, creds)

----------

def test_proxy_authentication_header_proxy_without_credentials(self):
    """As long as the proxy URL in request metadata remains the same, the
        Proxy-Authorization header is used and kept, and may even be
        changed."""
    middleware = HttpProxyMiddleware()
    request = Request('https://example.com', headers={'Proxy-Authorization': 'Basic foo'}, meta={'proxy': 'https://example.com'})
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta['proxy'], 'https://example.com')
    self.assertEqual(request.headers['Proxy-Authorization'], b'Basic foo')
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta['proxy'], 'https://example.com')
    self.assertEqual(request.headers['Proxy-Authorization'], b'Basic foo')
    request.headers['Proxy-Authorization'] = b'Basic bar'
    assert middleware.process_request(request, spider) is None
    self.assertEqual(request.meta['proxy'], 'https://example.com')
    self.assertEqual(request.headers['Proxy-Authorization'], b'Basic bar')

----------



Test Class Name: TestHttpProxyMiddleware