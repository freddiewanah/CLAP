def extract_links(self, response):
    """Returns a list of :class:`~scrapy.link.Link` objects from the
        specified :class:`response <scrapy.http.Response>`.

        Only links that match the settings passed to the ``__init__`` method of
        the link extractor are returned.

        Duplicate links are omitted if the ``unique`` attribute is set to ``True``,
        otherwise they are returned.
        """
    base_url = get_base_url(response)
    if self.restrict_xpaths:
        docs = [subdoc for x in self.restrict_xpaths for subdoc in response.xpath(x)]
    else:
        docs = [response.selector]
    all_links = []
    for doc in docs:
        links = self._extract_links(doc, response.url, response.encoding, base_url)
        all_links.extend(self._process_links(links))
    if self.link_extractor.unique:
        return unique_list(all_links)
    return all_links

----------

def test_restrict_xpaths_encoding(self):
    """Test restrict_xpaths with encodings"""
    html = b'<html><head><title>Page title<title>\n            <body><p><a href="item/12.html">Item 12</a></p>\n            <div class=\'links\'>\n            <p><a href="/about.html">About us\xa3</a></p>\n            </div>\n            <div>\n            <p><a href="/nofollow.html">This shouldn\'t be followed</a></p>\n            </div>\n            </body></html>'
    response = HtmlResponse('http://example.org/somepage/index.html', body=html, encoding='windows-1252')
    lx = self.extractor_cls(restrict_xpaths="//div[@class='links']")
    self.assertEqual(lx.extract_links(response), [Link(url='http://example.org/about.html', text='About usÂ£')])

----------



Test Class Name: LinkExtractorTestCase