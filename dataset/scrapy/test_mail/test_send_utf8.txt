def send(self, to, subject, body, cc=None, attachs=(), mimetype='text/plain', charset=None, _callback=None):
    from twisted.internet import reactor
    if attachs:
        msg = MIMEMultipart()
    else:
        msg = MIMENonMultipart(*mimetype.split('/', 1))
    to = list(arg_to_iter(to))
    cc = list(arg_to_iter(cc))
    msg['From'] = self.mailfrom
    msg['To'] = COMMASPACE.join(to)
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject
    rcpts = to[:]
    if cc:
        rcpts.extend(cc)
        msg['Cc'] = COMMASPACE.join(cc)
    if charset:
        msg.set_charset(charset)
    if attachs:
        msg.attach(MIMEText(body, 'plain', charset or 'us-ascii'))
        for (attach_name, mimetype, f) in attachs:
            part = MIMEBase(*mimetype.split('/'))
            part.set_payload(f.read())
            Encoders.encode_base64(part)
            part.add_header('Content-Disposition', 'attachment', filename=attach_name)
            msg.attach(part)
    else:
        msg.set_payload(body)
    if _callback:
        _callback(to=to, subject=subject, body=body, cc=cc, attach=attachs, msg=msg)
    if self.debug:
        logger.debug('Debug mail sent OK: To=%(mailto)s Cc=%(mailcc)s Subject="%(mailsubject)s" Attachs=%(mailattachs)d', {'mailto': to, 'mailcc': cc, 'mailsubject': subject, 'mailattachs': len(attachs)})
        return
    dfd = self._sendmail(rcpts, msg.as_string().encode(charset or 'utf-8'))
    dfd.addCallbacks(callback=self._sent_ok, errback=self._sent_failed, callbackArgs=[to, cc, subject, len(attachs)], errbackArgs=[to, cc, subject, len(attachs)])
    reactor.addSystemEventTrigger('before', 'shutdown', lambda : dfd)
    return dfd

----------

def test_send_utf8(self):
    subject = 'sübjèçt'
    body = 'bödÿ-àéïöñß'
    mailsender = MailSender(debug=True)
    mailsender.send(to=['test@scrapy.org'], subject=subject, body=body, charset='utf-8', _callback=self._catch_mail_sent)
    assert self.catched_msg
    self.assertEqual(self.catched_msg['subject'], subject)
    self.assertEqual(self.catched_msg['body'], body)
    msg = self.catched_msg['msg']
    self.assertEqual(msg['subject'], subject)
    self.assertEqual(msg.get_payload(), body)
    self.assertEqual(msg.get_charset(), Charset('utf-8'))
    self.assertEqual(msg.get('Content-Type'), 'text/plain; charset="utf-8"')

----------

def _catch_mail_sent(self, **kwargs):
    self.catched_msg = dict(**kwargs)

Test Class Name: MailSenderTest