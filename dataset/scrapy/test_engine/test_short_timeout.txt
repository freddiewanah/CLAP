@inlineCallbacks
def start(self) -> Deferred:
    if self.running:
        raise RuntimeError('Engine already running')
    self.start_time = time()
    yield self.signals.send_catch_log_deferred(signal=signals.engine_started)
    self.running = True
    self._closewait = Deferred()
    yield self._closewait

----------

def test_short_timeout(self):
    args = (sys.executable, '-m', 'scrapy.cmdline', 'fetch', '-s', 'CLOSESPIDER_TIMEOUT=0.001', '-s', 'LOG_LEVEL=DEBUG', 'http://toscrape.com')
    p = subprocess.Popen(args, stderr=subprocess.PIPE)

    def kill_proc():
        p.kill()
        p.communicate()
        assert False, 'Command took too much time to complete'
    timer = Timer(15, kill_proc)
    try:
        timer.start()
        (_, stderr) = p.communicate()
    finally:
        timer.cancel()
    self.assertNotIn(b'Traceback', stderr)

----------



Test Class Name: EngineTest