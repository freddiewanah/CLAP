def process_response(self, request, response, spider):
    if request.meta.get('dont_retry', False):
        return response
    if response.status in self.retry_http_codes:
        reason = response_status_message(response.status)
        return self._retry(request, reason, spider) or response
    return response

----------

def test_503(self):
    req = Request('http://www.scrapytest.org/503')
    rsp = Response('http://www.scrapytest.org/503', body=b'', status=503)
    req = self.mw.process_response(req, rsp, self.spider)
    assert isinstance(req, Request)
    self.assertEqual(req.meta['retry_times'], 1)
    req = self.mw.process_response(req, rsp, self.spider)
    assert isinstance(req, Request)
    self.assertEqual(req.meta['retry_times'], 2)
    assert self.mw.process_response(req, rsp, self.spider) is rsp
    assert self.crawler.stats.get_value('retry/max_reached') == 1
    assert self.crawler.stats.get_value('retry/reason_count/503 Service Unavailable') == 2
    assert self.crawler.stats.get_value('retry/count') == 2

----------



Test Class Name: RetryTest