def follow(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding=None, priority=0, dont_filter=False, errback=None, cb_kwargs=None, flags=None) -> Request:
    """
        Return a :class:`~.Request` instance to follow a link ``url``.
        It accepts the same arguments as ``Request.__init__`` method,
        but ``url`` can be not only an absolute URL, but also

        * a relative URL
        * a :class:`~scrapy.link.Link` object, e.g. the result of
          :ref:`topics-link-extractors`
        * a :class:`~scrapy.selector.Selector` object for a ``<link>`` or ``<a>`` element, e.g.
          ``response.css('a.my_link')[0]``
        * an attribute :class:`~scrapy.selector.Selector` (not SelectorList), e.g.
          ``response.css('a::attr(href)')[0]`` or
          ``response.xpath('//img/@src')[0]``

        See :ref:`response-follow-example` for usage examples.
        """
    if isinstance(url, parsel.Selector):
        url = _url_from_selector(url)
    elif isinstance(url, parsel.SelectorList):
        raise ValueError('SelectorList is not supported')
    encoding = self.encoding if encoding is None else encoding
    return super().follow(url=url, callback=callback, method=method, headers=headers, body=body, cookies=cookies, meta=meta, encoding=encoding, priority=priority, dont_filter=dont_filter, errback=errback, cb_kwargs=cb_kwargs, flags=flags)

----------

def test_follow_flags(self):
    res = self.response_class('http://example.com/')
    fol = res.follow('http://example.com/', flags=['cached', 'allowed'])
    self.assertEqual(fol.flags, ['cached', 'allowed'])

----------



Test Class Name: TextResponseTest