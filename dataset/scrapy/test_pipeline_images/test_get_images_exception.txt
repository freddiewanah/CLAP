def get_images(self, response, request, info, *, item=None):
    path = self.file_path(request, response=response, info=info, item=item)
    orig_image = self._Image.open(BytesIO(response.body))
    (width, height) = orig_image.size
    if width < self.min_width or height < self.min_height:
        raise ImageException(f'Image too small ({width}x{height} < {self.min_width}x{self.min_height})')
    if self._deprecated_convert_image is None:
        self._deprecated_convert_image = 'response_body' not in get_func_args(self.convert_image)
        if self._deprecated_convert_image:
            warnings.warn(f'{self.__class__.__name__}.convert_image() method overridden in a deprecated way, overridden method does not accept response_body argument.', category=ScrapyDeprecationWarning)
    if self._deprecated_convert_image:
        (image, buf) = self.convert_image(orig_image)
    else:
        (image, buf) = self.convert_image(orig_image, response_body=BytesIO(response.body))
    yield (path, image, buf)
    for (thumb_id, size) in self.thumbs.items():
        thumb_path = self.thumb_path(request, thumb_id, response=response, info=info, item=item)
        if self._deprecated_convert_image:
            (thumb_image, thumb_buf) = self.convert_image(image, size)
        else:
            (thumb_image, thumb_buf) = self.convert_image(image, size, buf)
        yield (thumb_path, thumb_image, thumb_buf)

----------

def test_get_images_exception(self):
    self.pipeline.min_width = 100
    self.pipeline.min_height = 100
    (_, buf1) = _create_image('JPEG', 'RGB', (50, 50), (0, 0, 0))
    (_, buf2) = _create_image('JPEG', 'RGB', (150, 50), (0, 0, 0))
    (_, buf3) = _create_image('JPEG', 'RGB', (50, 150), (0, 0, 0))
    resp1 = Response(url='https://dev.mydeco.com/mydeco.gif', body=buf1.getvalue())
    resp2 = Response(url='https://dev.mydeco.com/mydeco.gif', body=buf2.getvalue())
    resp3 = Response(url='https://dev.mydeco.com/mydeco.gif', body=buf3.getvalue())
    req = Request(url='https://dev.mydeco.com/mydeco.gif')
    with self.assertRaises(ImageException):
        next(self.pipeline.get_images(response=resp1, request=req, info=object()))
    with self.assertRaises(ImageException):
        next(self.pipeline.get_images(response=resp2, request=req, info=object()))
    with self.assertRaises(ImageException):
        next(self.pipeline.get_images(response=resp3, request=req, info=object()))

----------



Test Class Name: CustomImagesPipeline