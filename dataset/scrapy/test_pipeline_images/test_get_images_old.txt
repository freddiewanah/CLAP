def get_images(self, response, request, info, *, item=None):
    path = self.file_path(request, response=response, info=info, item=item)
    orig_image = self._Image.open(BytesIO(response.body))
    (width, height) = orig_image.size
    if width < self.min_width or height < self.min_height:
        raise ImageException(f'Image too small ({width}x{height} < {self.min_width}x{self.min_height})')
    if self._deprecated_convert_image is None:
        self._deprecated_convert_image = 'response_body' not in get_func_args(self.convert_image)
        if self._deprecated_convert_image:
            warnings.warn(f'{self.__class__.__name__}.convert_image() method overridden in a deprecated way, overridden method does not accept response_body argument.', category=ScrapyDeprecationWarning)
    if self._deprecated_convert_image:
        (image, buf) = self.convert_image(orig_image)
    else:
        (image, buf) = self.convert_image(orig_image, response_body=BytesIO(response.body))
    yield (path, image, buf)
    for (thumb_id, size) in self.thumbs.items():
        thumb_path = self.thumb_path(request, thumb_id, response=response, info=info, item=item)
        if self._deprecated_convert_image:
            (thumb_image, thumb_buf) = self.convert_image(image, size)
        else:
            (thumb_image, thumb_buf) = self.convert_image(image, size, buf)
        yield (thumb_path, thumb_image, thumb_buf)

----------

def test_get_images_old(self):
    self.pipeline.thumbs = {'small': (20, 20)}
    (orig_im, buf) = _create_image('JPEG', 'RGB', (50, 50), (0, 0, 0))
    resp = Response(url='https://dev.mydeco.com/mydeco.gif', body=buf.getvalue())
    req = Request(url='https://dev.mydeco.com/mydeco.gif')

    def overridden_convert_image(image, size=None):
        (im, buf) = _create_image('JPEG', 'RGB', (50, 50), (0, 0, 0))
        return (im, buf)
    with patch.object(self.pipeline, 'convert_image', overridden_convert_image):
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            get_images_gen = self.pipeline.get_images(response=resp, request=req, info=object())
            (path, new_im, new_buf) = next(get_images_gen)
            self.assertEqual(path, 'full/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')
            self.assertEqual(orig_im.mode, new_im.mode)
            self.assertEqual(orig_im.getcolors(), new_im.getcolors())
            self.assertEqual(buf.getvalue(), new_buf.getvalue())
            (thumb_path, thumb_img, thumb_buf) = next(get_images_gen)
            self.assertEqual(thumb_path, 'thumbs/small/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')
            self.assertEqual(orig_im.mode, thumb_img.mode)
            self.assertEqual(orig_im.getcolors(), thumb_img.getcolors())
            self.assertEqual(buf.getvalue(), thumb_buf.getvalue())
            expected_warning_msg = '.convert_image() method overridden in a deprecated way, overridden method does not accept response_body argument.'
            self.assertEqual(len([warning for warning in w if expected_warning_msg in str(warning.message)]), 1)

----------



Test Class Name: CustomImagesPipeline