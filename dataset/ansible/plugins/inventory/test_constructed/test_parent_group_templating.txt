def get_host(self, hostname):
    """ fetch host object using name deal with implicit localhost """
    matching_host = self.hosts.get(hostname, None)
    if matching_host is None and hostname in C.LOCALHOST:
        matching_host = self._create_implicit_localhost(hostname)
    return matching_host

----------

def test_parent_group_templating(inventory_module):
    inventory_module.inventory.add_host('cow')
    inventory_module.inventory.set_variable('cow', 'sound', 'mmmmmmmmmm')
    inventory_module.inventory.set_variable('cow', 'nickname', 'betsy')
    host = inventory_module.inventory.get_host('cow')
    keyed_groups = [{'key': 'sound', 'prefix': 'sound', 'parent_group': '{{ nickname }}'}, {'key': 'nickname', 'prefix': '', 'separator': '', 'parent_group': 'nickname'}, {'key': 'nickname', 'separator': '', 'parent_group': '{{ location | default("field") }}'}]
    inventory_module._add_host_to_keyed_groups(keyed_groups, host.vars, host.name, strict=True)
    betsys_group = inventory_module.inventory.groups['betsy']
    assert [child.name for child in betsys_group.child_groups] == ['sound_mmmmmmmmmm']
    nicknames_group = inventory_module.inventory.groups['nickname']
    assert [child.name for child in nicknames_group.child_groups] == ['betsy']
    assert nicknames_group.child_groups[0] == betsys_group
    locations_group = inventory_module.inventory.groups['field']
    assert [child.name for child in locations_group.child_groups] == ['betsy']

----------



Test Class Name: default