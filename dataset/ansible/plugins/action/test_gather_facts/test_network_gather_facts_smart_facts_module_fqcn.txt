def run(self, tmp=None, task_vars=None):
    """ handler for fetch operations """
    if task_vars is None:
        task_vars = dict()
    result = super(ActionModule, self).run(tmp, task_vars)
    del tmp
    try:
        if self._play_context.check_mode:
            raise AnsibleActionSkip('check mode not (yet) supported for this module')
        source = self._task.args.get('src', None)
        original_dest = dest = self._task.args.get('dest', None)
        flat = boolean(self._task.args.get('flat'), strict=False)
        fail_on_missing = boolean(self._task.args.get('fail_on_missing', True), strict=False)
        validate_checksum = boolean(self._task.args.get('validate_checksum', True), strict=False)
        msg = ''
        if not isinstance(source, string_types):
            msg = 'Invalid type supplied for source option, it must be a string'
        if not isinstance(dest, string_types):
            msg = 'Invalid type supplied for dest option, it must be a string'
        if source is None or dest is None:
            msg = 'src and dest are required'
        if msg:
            raise AnsibleActionFail(msg)
        source = self._connection._shell.join_path(source)
        source = self._remote_expand_user(source)
        remote_stat = {}
        remote_checksum = None
        if not self._connection.become:
            try:
                remote_stat = self._execute_remote_stat(source, all_vars=task_vars, follow=True)
            except AnsibleError as ae:
                result['changed'] = False
                result['file'] = source
                if fail_on_missing:
                    result['failed'] = True
                    result['msg'] = to_text(ae)
                else:
                    result['msg'] = '%s, ignored' % to_text(ae, errors='surrogate_or_replace')
                return result
            remote_checksum = remote_stat.get('checksum')
            if remote_stat.get('exists'):
                if remote_stat.get('isdir'):
                    result['failed'] = True
                    result['changed'] = False
                    result['msg'] = 'remote file is a directory, fetch cannot work on directories'
                    if not fail_on_missing:
                        result['msg'] += ', not transferring, ignored'
                        del result['changed']
                        del result['failed']
                    return result
        remote_data = None
        if remote_checksum in (None, '1', ''):
            slurpres = self._execute_module(module_name='ansible.legacy.slurp', module_args=dict(src=source), task_vars=task_vars)
            if slurpres.get('failed'):
                if not fail_on_missing:
                    result['file'] = source
                    result['changed'] = False
                else:
                    result.update(slurpres)
                if 'not found' in slurpres.get('msg', ''):
                    result['msg'] = 'the remote file does not exist, not transferring, ignored'
                elif slurpres.get('msg', '').startswith('source is a directory'):
                    result['msg'] = 'remote file is a directory, fetch cannot work on directories'
                return result
            else:
                if slurpres['encoding'] == 'base64':
                    remote_data = base64.b64decode(slurpres['content'])
                if remote_data is not None:
                    remote_checksum = checksum_s(remote_data)
        if os.path.sep not in self._connection._shell.join_path('a', ''):
            source = self._connection._shell._unquote(source)
            source_local = source.replace('\\', '/')
        else:
            source_local = source
        if not is_subpath(dest, original_dest):
            raise AnsibleActionFail("Detected directory traversal, expected to be contained in '%s' but got '%s'" % (original_dest, dest))
        if flat:
            if os.path.isdir(to_bytes(dest, errors='surrogate_or_strict')) and (not dest.endswith(os.sep)):
                raise AnsibleActionFail('dest is an existing directory, use a trailing slash if you want to fetch src into that directory')
            if dest.endswith(os.sep):
                base = os.path.basename(source_local)
                dest = os.path.join(dest, base)
            if not dest.startswith('/'):
                dest = self._loader.path_dwim(dest)
        else:
            if 'inventory_hostname' in task_vars:
                target_name = task_vars['inventory_hostname']
            else:
                target_name = self._play_context.remote_addr
            dest = '%s/%s/%s' % (self._loader.path_dwim(dest), target_name, source_local)
        dest = os.path.normpath(dest)
        local_checksum = checksum(dest)
        if remote_checksum != local_checksum:
            makedirs_safe(os.path.dirname(dest))
            if remote_data is None:
                self._connection.fetch_file(source, dest)
            else:
                try:
                    f = open(to_bytes(dest, errors='surrogate_or_strict'), 'wb')
                    f.write(remote_data)
                    f.close()
                except (IOError, OSError) as e:
                    raise AnsibleActionFail('Failed to fetch the file: %s' % e)
            new_checksum = secure_hash(dest)
            try:
                new_md5 = md5(dest)
            except ValueError:
                new_md5 = None
            if validate_checksum and new_checksum != remote_checksum:
                result.update(dict(failed=True, md5sum=new_md5, msg='checksum mismatch', file=source, dest=dest, remote_md5sum=None, checksum=new_checksum, remote_checksum=remote_checksum))
            else:
                result.update({'changed': True, 'md5sum': new_md5, 'dest': dest, 'remote_md5sum': None, 'checksum': new_checksum, 'remote_checksum': remote_checksum})
        else:
            try:
                local_md5 = md5(dest)
            except ValueError:
                local_md5 = None
            result.update(dict(changed=False, md5sum=local_md5, file=source, dest=dest, checksum=local_checksum))
    finally:
        self._remove_tmp_path(self._connection._shell.tmpdir)
    return result

----------

@patch.object(module_common, '_get_collection_metadata', return_value={})
def test_network_gather_facts_smart_facts_module_fqcn(self, mock_collection_metadata):
    self.fqcn_task_vars = {'ansible_network_os': 'cisco.ios.ios'}
    self.task.action = 'gather_facts'
    self.task.async_val = False
    self.task.args = {}
    plugin = GatherFactsAction(self.task, self.connection, self.play_context, loader=None, templar=self.templar, shared_loader_obj=None)
    get_module_args = MagicMock()
    plugin._get_module_args = get_module_args
    plugin._execute_module = MagicMock()
    res = plugin.run(task_vars=self.fqcn_task_vars)
    facts_modules = C.config.get_config_value('FACTS_MODULES', variables=self.fqcn_task_vars)
    self.assertEqual(facts_modules, ['smart'])
    self.assertEqual(get_module_args.call_count, 1)
    self.assertEqual(get_module_args.call_args.args, ('cisco.ios.ios_facts', {'ansible_network_os': 'cisco.ios.ios'}))

----------



Test Class Name: TestNetworkFacts