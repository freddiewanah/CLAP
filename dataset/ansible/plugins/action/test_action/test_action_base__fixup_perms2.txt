def assertRaisesRegex(self, *args, **kwargs):
    return getattr(self, _assertRaisesRegex)(*args, **kwargs)

----------

def test_action_base__fixup_perms2(self):
    mock_task = MagicMock()
    mock_connection = MagicMock()
    play_context = PlayContext()
    action_base = DerivedActionBase(task=mock_task, connection=mock_connection, play_context=play_context, loader=None, templar=None, shared_loader_obj=None)
    action_base._low_level_execute_command = MagicMock()
    remote_paths = ['/tmp/foo/bar.txt', '/tmp/baz.txt']
    remote_user = 'remoteuser1'
    CHMOD_ACL_FLAGS = ('+a', 'A+user:remoteuser2:r:allow')

    def runWithNoExpectation(execute=False):
        return action_base._fixup_perms2(remote_paths, remote_user=remote_user, execute=execute)

    def assertSuccess(execute=False):
        self.assertEqual(runWithNoExpectation(execute), remote_paths)

    def assertThrowRegex(regex, execute=False):
        self.assertRaisesRegex(AnsibleError, regex, action_base._fixup_perms2, remote_paths, remote_user=remote_user, execute=execute)

    def get_shell_option_for_arg(args_kv, default):
        """A helper for get_shell_option. Returns a function that, if
            called with ``option`` that exists in args_kv, will return the
            value, else will return ``default`` for every other given arg"""

        def _helper(option, *args, **kwargs):
            return args_kv.get(option, default)
        return _helper
    action_base.get_become_option = MagicMock()
    action_base.get_become_option.return_value = 'remoteuser2'
    action_base._connection._shell._IS_WINDOWS = True
    assertSuccess(execute=False)
    assertSuccess(execute=True)
    action_base._connection._shell._IS_WINDOWS = False
    action_base._remote_chmod = MagicMock()
    action_base._is_become_unprivileged = MagicMock()
    action_base._is_become_unprivileged.return_value = False
    action_base._remote_chmod.return_value = {'rc': 0, 'stdout': 'some stuff here', 'stderr': ''}
    assertSuccess(execute=True)
    assertSuccess()
    action_base._remote_chmod.return_value = {'rc': 1, 'stdout': 'some stuff here', 'stderr': 'and here'}
    assertThrowRegex('Failed to set execute bit on remote files', execute=True)
    action_base._is_become_unprivileged.return_value = True
    action_base._remote_set_user_facl = MagicMock()
    action_base._remote_set_user_facl.return_value = {'rc': 0, 'stdout': '', 'stderr': ''}
    assertSuccess()
    action_base._remote_set_user_facl.return_value = {'rc': 1, 'stdout': '', 'stderr': ''}
    action_base._remote_chmod.return_value = {'rc': 1, 'stdout': 'some stuff here', 'stderr': ''}
    assertThrowRegex('Failed to set file mode or acl on remote temporary files', execute=True)
    action_base._remote_chmod.return_value = {'rc': 0, 'stdout': 'some stuff here', 'stderr': ''}
    assertSuccess(execute=True)
    action_base._remote_chown = MagicMock()
    action_base._remote_chown.return_value = {'rc': 0, 'stdout': '', 'stderr': ''}
    assertSuccess()
    action_base._remote_chown.return_value = {'rc': 1, 'stdout': '', 'stderr': ''}
    remote_user = 'root'
    action_base._get_admin_users = MagicMock()
    action_base._get_admin_users.return_value = ['root']
    assertThrowRegex('user would be unable to read the file.')
    remote_user = 'remoteuser1'
    assertSuccess()
    action_base._remote_chmod.assert_called_with(['remoteuser2 allow read'] + remote_paths, '+a')

    def raise_if_plus_a(definitely_not_underscore, mode):
        if mode == '+a':
            raise AnsibleAuthenticationFailure()
        return {'rc': 0, 'stdout': '', 'stderr': ''}
    action_base._remote_chmod.side_effect = raise_if_plus_a
    assertSuccess()
    action_base._remote_chmod.assert_called_with(remote_paths, 'A+user:remoteuser2:r:allow')
    assertSuccess()

    def rc_1_if_chmod_acl(definitely_not_underscore, mode):
        rc = 0
        if mode in CHMOD_ACL_FLAGS:
            rc = 1
        return {'rc': rc, 'stdout': '', 'stderr': ''}
    action_base._remote_chmod = MagicMock()
    action_base._remote_chmod.side_effect = rc_1_if_chmod_acl
    get_shell_option = action_base.get_shell_option
    action_base.get_shell_option = MagicMock()
    action_base.get_shell_option.side_effect = get_shell_option_for_arg({'common_remote_group': 'commongroup'}, None)
    action_base._remote_chgrp = MagicMock()
    action_base._remote_chgrp.return_value = {'rc': 0, 'stdout': '', 'stderr': ''}
    assertSuccess()
    action_base._remote_chgrp.assert_called_once_with(remote_paths, 'commongroup')
    action_base.get_shell_option.side_effect = get_shell_option_for_arg({'world_readable_temp': True, 'common_remote_group': None}, None)
    action_base._remote_chmod.return_value = {'rc': 0, 'stdout': 'some stuff here', 'stderr': ''}
    assertSuccess()
    action_base._remote_chmod = MagicMock()
    action_base._remote_chmod.return_value = {'rc': 1, 'stdout': 'some stuff here', 'stderr': ''}
    assertThrowRegex('Failed to set file mode on remote files')
    action_base.get_shell_option.side_effect = get_shell_option_for_arg({}, None)
    assertThrowRegex('on the temporary files Ansible needs to create')

----------



Test Class Name: TestActionBase