def clean_facts(facts):
    """ remove facts that can override internal keys or otherwise deemed unsafe """
    data = module_response_deepcopy(facts)
    remove_keys = set()
    fact_keys = set(data.keys())
    for magic_var in C.MAGIC_VARIABLE_MAPPING:
        remove_keys.update(fact_keys.intersection(C.MAGIC_VARIABLE_MAPPING[magic_var]))
    remove_keys.update(fact_keys.intersection(C.COMMON_CONNECTION_VARS))
    for conn_path in connection_loader.all(path_only=True):
        conn_name = os.path.splitext(os.path.basename(conn_path))[0]
        re_key = re.compile('^ansible_%s_' % re.escape(conn_name))
        for fact_key in fact_keys:
            if re_key.match(fact_key) and (not fact_key.endswith(('_bridge', '_gwbridge'))) or fact_key.startswith('ansible_become_'):
                remove_keys.add(fact_key)
    for hard in C.RESTRICTED_RESULT_KEYS + C.INTERNAL_RESULT_KEYS:
        if hard in fact_keys:
            remove_keys.add(hard)
    re_interp = re.compile('^ansible_.*_interpreter$')
    for fact_key in fact_keys:
        if re_interp.match(fact_key):
            remove_keys.add(fact_key)
    for r_key in remove_keys:
        if not r_key.startswith('ansible_ssh_host_key_'):
            display.warning('Removed restricted key from module data: %s' % r_key)
            del data[r_key]
    return strip_internal_keys(data)

----------

def test(self):
    fake_loader = DictDataLoader({})
    mock_module_loader = MagicMock()
    mock_shared_loader_obj = MagicMock()
    mock_shared_loader_obj.module_loader = mock_module_loader
    connection_loader_paths = ['/tmp/asdfadf', '/usr/lib64/whatever', 'dfadfasf', 'foo.py', '.*', '/path/to/ansible/lib/ansible/plugins/connection/custom_connection.py', '/path/to/ansible/lib/ansible/plugins/connection/ssh.py']

    def fake_all(path_only=None):
        for path in connection_loader_paths:
            yield path
    mock_connection_loader = MagicMock()
    mock_connection_loader.all = fake_all
    mock_shared_loader_obj.connection_loader = mock_connection_loader
    mock_connection = MagicMock()
    action_base = DerivedActionBase(task=None, connection=mock_connection, play_context=None, loader=fake_loader, templar=None, shared_loader_obj=mock_shared_loader_obj)
    data = {'ansible_playbook_python': '/usr/bin/python', 'ansible_python_interpreter': '/usr/bin/python', 'ansible_ssh_some_var': 'whatever', 'ansible_ssh_host_key_somehost': 'some key here', 'some_other_var': 'foo bar'}
    data = clean_facts(data)
    self.assertNotIn('ansible_playbook_python', data)
    self.assertNotIn('ansible_python_interpreter', data)
    self.assertIn('ansible_ssh_host_key_somehost', data)
    self.assertIn('some_other_var', data)

----------



Test Class Name: TestActionBaseCleanReturnedData