def set_become_plugin(self, plugin):
    self._become_plugin = plugin

----------

def test_plugins_connection_ssh__examine_output(self):
    pc = PlayContext()
    new_stdin = StringIO()
    become_success_token = b'BECOME-SUCCESS-abcdefghijklmnopqrstuvxyz'
    conn = connection_loader.get('ssh', pc, new_stdin)
    conn.set_become_plugin(become_loader.get('sudo'))
    conn.become.check_password_prompt = MagicMock()
    conn.become.check_success = MagicMock()
    conn.become.check_incorrect_password = MagicMock()
    conn.become.check_missing_password = MagicMock()

    def _check_password_prompt(line):
        return b'foo' in line

    def _check_become_success(line):
        return become_success_token in line

    def _check_incorrect_password(line):
        return b'incorrect password' in line

    def _check_missing_password(line):
        return b'bad password' in line
    conn._flags = dict(become_prompt=False, become_success=False, become_error=False, become_nopasswd_error=False)
    pc.prompt = True
    conn.become.prompt = True
    conn.become.check_password_prompt = MagicMock(side_effect=_check_password_prompt)
    conn.become.check_success = MagicMock(side_effect=_check_become_success)
    conn.become.check_incorrect_password = MagicMock(side_effect=_check_incorrect_password)
    conn.become.check_missing_password = MagicMock(side_effect=_check_missing_password)

    def get_option(option):
        if option == 'become_pass':
            return 'password'
        return None
    conn.become.get_option = get_option
    (output, unprocessed) = conn._examine_output(u'source', u'state', b'line 1\nline 2\nfoo\nline 3\nthis should be the remainder', False)
    self.assertEqual(output, b'line 1\nline 2\nline 3\n')
    self.assertEqual(unprocessed, b'this should be the remainder')
    self.assertTrue(conn._flags['become_prompt'])
    self.assertFalse(conn._flags['become_success'])
    self.assertFalse(conn._flags['become_error'])
    self.assertFalse(conn._flags['become_nopasswd_error'])
    conn._flags = dict(become_prompt=False, become_success=False, become_error=False, become_nopasswd_error=False)
    pc.prompt = False
    conn.become.prompt = False
    pc.success_key = str(become_success_token)
    conn.become.success = str(become_success_token)
    (output, unprocessed) = conn._examine_output(u'source', u'state', b'line 1\nline 2\n%s\nline 3\n' % become_success_token, False)
    self.assertEqual(output, b'line 1\nline 2\nline 3\n')
    self.assertEqual(unprocessed, b'')
    self.assertFalse(conn._flags['become_prompt'])
    self.assertTrue(conn._flags['become_success'])
    self.assertFalse(conn._flags['become_error'])
    self.assertFalse(conn._flags['become_nopasswd_error'])
    conn._flags = dict(become_prompt=False, become_success=False, become_error=False, become_nopasswd_error=False)
    pc.prompt = False
    conn.become.prompt = True
    pc.success_key = str(become_success_token)
    conn.become.success = str(become_success_token)
    (output, unprocessed) = conn._examine_output(u'source', u'state', b'line 1\nline 2\ndebug1: %s\nline 3\n' % become_success_token, False)
    self.assertEqual(output, b'line 1\nline 2\ndebug1: %s\nline 3\n' % become_success_token)
    self.assertEqual(unprocessed, b'')
    self.assertFalse(conn._flags['become_success'])
    conn._flags = dict(become_prompt=False, become_success=False, become_error=False, become_nopasswd_error=False)
    pc.prompt = False
    conn.become.prompt = False
    pc.success_key = None
    (output, unprocessed) = conn._examine_output(u'source', u'state', b'line 1\nline 2\nincorrect password\n', True)
    self.assertEqual(output, b'line 1\nline 2\nincorrect password\n')
    self.assertEqual(unprocessed, b'')
    self.assertFalse(conn._flags['become_prompt'])
    self.assertFalse(conn._flags['become_success'])
    self.assertTrue(conn._flags['become_error'])
    self.assertFalse(conn._flags['become_nopasswd_error'])
    conn._flags = dict(become_prompt=False, become_success=False, become_error=False, become_nopasswd_error=False)
    pc.prompt = False
    conn.become.prompt = False
    pc.success_key = None
    (output, unprocessed) = conn._examine_output(u'source', u'state', b'line 1\nbad password\n', True)
    self.assertEqual(output, b'line 1\nbad password\n')
    self.assertEqual(unprocessed, b'')
    self.assertFalse(conn._flags['become_prompt'])
    self.assertFalse(conn._flags['become_success'])
    self.assertFalse(conn._flags['become_error'])
    self.assertTrue(conn._flags['become_nopasswd_error'])

----------



Test Class Name: TestConnectionBaseClass