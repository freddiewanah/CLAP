def exec_command(self, cmd, in_data=None, sudoable=True):
    """ run a command on the local host """
    super(Connection, self).exec_command(cmd, in_data=in_data, sudoable=sudoable)
    display.debug('in local.exec_command()')
    executable = C.DEFAULT_EXECUTABLE.split()[0] if C.DEFAULT_EXECUTABLE else None
    if not os.path.exists(to_bytes(executable, errors='surrogate_or_strict')):
        raise AnsibleError('failed to find the executable specified %s. Please verify if the executable exists and re-try.' % executable)
    display.vvv(u'EXEC {0}'.format(to_text(cmd)), host=self._play_context.remote_addr)
    display.debug('opening command with Popen()')
    if isinstance(cmd, (text_type, binary_type)):
        cmd = to_bytes(cmd)
    else:
        cmd = map(to_bytes, cmd)
    master = None
    stdin = subprocess.PIPE
    if sudoable and self.become and self.become.expect_prompt() and (not self.get_option('pipelining')):
        try:
            (master, stdin) = pty.openpty()
        except (IOError, OSError) as e:
            display.debug('Unable to open pty: %s' % to_native(e))
    p = subprocess.Popen(cmd, shell=isinstance(cmd, (text_type, binary_type)), executable=executable, cwd=self.cwd, stdin=stdin, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if master is not None:
        os.close(stdin)
    display.debug('done running command with Popen()')
    if self.become and self.become.expect_prompt() and sudoable:
        fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
        fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)
        selector = selectors.DefaultSelector()
        selector.register(p.stdout, selectors.EVENT_READ)
        selector.register(p.stderr, selectors.EVENT_READ)
        become_output = b''
        try:
            while not self.become.check_success(become_output) and (not self.become.check_password_prompt(become_output)):
                events = selector.select(self._play_context.timeout)
                if not events:
                    (stdout, stderr) = p.communicate()
                    raise AnsibleError('timeout waiting for privilege escalation password prompt:\n' + to_native(become_output))
                for (key, event) in events:
                    if key.fileobj == p.stdout:
                        chunk = p.stdout.read()
                    elif key.fileobj == p.stderr:
                        chunk = p.stderr.read()
                if not chunk:
                    (stdout, stderr) = p.communicate()
                    raise AnsibleError('privilege output closed while waiting for password prompt:\n' + to_native(become_output))
                become_output += chunk
        finally:
            selector.close()
        if not self.become.check_success(become_output):
            become_pass = self.become.get_option('become_pass', playcontext=self._play_context)
            if master is None:
                p.stdin.write(to_bytes(become_pass, errors='surrogate_or_strict') + b'\n')
            else:
                os.write(master, to_bytes(become_pass, errors='surrogate_or_strict') + b'\n')
        fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
        fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    display.debug('getting output with communicate()')
    (stdout, stderr) = p.communicate(in_data)
    display.debug('done communicating')
    if master:
        os.close(master)
    display.debug('done with local.exec_command()')
    return (p.returncode, stdout, stderr)

----------

def test_retry_then_success(self, monkeypatch):
    self.conn.set_option('host_key_checking', False)
    self.conn.set_option('reconnection_retries', 3)
    monkeypatch.setattr('time.sleep', lambda x: None)
    self.mock_popen_res.stdout.read.side_effect = [b'', b'my_stdout\n', b'second_line']
    self.mock_popen_res.stderr.read.side_effect = [b'', b'my_stderr']
    type(self.mock_popen_res).returncode = PropertyMock(side_effect=[255] * 3 + [0] * 4)
    self.mock_selector.select.side_effect = [[(SelectorKey(self.mock_popen_res.stdout, 1001, [EVENT_READ], None), EVENT_READ)], [(SelectorKey(self.mock_popen_res.stderr, 1002, [EVENT_READ], None), EVENT_READ)], [], [(SelectorKey(self.mock_popen_res.stdout, 1001, [EVENT_READ], None), EVENT_READ)], [(SelectorKey(self.mock_popen_res.stdout, 1001, [EVENT_READ], None), EVENT_READ)], [(SelectorKey(self.mock_popen_res.stderr, 1002, [EVENT_READ], None), EVENT_READ)], []]
    self.mock_selector.get_map.side_effect = lambda : True
    self.conn._build_command = MagicMock()
    self.conn._build_command.return_value = 'ssh'
    (return_code, b_stdout, b_stderr) = self.conn.exec_command('ssh', 'some data')
    assert return_code == 0
    assert b_stdout == b'my_stdout\nsecond_line'
    assert b_stderr == b'my_stderr'

----------



Test Class Name: TestSSHConnectionRetries