@pass_environment
def unique(environment, a, case_sensitive=None, attribute=None):

    def _do_fail(e):
        if case_sensitive is False or attribute:
            raise AnsibleFilterError("Jinja2's unique filter failed and we cannot fall back to Ansible's version as it does not support the parameters supplied", orig_exc=e)
    error = e = None
    try:
        if HAS_UNIQUE:
            c = list(do_unique(environment, a, case_sensitive=bool(case_sensitive), attribute=attribute))
    except TypeError as e:
        error = e
        _do_fail(e)
    except Exception as e:
        error = e
        _do_fail(e)
        display.warning('Falling back to Ansible unique filter as Jinja2 one failed: %s' % to_text(e))
    if not HAS_UNIQUE or error:
        if case_sensitive is False or attribute:
            raise AnsibleFilterError("Ansible's unique filter does not support case_sensitive=False nor attribute parameters, you need a newer version of Jinja2 that provides their version of the filter.")
        c = []
        for x in a:
            if x not in c:
                c.append(x)
    return c

----------

def test_unhashable(self, data, expected):
    assert ms.unique(env, list(data)) == expected

----------



Test Class Name: TestUnique