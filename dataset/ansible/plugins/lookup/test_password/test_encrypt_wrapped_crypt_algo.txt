def run(self, terms, variables=None, **kwargs):
    if not isinstance(terms, list):
        terms = [terms]
    results = []
    for term in terms:
        if not isinstance(term, Mapping):
            raise AnsibleError('with_dict expects a dict')
        results.extend(self._flatten_hash_to_list(term))
    return results

----------

@patch('ansible.plugins.lookup.password._write_password_file')
def test_encrypt_wrapped_crypt_algo(self, mock_write_file):
    password.os.path.exists = self.password_lookup._loader.path_exists
    with patch.object(builtins, 'open', mock_open(read_data=self.password_lookup._loader._get_file_contents('/path/to/somewhere')[0])) as m:
        results = self.password_lookup.run([u'/path/to/somewhere encrypt=ldap_sha256_crypt'], None)
        wrapper = getattr(passlib.hash, 'ldap_sha256_crypt')
        self.assertEqual(len(results), 1)
        result = results[0]
        self.assertIsInstance(result, text_type)
        expected_password_length = 76
        self.assertEqual(len(result), expected_password_length)
        str_parts = result.split('$')
        self.assertEqual(len(str_parts), 5)
        self.assertEqual(str_parts[2], 'rounds=%s' % wrapper.default_rounds)
        self.assertEqual(str_parts[0], '{CRYPT}')
        self.assertTrue(wrapper.verify(self.password_lookup._loader._get_file_contents('/path/to/somewhere')[0], result))
        hashpw = '{CRYPT}$5$rounds=660000$testansiblepass.$KlRSdA3iFXoPI.dEwh7AixiXW3EtCkLrlQvlYA2sluD'
        self.assertTrue(wrapper.verify('test', hashpw))

----------



Test Class Name: TestLookupModuleWithPasslibWrappedAlgo