def random_password(length=DEFAULT_PASSWORD_LENGTH, chars=C.DEFAULT_PASSWORD_CHARS, seed=None):
    """Return a random password string of length containing only chars

    :kwarg length: The number of characters in the new password.  Defaults to 20.
    :kwarg chars: The characters to choose from.  The default is all ascii
        letters, ascii digits, and these symbols ``.,:-_``
    """
    if not isinstance(chars, text_type):
        raise AnsibleAssertionError('%s (%s) is not a text_type' % (chars, type(chars)))
    if seed is None:
        random_generator = random.SystemRandom()
    else:
        random_generator = random.Random(seed)
    return u''.join((random_generator.choice(chars) for dummy in range(length)))

----------

def test_gen_password(self):
    for testcase in old_style_params_data:
        params = testcase['params']
        candidate_chars = testcase['candidate_chars']
        params_chars_spec = password._gen_candidate_chars(params['chars'])
        password_string = password.random_password(length=params['length'], chars=params_chars_spec)
        self.assertEqual(len(password_string), params['length'], msg='generated password=%s has length (%s) instead of expected length (%s)' % (password_string, len(password_string), params['length']))
        for char in password_string:
            self.assertIn(char, candidate_chars, msg='%s not found in %s from chars spect %s' % (char, candidate_chars, params['chars']))

----------



Test Class Name: TestRandomPassword