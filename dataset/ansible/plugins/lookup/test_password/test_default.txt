def random_password(length=DEFAULT_PASSWORD_LENGTH, chars=C.DEFAULT_PASSWORD_CHARS, seed=None):
    """Return a random password string of length containing only chars

    :kwarg length: The number of characters in the new password.  Defaults to 20.
    :kwarg chars: The characters to choose from.  The default is all ascii
        letters, ascii digits, and these symbols ``.,:-_``
    """
    if not isinstance(chars, text_type):
        raise AnsibleAssertionError('%s (%s) is not a text_type' % (chars, type(chars)))
    if seed is None:
        random_generator = random.SystemRandom()
    else:
        random_generator = random.Random(seed)
    return u''.join((random_generator.choice(chars) for dummy in range(length)))

----------

def test_default(self):
    res = password.random_password()
    self.assertEqual(len(res), DEFAULT_LENGTH)
    self.assertTrue(isinstance(res, text_type))
    self._assert_valid_chars(res, DEFAULT_CANDIDATE_CHARS)

----------

def _assert_valid_chars(self, res, chars):
    for res_char in res:
        self.assertIn(res_char, chars)

Test Class Name: TestRandomPassword