@staticmethod
def process_include_results(results, iterator, loader, variable_manager):
    included_files = []
    task_vars_cache = {}
    for res in results:
        original_host = res._host
        original_task = res._task
        if original_task.action in C._ACTION_ALL_INCLUDES:
            if original_task.action in C._ACTION_INCLUDE:
                display.deprecated('"include" is deprecated, use include_tasks/import_tasks/import_playbook instead', '2.16')
            if original_task.loop:
                if 'results' not in res._result:
                    continue
                include_results = res._result['results']
            else:
                include_results = [res._result]
            for include_result in include_results:
                if 'skipped' in include_result and include_result['skipped'] or ('failed' in include_result and include_result['failed']):
                    continue
                cache_key = (iterator._play, original_host, original_task)
                try:
                    task_vars = task_vars_cache[cache_key]
                except KeyError:
                    task_vars = task_vars_cache[cache_key] = variable_manager.get_vars(play=iterator._play, host=original_host, task=original_task)
                include_args = include_result.get('include_args', dict())
                special_vars = {}
                loop_var = include_result.get('ansible_loop_var', 'item')
                index_var = include_result.get('ansible_index_var')
                if loop_var in include_result:
                    task_vars[loop_var] = special_vars[loop_var] = include_result[loop_var]
                if index_var and index_var in include_result:
                    task_vars[index_var] = special_vars[index_var] = include_result[index_var]
                if '_ansible_item_label' in include_result:
                    task_vars['_ansible_item_label'] = special_vars['_ansible_item_label'] = include_result['_ansible_item_label']
                if 'ansible_loop' in include_result:
                    task_vars['ansible_loop'] = special_vars['ansible_loop'] = include_result['ansible_loop']
                if original_task.no_log and '_ansible_no_log' not in include_args:
                    task_vars['_ansible_no_log'] = special_vars['_ansible_no_log'] = original_task.no_log
                task_vars['ansible_search_path'] = original_task.get_search_path()
                if loader.get_basedir() not in task_vars['ansible_search_path']:
                    task_vars['ansible_search_path'].append(loader.get_basedir())
                templar = Templar(loader=loader, variables=task_vars)
                if original_task.action in C._ACTION_ALL_INCLUDE_TASKS:
                    include_file = None
                    if original_task._parent:
                        parent_include = original_task._parent
                        cumulative_path = None
                        while parent_include is not None:
                            if not isinstance(parent_include, TaskInclude):
                                parent_include = parent_include._parent
                                continue
                            if isinstance(parent_include, IncludeRole):
                                parent_include_dir = parent_include._role_path
                            else:
                                try:
                                    parent_include_dir = os.path.dirname(templar.template(parent_include.args.get('_raw_params')))
                                except AnsibleError as e:
                                    parent_include_dir = ''
                                    display.warning('Templating the path of the parent %s failed. The path to the included file may not be found. The error was: %s.' % (original_task.action, to_text(e)))
                            if cumulative_path is not None and (not os.path.isabs(cumulative_path)):
                                cumulative_path = os.path.join(parent_include_dir, cumulative_path)
                            else:
                                cumulative_path = parent_include_dir
                            include_target = templar.template(include_result['include'])
                            if original_task._role:
                                new_basedir = os.path.join(original_task._role._role_path, 'tasks', cumulative_path)
                                candidates = [loader.path_dwim_relative(original_task._role._role_path, 'tasks', include_target), loader.path_dwim_relative(new_basedir, 'tasks', include_target)]
                                for include_file in candidates:
                                    try:
                                        os.stat(include_file)
                                        break
                                    except OSError:
                                        pass
                            else:
                                include_file = loader.path_dwim_relative(loader.get_basedir(), cumulative_path, include_target)
                            if os.path.exists(include_file):
                                break
                            else:
                                parent_include = parent_include._parent
                    if include_file is None:
                        if original_task._role:
                            include_target = templar.template(include_result['include'])
                            include_file = loader.path_dwim_relative(original_task._role._role_path, 'handlers' if isinstance(original_task, Handler) else 'tasks', include_target, is_role=True)
                        else:
                            include_file = loader.path_dwim(include_result['include'])
                    include_file = templar.template(include_file)
                    inc_file = IncludedFile(include_file, include_args, special_vars, original_task)
                else:
                    role_name = include_args.pop('name', include_args.pop('role', None))
                    if role_name is not None:
                        role_name = templar.template(role_name)
                    new_task = original_task.copy()
                    new_task._role_name = role_name
                    for from_arg in new_task.FROM_ARGS:
                        if from_arg in include_args:
                            from_key = from_arg.removesuffix('_from')
                            new_task._from_files[from_key] = templar.template(include_args.pop(from_arg))
                    omit_token = task_vars.get('omit')
                    if omit_token:
                        new_task._from_files = remove_omit(new_task._from_files, omit_token)
                    inc_file = IncludedFile(role_name, include_args, special_vars, new_task, is_role=True)
                idx = 0
                orig_inc_file = inc_file
                while 1:
                    try:
                        pos = included_files[idx:].index(orig_inc_file)
                        inc_file = included_files[idx + pos]
                    except ValueError:
                        included_files.append(orig_inc_file)
                        inc_file = orig_inc_file
                    try:
                        inc_file.add_host(original_host)
                        inc_file._results.append(res)
                    except ValueError:
                        idx += pos + 1
                    else:
                        break
    return included_files

----------

def test_process_include_simulate_free_block_role_tasks(mock_iterator, mock_variable_manager):
    """Test loading the same role returns different included files

    In the case of free, we may end up with included files from roles that
    have the same parent but are different tasks. Previously the comparison
    for equality did not check if the tasks were the same and only checked
    that the parents were the same. This lead to some tasks being run
    incorrectly and some tasks being silient dropped."""
    fake_loader = DictDataLoader({'include_test.yml': '', '/etc/ansible/roles/foo_role/tasks/task1.yml': '\n            - debug: msg=task1\n        ', '/etc/ansible/roles/foo_role/tasks/task2.yml': '\n            - debug: msg=task2\n        '})
    hostname = 'testhost1'
    hostname2 = 'testhost2'
    role1_ds = {'name': 'task1 include', 'include_role': {'name': 'foo_role', 'tasks_from': 'task1.yml'}}
    role2_ds = {'name': 'task2 include', 'include_role': {'name': 'foo_role', 'tasks_from': 'task2.yml'}}
    parent_task_ds = {'block': [role1_ds, role2_ds]}
    parent_block = Block.load(parent_task_ds, loader=fake_loader)
    parent_block._play = None
    include_role1_ds = {'include_args': {'name': 'foo_role', 'tasks_from': 'task1.yml'}}
    include_role2_ds = {'include_args': {'name': 'foo_role', 'tasks_from': 'task2.yml'}}
    include_role1 = IncludeRole.load(role1_ds, block=parent_block, loader=fake_loader)
    include_role2 = IncludeRole.load(role2_ds, block=parent_block, loader=fake_loader)
    result1 = task_result.TaskResult(host=hostname, task=include_role1, return_data=include_role1_ds)
    result2 = task_result.TaskResult(host=hostname2, task=include_role2, return_data=include_role2_ds)
    results = [result1, result2]
    res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
    assert isinstance(res, list)
    assert len(res) == 2
    assert res[0]._filename == 'foo_role'
    assert res[1]._filename == 'foo_role'
    assert res[0]._task != res[1]._task
    assert res[0]._hosts == ['testhost1']
    assert res[1]._hosts == ['testhost2']
    assert res[0]._args == {}
    assert res[1]._args == {}
    assert res[0]._vars == {}
    assert res[1]._vars == {}

----------



Test Class Name: default