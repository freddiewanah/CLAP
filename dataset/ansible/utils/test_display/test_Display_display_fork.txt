def display(self, msg, color=None, stderr=False, screen_only=False, log_only=False, newline=True):
    """ Display a message to the user

        Note: msg *must* be a unicode string to prevent UnicodeError tracebacks.
        """
    if self._final_q:
        return self._final_q.send_display(msg, color=color, stderr=stderr, screen_only=screen_only, log_only=log_only, newline=newline)
    nocolor = msg
    if not log_only:
        has_newline = msg.endswith(u'\n')
        if has_newline:
            msg2 = msg[:-1]
        else:
            msg2 = msg
        if color:
            msg2 = stringc(msg2, color)
        if has_newline or newline:
            msg2 = msg2 + u'\n'
        if not stderr:
            fileobj = sys.stdout
        else:
            fileobj = sys.stderr
        with self._lock:
            fileobj.write(msg2)
    if logger and (not screen_only):
        msg2 = nocolor.lstrip('\n')
        lvl = logging.INFO
        if color:
            try:
                lvl = color_to_log_level[color]
            except KeyError:
                raise AnsibleAssertionError('Invalid color supplied to display: %s' % color)
        logger.log(lvl, msg2)

----------

def test_Display_display_fork():

    def test():
        queue = MagicMock()
        display = Display()
        display.set_queue(queue)
        display.display('foo')
        queue.send_display.assert_called_once_with('foo', color=None, stderr=False, screen_only=False, log_only=False, newline=True)
    p = multiprocessing_context.Process(target=test)
    p.start()
    p.join()
    assert p.exitcode == 0

----------



Test Class Name: default