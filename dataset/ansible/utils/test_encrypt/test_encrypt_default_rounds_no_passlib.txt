def hash(self, secret, salt=None, salt_size=None, rounds=None, ident=None):
    salt = self._salt(salt, salt_size)
    rounds = self._rounds(rounds)
    ident = self._ident(ident)
    return self._hash(secret, salt, rounds, ident)

----------

@pytest.mark.skipif(sys.platform.startswith('darwin'), reason='macOS requires passlib')
def test_encrypt_default_rounds_no_passlib():
    with passlib_off():
        assert_hash('$1$12345678$tRy4cXc3kmcfRZVj4iFXr/', secret='123', algorithm='md5_crypt', salt='12345678')
        assert_hash('$5$12345678$uAZsE3BenI2G.nA8DpTl.9Dc8JiqacI53pEqRr5ppT7', secret='123', algorithm='sha256_crypt', salt='12345678')
        assert_hash('$6$12345678$LcV9LQiaPekQxZ.OfkMADjFdSO2k9zfbDQrHPVcYjSLqSdjLYpsgqviYvTEP/R41yPmhH3CCeEDqVhW1VHr3L.', secret='123', algorithm='sha512_crypt', salt='12345678')
        assert encrypt.CryptHash('md5_crypt').hash('123')

----------



Test Class Name: passlib_off