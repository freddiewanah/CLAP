def get_encrypted_password(password, hashtype='sha512', salt=None, salt_size=None, rounds=None, ident=None):
    passlib_mapping = {'md5': 'md5_crypt', 'blowfish': 'bcrypt', 'sha256': 'sha256_crypt', 'sha512': 'sha512_crypt'}
    hashtype = passlib_mapping.get(hashtype, hashtype)
    unknown_passlib_hashtype = False
    if PASSLIB_AVAILABLE and hashtype not in passlib_mapping and (hashtype not in passlib_mapping.values()):
        unknown_passlib_hashtype = True
        display.deprecated(f"Checking for unsupported password_hash passlib hashtype '{hashtype}'. This will be an error in the future as all supported hashtypes must be documented.", version='2.19')
    try:
        return passlib_or_crypt(password, hashtype, salt=salt, salt_size=salt_size, rounds=rounds, ident=ident)
    except AnsibleError as e:
        reraise(AnsibleFilterError, AnsibleFilterError(to_native(e), orig_exc=e), sys.exc_info()[2])
    except Exception as e:
        if unknown_passlib_hashtype:
            choices = ', '.join(passlib_mapping)
            raise AnsibleFilterError(f'{hashtype} is not in the list of supported passlib algorithms: {choices}') from e
        raise

----------

@pytest.mark.skipif(not encrypt.PASSLIB_AVAILABLE, reason='passlib must be installed to run this test')
def test_password_hash_filter_passlib():
    with pytest.raises(AnsibleFilterError):
        get_encrypted_password('123', 'sha257', salt='12345678')
    assert get_encrypted_password('123', 'sha256', salt='12345678') == '$5$rounds=535000$12345678$uy3TurUPaY71aioJi58HvUY8jkbhSQU8HepbyaNngv.'
    assert get_encrypted_password('123', 'sha256', salt='12345678', rounds=5000) == '$5$12345678$uAZsE3BenI2G.nA8DpTl.9Dc8JiqacI53pEqRr5ppT7'
    assert get_encrypted_password('123', 'sha256', salt='12345678', rounds=10000) == '$5$rounds=10000$12345678$JBinliYMFEcBeAXKZnLjenhgEhTmJBvZn3aR8l70Oy/'
    assert get_encrypted_password('123', 'sha512', salt='12345678', rounds=6000) == '$6$rounds=6000$12345678$l/fC67BdJwZrJ7qneKGP1b6PcatfBr0dI7W6JLBrsv8P1wnv/0pu4WJsWq5p6WiXgZ2gt9Aoir3MeORJxg4.Z/'
    assert get_encrypted_password('123', 'sha512', salt='12345678', rounds=5000) == '$6$12345678$LcV9LQiaPekQxZ.OfkMADjFdSO2k9zfbDQrHPVcYjSLqSdjLYpsgqviYvTEP/R41yPmhH3CCeEDqVhW1VHr3L.'
    assert get_encrypted_password('123', 'crypt16', salt='12') == '12pELHK2ME3McUFlHxel6uMM'
    assert get_encrypted_password('123', 'pbkdf2_sha256')
    assert get_encrypted_password('123', 'pbkdf2_sha256', ident='invalid_ident')

----------



Test Class Name: passlib_off