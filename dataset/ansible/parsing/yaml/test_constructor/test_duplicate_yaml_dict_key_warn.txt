def construct_mapping(self, node, deep=False):
    if not isinstance(node, MappingNode):
        raise ConstructorError(None, None, 'expected a mapping node, but found %s' % node.id, node.start_mark)
    self.flatten_mapping(node)
    mapping = AnsibleMapping()
    mapping.ansible_pos = self._node_position_info(node)
    for (key_node, value_node) in node.value:
        key = self.construct_object(key_node, deep=deep)
        try:
            hash(key)
        except TypeError as exc:
            raise ConstructorError('while constructing a mapping', node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
        if key in mapping:
            msg = u'While constructing a mapping from {1}, line {2}, column {3}, found a duplicate dict key ({0}). Using last defined value only.'.format(key, *mapping.ansible_pos)
            if C.DUPLICATE_YAML_DICT_KEY == 'warn':
                display.warning(msg)
            elif C.DUPLICATE_YAML_DICT_KEY == 'error':
                raise ConstructorError(context=None, context_mark=None, problem=to_native(msg), problem_mark=node.start_mark, note=None)
            else:
                display.debug(msg)
        value = self.construct_object(value_node, deep=deep)
        mapping[key] = value
    return mapping

----------

def test_duplicate_yaml_dict_key_warn(dupe_node, monkeypatch):
    monkeypatch.setattr(C, 'DUPLICATE_YAML_DICT_KEY', 'warn')
    cap = Capture()
    monkeypatch.setattr(Display(), 'warning', cap)
    ac = AnsibleConstructor()
    ac.construct_mapping(dupe_node)
    assert cap.called
    expected = [(('While constructing a mapping from tag:yaml.org,2002:map, line 1, column 1, found a duplicate dict key (bar). Using last defined value only.',), {})]
    assert cap.calls == expected

----------



Test Class Name: Capture