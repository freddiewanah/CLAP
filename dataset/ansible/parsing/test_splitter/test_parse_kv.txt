def parse_kv(args, check_raw=False):
    """
    Convert a string of key/value items to a dict. If any free-form params
    are found and the check_raw option is set to True, they will be added
    to a new parameter called '_raw_params'. If check_raw is not enabled,
    they will simply be ignored.
    """
    args = to_text(args, nonstring='passthru')
    options = {}
    if args is not None:
        try:
            vargs = split_args(args)
        except IndexError as e:
            raise AnsibleParserError('Unable to parse argument string', orig_exc=e)
        except ValueError as ve:
            if 'no closing quotation' in str(ve).lower():
                raise AnsibleParserError('error parsing argument string, try quoting the entire line.', orig_exc=ve)
            else:
                raise
        raw_params = []
        for orig_x in vargs:
            x = _decode_escapes(orig_x)
            if '=' in x:
                pos = 0
                try:
                    while True:
                        pos = x.index('=', pos + 1)
                        if pos > 0 and x[pos - 1] != '\\':
                            break
                except ValueError:
                    raw_params.append(x.replace('\\=', '='))
                    continue
                k = x[:pos]
                v = x[pos + 1:]
                if check_raw and k not in ('creates', 'removes', 'chdir', 'executable', 'warn', 'stdin', 'stdin_add_newline', 'strip_empty_ends'):
                    raw_params.append(orig_x)
                else:
                    options[k.strip()] = unquote(v.strip())
            else:
                raw_params.append(orig_x)
        if len(raw_params) > 0:
            options[u'_raw_params'] = join_args(raw_params)
    return options

----------

@pytest.mark.parametrize('args, expected', PARSE_KV)
def test_parse_kv(args, expected):
    assert parse_kv(args) == expected

----------



Test Class Name: default