def parse(self, skip_action_validation=False):
    """
        Given a task in one of the supported forms, parses and returns
        returns the action, arguments, and delegate_to values for the
        task, dealing with all sorts of levels of fuzziness.
        """
    thing = None
    action = None
    delegate_to = self._task_ds.get('delegate_to', Sentinel)
    args = dict()
    additional_args = self._task_ds.get('args', dict())
    if 'action' in self._task_ds:
        thing = self._task_ds['action']
        (action, args) = self._normalize_parameters(thing, action=action, additional_args=additional_args)
    if 'local_action' in self._task_ds:
        if action is not None:
            raise AnsibleParserError('action and local_action are mutually exclusive', obj=self._task_ds)
        thing = self._task_ds.get('local_action', '')
        delegate_to = 'localhost'
        (action, args) = self._normalize_parameters(thing, action=action, additional_args=additional_args)
    non_task_ds = dict(((k, v) for (k, v) in self._task_ds.items() if k not in self._task_attrs and (not k.startswith('with_'))))
    for (item, value) in non_task_ds.items():
        context = None
        is_action_candidate = False
        if item in BUILTIN_TASKS:
            is_action_candidate = True
        elif skip_action_validation:
            is_action_candidate = True
        else:
            context = action_loader.find_plugin_with_context(item, collection_list=self._collection_list)
            if not context.resolved:
                context = module_loader.find_plugin_with_context(item, collection_list=self._collection_list)
            is_action_candidate = context.resolved and bool(context.redirect_list)
        if is_action_candidate:
            if action is not None:
                raise AnsibleParserError('conflicting action statements: %s, %s' % (action, item), obj=self._task_ds)
            if context is not None and context.resolved:
                self.resolved_action = context.resolved_fqcn
            action = item
            thing = value
            (action, args) = self._normalize_parameters(thing, action=action, additional_args=additional_args)
    if action is None:
        if non_task_ds:
            bad_action = list(non_task_ds.keys())[0]
            raise AnsibleParserError("couldn't resolve module/action '{0}'. This often indicates a misspelling, missing collection, or incorrect module path.".format(bad_action), obj=self._task_ds)
        else:
            raise AnsibleParserError('no module/action detected in task.', obj=self._task_ds)
    elif args.get('_raw_params', '') != '' and action not in RAW_PARAM_MODULES:
        templar = Templar(loader=None)
        raw_params = args.pop('_raw_params')
        if templar.is_template(raw_params):
            args['_variable_params'] = raw_params
        else:
            raise AnsibleParserError("this task '%s' has extra params, which is only allowed in the following modules: %s" % (action, ', '.join(RAW_PARAM_MODULES)), obj=self._task_ds)
    return (action, args, delegate_to)

----------

def test_local_action_string(self):
    m = ModuleArgsParser(dict(local_action='copy src=a dest=b'))
    (mod, args, delegate_to) = m.parse()
    self._debug(mod, args, delegate_to)
    assert mod == 'copy'
    assert args == dict(src='a', dest='b')
    assert delegate_to == 'localhost'

----------

def _debug(self, mod, args, to):
    print('RETURNED module = {0}'.format(mod))
    print('           args = {0}'.format(args))
    print('             to = {0}'.format(to))

Test Class Name: TestModArgsDwim