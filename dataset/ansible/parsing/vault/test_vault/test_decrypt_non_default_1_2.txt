def parse_vaulttext_envelope(b_vaulttext_envelope, default_vault_id=None, filename=None):
    """Parse the vaulttext envelope

    When data is saved, it has a header prepended and is formatted into 80
    character lines.  This method extracts the information from the header
    and then removes the header and the inserted newlines.  The string returned
    is suitable for processing by the Cipher classes.

    :arg b_vaulttext: byte str containing the data from a save file
    :kwarg default_vault_id: The vault_id name to use if the vaulttext does not provide one.
    :kwarg filename: The filename that the data came from.  This is only
        used to make better error messages in case the data cannot be
        decrypted. This is optional.
    :returns: A tuple of byte str of the vaulttext suitable to pass to parse_vaultext,
        a byte str of the vault format version,
        the name of the cipher used, and the vault_id.
    :raises: AnsibleVaultFormatError: if the vaulttext_envelope format is invalid
    """
    default_vault_id = default_vault_id or C.DEFAULT_VAULT_IDENTITY
    try:
        return _parse_vaulttext_envelope(b_vaulttext_envelope, default_vault_id)
    except Exception as exc:
        msg = 'Vault envelope format error'
        if filename:
            msg += ' in %s' % filename
        msg += ': %s' % exc
        raise AnsibleVaultFormatError(msg)

----------

def test_decrypt_non_default_1_2(self):
    b_expected_plaintext = to_bytes('foo bar\n')
    vaulttext = '$ANSIBLE_VAULT;1.2;AES256;ansible_devel\n65616435333934613466373335363332373764363365633035303466643439313864663837393234\n3330656363343637313962633731333237313636633534630a386264363438363362326132363239\n39363166646664346264383934393935653933316263333838386362633534326664646166663736\n6462303664383765650a356637643633366663643566353036303162386237336233393065393164\n6264'
    vault_secrets = self._vault_secrets_from_password('default', 'ansible')
    v = vault.VaultLib(vault_secrets)
    b_vaulttext = to_bytes(vaulttext)
    b_plaintext = v.decrypt(b_vaulttext)
    self.assertEqual(b_expected_plaintext, b_plaintext)
    (b_ciphertext, b_version, cipher_name, vault_id) = vault.parse_vaulttext_envelope(b_vaulttext)
    self.assertEqual('ansible_devel', vault_id)
    self.assertEqual(b'1.2', b_version)

----------

def _vault_secrets(self, vault_id, secret):
    return [(vault_id, secret)]
def _vault_secrets_from_password(self, vault_id, password):
    return [(vault_id, TextVaultSecret(password))]

Test Class Name: TestVaultLib