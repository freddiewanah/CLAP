def parse_vaulttext(b_vaulttext):
    """Parse the vaulttext

    :arg b_vaulttext: byte str containing the vaulttext (ciphertext, salt, crypted_hmac)
    :returns: A tuple of byte str of the ciphertext suitable for passing to a
        Cipher class's decrypt() function, a byte str of the salt,
        and a byte str of the crypted_hmac
    :raises: AnsibleVaultFormatError: if the vaulttext format is invalid
    """
    try:
        return _parse_vaulttext(b_vaulttext)
    except AnsibleVaultFormatError:
        raise
    except Exception as exc:
        msg = 'Vault vaulttext format error: %s' % exc
        raise AnsibleVaultFormatError(msg)

----------

def test(self):
    vaulttext_envelope = u'$ANSIBLE_VAULT;1.1;AES256\n33363965326261303234626463623963633531343539616138316433353830356566396130353436\n3562643163366231316662386565383735653432386435610a306664636137376132643732393835\n63383038383730306639353234326630666539346233376330303938323639306661313032396437\n6233623062366136310a633866373936313238333730653739323461656662303864663666653563\n3138'
    b_vaulttext_envelope = to_bytes(vaulttext_envelope, errors='strict', encoding='utf-8')
    (b_vaulttext, b_version, cipher_name, vault_id) = vault.parse_vaulttext_envelope(b_vaulttext_envelope)
    res = vault.parse_vaulttext(b_vaulttext)
    self.assertIsInstance(res[0], bytes)
    self.assertIsInstance(res[1], bytes)
    self.assertIsInstance(res[2], bytes)

----------



Test Class Name: TestParseVaulttext