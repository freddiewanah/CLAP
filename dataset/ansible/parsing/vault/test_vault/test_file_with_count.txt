def is_encrypted_file(file_obj, start_pos=0, count=-1):
    """Test if the contents of a file obj are a vault encrypted data blob.

    :arg file_obj: A file object that will be read from.
    :kwarg start_pos: A byte offset in the file to start reading the header
        from.  Defaults to 0, the beginning of the file.
    :kwarg count: Read up to this number of bytes from the file to determine
        if it looks like encrypted vault data.  The default is -1, read to the
        end of file.
    :returns: True if the file looks like a vault file. Otherwise, False.
    """
    current_position = file_obj.tell()
    try:
        file_obj.seek(start_pos)
        return is_encrypted(file_obj.read(count))
    finally:
        file_obj.seek(current_position)

----------

def test_file_with_count(self):
    b_data = b'$ANSIBLE_VAULT;9.9;TEST\n%s' % hexlify(b'ansible\ntesting\nfile pos')
    vault_length = len(b_data)
    b_data = b_data + u'ァ ア'.encode('utf-8')
    b_data_fo = io.BytesIO(b_data)
    self.assertTrue(vault.is_encrypted_file(b_data_fo, count=vault_length))

----------



Test Class Name: TestVaultIsEncryptedFile