def assertRaisesRegex(self, *args, **kwargs):
    return getattr(self, _assertRaisesRegex)(*args, **kwargs)

----------

def test_rekey_file_no_new_password(self):
    self._test_dir = self._create_test_dir()
    src_file_contents = to_bytes('some info in a file\nyup.')
    src_file_path = self._create_file(self._test_dir, 'src_file', content=src_file_contents)
    ve = self._vault_editor()
    ve.encrypt_file(src_file_path, self.vault_secret)
    self.assertRaisesRegex(errors.AnsibleError, 'The value for the new_password to rekey', ve.rekey_file, src_file_path, None)

----------

def _create_test_dir(self):
    suffix = '_ansible_unit_test_%s_' % self.__class__.__name__
    return tempfile.mkdtemp(suffix=suffix)
def _create_file(self, test_dir, name, content=None, symlink=False):
    file_path = os.path.join(test_dir, name)
    opened_file = open(file_path, 'wb')
    if content:
        opened_file.write(content)
    opened_file.close()
    return file_path
def _vault_editor(self, vault_secrets=None):
    if vault_secrets is None:
        vault_secrets = self._secrets(self.vault_password)
    return VaultEditor(VaultLib(vault_secrets))

Test Class Name: TestVaultEditor