def decrypt(self, vaulttext, filename=None, obj=None):
    """Decrypt a piece of vault encrypted data.

        :arg vaulttext: a string to decrypt.  Since vault encrypted data is an
            ascii text format this can be either a byte str or unicode string.
        :kwarg filename: a filename that the data came from.  This is only
            used to make better error messages in case the data cannot be
            decrypted.
        :returns: a byte string containing the decrypted data and the vault-id that was used

        """
    (plaintext, vault_id, vault_secret) = self.decrypt_and_get_vault_id(vaulttext, filename=filename, obj=obj)
    return plaintext

----------

@patch('ansible.parsing.vault.subprocess.call')
def test_edit_file_no_vault_id(self, mock_sp_call):
    self._test_dir = self._create_test_dir()
    src_contents = to_bytes('some info in a file\nyup.')
    src_file_path = self._create_file(self._test_dir, 'src_file', content=src_contents)
    new_src_contents = to_bytes('The info is different now.')

    def faux_editor(editor_args):
        self._faux_editor(editor_args, new_src_contents)
    mock_sp_call.side_effect = faux_editor
    ve = self._vault_editor()
    ve.encrypt_file(src_file_path, self.vault_secret)
    ve.edit_file(src_file_path)
    new_src_file = open(src_file_path, 'rb')
    new_src_file_contents = new_src_file.read()
    self.assertTrue(b'$ANSIBLE_VAULT;1.1;AES256' in new_src_file_contents)
    src_file_plaintext = ve.vault.decrypt(new_src_file_contents)
    self.assertEqual(src_file_plaintext, new_src_contents)

----------

def _create_test_dir(self):
    suffix = '_ansible_unit_test_%s_' % self.__class__.__name__
    return tempfile.mkdtemp(suffix=suffix)
def _create_file(self, test_dir, name, content=None, symlink=False):
    file_path = os.path.join(test_dir, name)
    opened_file = open(file_path, 'wb')
    if content:
        opened_file.write(content)
    opened_file.close()
    return file_path
def _vault_editor(self, vault_secrets=None):
    if vault_secrets is None:
        vault_secrets = self._secrets(self.vault_password)
    return VaultEditor(VaultLib(vault_secrets))
def _faux_editor(self, editor_args, new_src_contents=None):
    if editor_args[0] == 'shred':
        return
    tmp_path = editor_args[-1]
    tmp_file = open(tmp_path, 'wb')
    if new_src_contents:
        tmp_file.write(new_src_contents)
    tmp_file.close()

Test Class Name: TestVaultEditor