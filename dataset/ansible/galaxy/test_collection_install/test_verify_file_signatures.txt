def verify_file_signatures(fqcn, manifest_file, detached_signatures, keyring, required_successful_count, ignore_signature_errors):
    successful = 0
    error_messages = []
    signature_count_requirements = re.match(SIGNATURE_COUNT_RE, required_successful_count).groupdict()
    strict = signature_count_requirements['strict'] or False
    require_all = signature_count_requirements['all']
    require_count = signature_count_requirements['count']
    if require_count is not None:
        require_count = int(require_count)
    for signature in detached_signatures:
        signature = to_text(signature, errors='surrogate_or_strict')
        try:
            verify_file_signature(manifest_file, signature, keyring, ignore_signature_errors)
        except CollectionSignatureError as error:
            if error.ignore:
                continue
            error_messages.append(error.report(fqcn))
        else:
            successful += 1
            if require_all:
                continue
            if successful == require_count:
                break
    if strict and (not successful):
        verified = False
        display.display(f"Signature verification failed for '{fqcn}': no successful signatures")
    elif require_all:
        verified = not error_messages
        if not verified:
            display.display(f"Signature verification failed for '{fqcn}': some signatures failed")
    else:
        verified = not detached_signatures or require_count == successful
        if not verified:
            display.display(f"Signature verification failed for '{fqcn}': fewer successful signatures than required")
    if not verified:
        for msg in error_messages:
            display.vvvv(msg)
    return verified

----------

@pytest.mark.parametrize('signatures,required_successful_count,ignore_errors,expected_success', [([], 'all', [], True), (['good_signature'], 'all', [], True), (['good_signature', collection.gpg.GpgBadArmor(status='failed')], 'all', [], False), ([collection.gpg.GpgBadArmor(status='failed')], 'all', [], False), ([collection.gpg.GpgBadArmor(status='failed')], 'all', ['BADARMOR'], True), ([collection.gpg.GpgBadArmor(status='failed'), 'good_signature'], 'all', ['BADARMOR'], True), ([], '+all', [], False), ([collection.gpg.GpgBadArmor(status='failed')], '+all', ['BADARMOR'], False), ([], '1', [], True), ([], '+1', [], False), (['good_signature'], '2', [], False), (['good_signature', collection.gpg.GpgBadArmor(status='failed')], '2', [], False), (['good_signature', collection.gpg.GpgBadArmor(status='failed')], '2', ['BADARMOR'], False), (['good_signature', 'good_signature'], '2', [], True)])
def test_verify_file_signatures(signatures, required_successful_count, ignore_errors, expected_success):

    def gpg_error_generator(results):
        for result in results:
            if isinstance(result, collection.gpg.GpgBaseError):
                yield result
    fqcn = 'ns.coll'
    manifest_file = 'MANIFEST.json'
    keyring = '~/.ansible/pubring.kbx'
    with patch.object(collection, 'run_gpg_verify', MagicMock(return_value=('somestdout', 0))):
        with patch.object(collection, 'parse_gpg_errors', MagicMock(return_value=gpg_error_generator(signatures))):
            assert collection.verify_file_signatures(fqcn, manifest_file, signatures, keyring, required_successful_count, ignore_errors) == expected_success

----------



Test Class Name: RequirementCandidates