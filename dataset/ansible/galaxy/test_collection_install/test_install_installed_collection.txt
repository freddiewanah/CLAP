def run(self):
    super(GalaxyCLI, self).run()
    self.galaxy = Galaxy()

    def server_config_def(section, key, required, option_type):
        config_def = {'description': 'The %s of the %s Galaxy server' % (key, section), 'ini': [{'section': 'galaxy_server.%s' % section, 'key': key}], 'env': [{'name': 'ANSIBLE_GALAXY_SERVER_%s_%s' % (section.upper(), key.upper())}], 'required': required, 'type': option_type}
        if key in SERVER_ADDITIONAL:
            config_def.update(SERVER_ADDITIONAL[key])
        return config_def
    galaxy_options = {}
    for optional_key in ['clear_response_cache', 'no_cache', 'timeout']:
        if optional_key in context.CLIARGS:
            galaxy_options[optional_key] = context.CLIARGS[optional_key]
    config_servers = []
    server_list = [s for s in C.GALAXY_SERVER_LIST or [] if s]
    for (server_priority, server_key) in enumerate(server_list, start=1):
        config_dict = dict(((k, server_config_def(server_key, k, req, ensure_type)) for (k, req, ensure_type) in SERVER_DEF))
        defs = AnsibleLoader(yaml_dump(config_dict)).get_single_data()
        C.config.initialize_plugin_configuration_definitions('galaxy_server', server_key, defs)
        server_options = C.config.get_plugin_options('galaxy_server', server_key)
        auth_url = server_options.pop('auth_url')
        client_id = server_options.pop('client_id')
        token_val = server_options['token'] or NoTokenSentinel
        username = server_options['username']
        v3 = server_options.pop('v3')
        if server_options['validate_certs'] is None:
            server_options['validate_certs'] = context.CLIARGS['resolved_validate_certs']
        validate_certs = server_options['validate_certs']
        if v3:
            server_options['available_api_versions'] = {'v3': '/v3'}
        server_options['token'] = None
        if username:
            server_options['token'] = BasicAuthToken(username, server_options['password'])
        elif token_val:
            if auth_url:
                server_options['token'] = KeycloakToken(access_token=token_val, auth_url=auth_url, validate_certs=validate_certs, client_id=client_id)
            else:
                server_options['token'] = GalaxyToken(token=token_val)
        server_options.update(galaxy_options)
        config_servers.append(GalaxyAPI(self.galaxy, server_key, priority=server_priority, **server_options))
    cmd_server = context.CLIARGS['api_server']
    cmd_token = GalaxyToken(token=context.CLIARGS['api_key'])
    validate_certs = context.CLIARGS['resolved_validate_certs']
    if cmd_server:
        config_server = next((s for s in config_servers if s.name == cmd_server), None)
        if config_server:
            self.api_servers.append(config_server)
        else:
            self.api_servers.append(GalaxyAPI(self.galaxy, 'cmd_arg', cmd_server, token=cmd_token, priority=len(config_servers) + 1, validate_certs=validate_certs, **galaxy_options))
    else:
        self.api_servers = config_servers
    if len(self.api_servers) == 0:
        self.api_servers.append(GalaxyAPI(self.galaxy, 'default', C.GALAXY_SERVER, token=cmd_token, priority=0, validate_certs=validate_certs, **galaxy_options))
    self.lazy_role_api = RoleDistributionServer(None, self.api_servers)
    return context.CLIARGS['func']()

----------

def test_install_installed_collection(monkeypatch, tmp_path_factory, galaxy_server):
    mock_installed_collections = MagicMock(return_value=[Candidate('namespace.collection', '1.2.3', None, 'dir', None)])
    monkeypatch.setattr(collection, 'find_existing_collections', mock_installed_collections)
    test_dir = to_text(tmp_path_factory.mktemp('test-ÅÑŚÌβŁÈ Collections'))
    concrete_artifact_cm = collection.concrete_artifact_manager.ConcreteArtifactsManager(test_dir, validate_certs=False)
    mock_display = MagicMock()
    monkeypatch.setattr(Display, 'display', mock_display)
    mock_get_info = MagicMock()
    mock_get_info.return_value = api.CollectionVersionMetadata('namespace', 'collection', '1.2.3', None, None, {}, None, None)
    monkeypatch.setattr(galaxy_server, 'get_collection_version_metadata', mock_get_info)
    mock_get_versions = MagicMock(return_value=['1.2.3', '1.3.0'])
    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)
    cli = GalaxyCLI(args=['ansible-galaxy', 'collection', 'install', 'namespace.collection'])
    cli.run()
    expected = 'Nothing to do. All requested collections are already installed. If you want to reinstall them, consider using `--force`.'
    assert mock_display.mock_calls[1][1][0] == expected

----------



Test Class Name: RequirementCandidates