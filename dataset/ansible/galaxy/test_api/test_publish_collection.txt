@g_connect(['v2', 'v3'])
def publish_collection(self, collection_path):
    """
        Publishes a collection to a Galaxy server and returns the import task URI.

        :param collection_path: The path to the collection tarball to publish.
        :return: The import task URI that contains the import results.
        """
    display.display("Publishing collection artifact '%s' to %s %s" % (collection_path, self.name, self.api_server))
    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')
    if not os.path.exists(b_collection_path):
        raise AnsibleError("The collection path specified '%s' does not exist." % to_native(collection_path))
    elif not tarfile.is_tarfile(b_collection_path):
        raise AnsibleError("The collection path specified '%s' is not a tarball, use 'ansible-galaxy collection build' to create a proper release artifact." % to_native(collection_path))
    with open(b_collection_path, 'rb') as collection_tar:
        sha256 = secure_hash_s(collection_tar.read(), hash_func=hashlib.sha256)
    (content_type, b_form_data) = prepare_multipart({'sha256': sha256, 'file': {'filename': b_collection_path, 'mime_type': 'application/octet-stream'}})
    headers = {'Content-type': content_type, 'Content-length': len(b_form_data)}
    if 'v3' in self.available_api_versions:
        n_url = _urljoin(self.api_server, self.available_api_versions['v3'], 'artifacts', 'collections') + '/'
    else:
        n_url = _urljoin(self.api_server, self.available_api_versions['v2'], 'collections') + '/'
    resp = self._call_galaxy(n_url, args=b_form_data, headers=headers, method='POST', auth_required=True, error_context_msg='Error when publishing collection to %s (%s)' % (self.name, self.api_server))
    return resp['task']

----------

@pytest.mark.parametrize('api_version, collection_url', [('v2', 'collections'), ('v3', 'artifacts/collections')])
def test_publish_collection(api_version, collection_url, collection_artifact, monkeypatch):
    api = get_test_galaxy_api('https://galaxy.ansible.com/api/', api_version)
    mock_call = MagicMock()
    mock_call.return_value = {'task': 'http://task.url/'}
    monkeypatch.setattr(api, '_call_galaxy', mock_call)
    actual = api.publish_collection(collection_artifact)
    assert actual == 'http://task.url/'
    assert mock_call.call_count == 1
    assert mock_call.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/%s/%s/' % (api_version, collection_url)
    assert mock_call.mock_calls[0][2]['headers']['Content-length'] == len(mock_call.mock_calls[0][2]['args'])
    assert mock_call.mock_calls[0][2]['headers']['Content-type'].startswith('multipart/form-data; boundary=')
    assert mock_call.mock_calls[0][2]['args'].startswith(b'--')
    assert mock_call.mock_calls[0][2]['method'] == 'POST'
    assert mock_call.mock_calls[0][2]['auth_required'] is True

----------



Test Class Name: default