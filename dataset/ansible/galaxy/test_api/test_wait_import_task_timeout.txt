@g_connect(['v2', 'v3'])
def wait_import_task(self, task_id, timeout=0):
    """
        Waits until the import process on the Galaxy server has completed or the timeout is reached.

        :param task_id: The id of the import task to wait for. This can be parsed out of the return
            value for GalaxyAPI.publish_collection.
        :param timeout: The timeout in seconds, 0 is no timeout.
        """
    state = 'waiting'
    data = None
    if 'v3' in self.available_api_versions:
        full_url = _urljoin(self.api_server, self.available_api_versions['v3'], 'imports/collections', task_id, '/')
    else:
        full_url = _urljoin(self.api_server, self.available_api_versions['v2'], 'collection-imports', task_id, '/')
    display.display('Waiting until Galaxy import task %s has completed' % full_url)
    start = time.time()
    wait = 2
    while timeout == 0 or time.time() - start < timeout:
        try:
            data = self._call_galaxy(full_url, method='GET', auth_required=True, error_context_msg='Error when getting import task results at %s' % full_url)
        except GalaxyError as e:
            if e.http_code != 404:
                raise
            display.vvv('Galaxy import process has not started, wait %s seconds before trying again' % wait)
            time.sleep(wait)
            continue
        state = data.get('state', 'waiting')
        if data.get('finished_at', None):
            break
        display.vvv('Galaxy import process has a status of %s, wait %d seconds before trying again' % (state, wait))
        time.sleep(wait)
        wait = min(30, wait * 1.5)
    if state == 'waiting':
        raise AnsibleError("Timeout while waiting for the Galaxy import process to finish, check progress at '%s'" % to_native(full_url))
    for message in data.get('messages', []):
        level = message['level']
        if level.lower() == 'error':
            display.error('Galaxy import error message: %s' % message['message'])
        elif level.lower() == 'warning':
            display.warning('Galaxy import warning message: %s' % message['message'])
        else:
            display.vvv('Galaxy import message: %s - %s' % (level, message['message']))
    if state == 'failed':
        code = to_native(data['error'].get('code', 'UNKNOWN'))
        description = to_native(data['error'].get('description', 'Unknown error, see %s for more details' % full_url))
        raise AnsibleError('Galaxy import process failed: %s (Code: %s)' % (description, code))

----------

@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'), '1234', 'https://galaxy.server.com/api/v2/collection-imports/1234/'), ('https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'), '1234', 'https://galaxy.server.com/api/automation-hub/v3/imports/collections/1234/')])
def test_wait_import_task_timeout(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
    if token_ins:
        mock_token_get = MagicMock()
        mock_token_get.return_value = 'my token'
        monkeypatch.setattr(token_ins, 'get', mock_token_get)

    def return_response(*args, **kwargs):
        return StringIO(u'{"state":"waiting"}')
    mock_open = MagicMock()
    mock_open.side_effect = return_response
    monkeypatch.setattr(galaxy_api, 'open_url', mock_open)
    mock_display = MagicMock()
    monkeypatch.setattr(Display, 'display', mock_display)
    mock_vvv = MagicMock()
    monkeypatch.setattr(Display, 'vvv', mock_vvv)
    monkeypatch.setattr(time, 'sleep', MagicMock())
    expected = "Timeout while waiting for the Galaxy import process to finish, check progress at '%s'" % full_import_uri
    with pytest.raises(AnsibleError, match=expected):
        api.wait_import_task(import_uri, 1)
    assert mock_open.call_count > 1
    assert mock_open.mock_calls[0][1][0] == full_import_uri
    assert mock_open.mock_calls[0][2]['headers']['Authorization'] == '%s my token' % token_type
    assert mock_open.mock_calls[1][1][0] == full_import_uri
    assert mock_open.mock_calls[1][2]['headers']['Authorization'] == '%s my token' % token_type
    assert mock_display.call_count == 1
    assert mock_display.mock_calls[0][1][0] == 'Waiting until Galaxy import task %s has completed' % full_import_uri
    assert mock_vvv.call_count > 9

----------



Test Class Name: default