def get_next_task_for_host(self, host, peek=False):
    display.debug('getting the next task for host %s' % host.name)
    s = self.get_host_state(host)
    task = None
    if s.run_state == IteratingStates.COMPLETE:
        display.debug('host %s is done iterating, returning' % host.name)
        return (s, None)
    (s, task) = self._get_next_task_from_state(s, host=host)
    if not peek:
        self.set_state_for_host(host.name, s)
    display.debug('done getting next task for host %s' % host.name)
    display.debug(' ^ task is: %s' % task)
    display.debug(' ^ state is: %s' % s)
    return (s, task)

----------

def test_play_iterator_add_tasks(self):
    fake_loader = DictDataLoader({'test_play.yml': '\n            - hosts: all\n              gather_facts: no\n              tasks:\n              - debug: msg="dummy task"\n            '})
    mock_var_manager = MagicMock()
    mock_var_manager._fact_cache = dict()
    mock_var_manager.get_vars.return_value = dict()
    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)
    hosts = []
    for i in range(0, 10):
        host = MagicMock()
        host.name = host.get_name.return_value = 'host%02d' % i
        hosts.append(host)
    inventory = MagicMock()
    inventory.get_hosts.return_value = hosts
    inventory.filter_hosts.return_value = hosts
    play_context = PlayContext(play=p._entries[0])
    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())
    s = HostState(blocks=[0, 1, 2])
    itr._insert_tasks_into_state = MagicMock(return_value=s)
    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])
    self.assertEqual(itr._host_states[hosts[0].name], s)
    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())
    (_, task) = itr.get_next_task_for_host(hosts[0])
    while task and task.action != 'debug':
        (_, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')
    s = itr.get_host_state(hosts[0])
    s_copy = s.copy()
    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])
    self.assertEqual(res_state, s_copy)
    s_copy.fail_state = FailedStates.TASKS
    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])
    self.assertEqual(res_state, s_copy)
    mock_task = MagicMock()
    s_copy.run_state = IteratingStates.RESCUE
    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])
    self.assertEqual(res_state, s_copy)
    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)
    itr.set_state_for_host(hosts[0].name, res_state)
    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)
    self.assertEqual(next_task, mock_task)
    itr.set_state_for_host(hosts[0].name, s)
    s_copy = s.copy()
    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])

----------



Test Class Name: TestPlayIterator