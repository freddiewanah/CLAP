def get_failed_hosts(self):
    return dict(((host, True) for (host, state) in self._host_states.items() if self._check_failed_state(state)))

----------

@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)
def test_play_iterator(self):
    fake_loader = DictDataLoader({'test_play.yml': '\n            - hosts: all\n              gather_facts: false\n              roles:\n              - test_role\n              pre_tasks:\n              - debug: msg="this is a pre_task"\n              tasks:\n              - debug: msg="this is a regular task"\n              - block:\n                - debug: msg="this is a block task"\n                - block:\n                  - debug: msg="this is a sub-block in a block"\n                rescue:\n                - debug: msg="this is a rescue task"\n                - block:\n                  - debug: msg="this is a sub-block in a rescue"\n                always:\n                - debug: msg="this is an always task"\n                - block:\n                  - debug: msg="this is a sub-block in an always"\n              post_tasks:\n              - debug: msg="this is a post_task"\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\n            - name: role task\n              debug: msg="this is a role task"\n            - block:\n              - name: role block task\n                debug: msg="inside block in role"\n              always:\n              - name: role always task\n                debug: msg="always task in block in role"\n            - include: foo.yml\n            - name: role task after include\n              debug: msg="after include in role"\n            - block:\n              - name: starting role nested block 1\n                debug:\n              - block:\n                - name: role nested block 1 task 1\n                  debug:\n                - name: role nested block 1 task 2\n                  debug:\n                - name: role nested block 1 task 3\n                  debug:\n              - name: end of role nested block 1\n                debug:\n              - name: starting role nested block 2\n                debug:\n              - block:\n                - name: role nested block 2 task 1\n                  debug:\n                - name: role nested block 2 task 2\n                  debug:\n                - name: role nested block 2 task 3\n                  debug:\n              - name: end of role nested block 2\n                debug:\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\n            - name: role included task\n              debug: msg="this is task in an include from a role"\n            '})
    mock_var_manager = MagicMock()
    mock_var_manager._fact_cache = dict()
    mock_var_manager.get_vars.return_value = dict()
    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)
    hosts = []
    for i in range(0, 10):
        host = MagicMock()
        host.name = host.get_name.return_value = 'host%02d' % i
        hosts.append(host)
    mock_var_manager._fact_cache['host00'] = dict()
    inventory = MagicMock()
    inventory.get_hosts.return_value = hosts
    inventory.filter_hosts.return_value = hosts
    play_context = PlayContext(play=p._entries[0])
    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'meta')
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.name, 'role task')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role block task')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role always task')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role task after include')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'starting role nested block 1')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 1 task 1')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 1 task 2')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 1 task 3')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'end of role nested block 1')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'starting role nested block 2')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 2 task 1')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 2 task 2')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'role nested block 2 task 3')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.name, 'end of role nested block 2')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'meta')
    self.assertIsNotNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertIsNone(task._role)
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is a block task'))
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))
    itr.mark_host_failed(hosts[0])
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is a rescue task'))
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is an always task'))
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'meta')
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'debug')
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNotNone(task)
    self.assertEqual(task.action, 'meta')
    (host_state, task) = itr.get_next_task_for_host(hosts[0])
    self.assertIsNone(task)
    failed_hosts = itr.get_failed_hosts()
    self.assertNotIn(hosts[0], failed_hosts)

----------



Test Class Name: TestPlayIterator