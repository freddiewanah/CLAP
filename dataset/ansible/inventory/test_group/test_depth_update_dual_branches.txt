def add_child_group(self, group):
    added = False
    if self == group:
        raise Exception("can't add group to itself")
    if group not in self.child_groups:
        start_ancestors = group.get_ancestors()
        new_ancestors = self.get_ancestors()
        if group in new_ancestors:
            raise AnsibleError("Adding group '%s' as child to '%s' creates a recursive dependency loop." % (to_native(group.name), to_native(self.name)))
        new_ancestors.add(self)
        new_ancestors.difference_update(start_ancestors)
        added = True
        self.child_groups.append(group)
        group.depth = max([self.depth + 1, group.depth])
        group._check_children_depth()
        if self.name not in [g.name for g in group.parent_groups]:
            group.parent_groups.append(self)
            for h in group.get_hosts():
                h.populate_ancestors(additions=new_ancestors)
        self.clear_hosts_cache()
    return added

----------

def test_depth_update_dual_branches(self):
    alpha = Group('alpha')
    A = Group('A')
    alpha.add_child_group(A)
    B = Group('B')
    A.add_child_group(B)
    Z = Group('Z')
    alpha.add_child_group(Z)
    beta = Group('beta')
    B.add_child_group(beta)
    Z.add_child_group(beta)
    self.assertEqual(alpha.depth, 0)
    self.assertEqual(beta.depth, 3)
    omega = Group('omega')
    omega.add_child_group(alpha)
    self.assertEqual(B.depth, 3)
    self.assertEqual(beta.depth, 4)

----------



Test Class Name: TestGroup