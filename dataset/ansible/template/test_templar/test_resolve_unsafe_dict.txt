def wrap_var(v):
    if v is None or isinstance(v, AnsibleUnsafe):
        return v
    if isinstance(v, Mapping):
        v = _wrap_dict(v)
    elif isinstance(v, Set):
        v = _wrap_set(v)
    elif is_sequence(v):
        v = _wrap_sequence(v)
    elif isinstance(v, NativeJinjaText):
        v = NativeJinjaUnsafeText(v)
    elif isinstance(v, binary_type):
        v = AnsibleUnsafeBytes(v)
    elif isinstance(v, text_type):
        v = AnsibleUnsafeText(v)
    return v

----------

def test_resolve_unsafe_dict(self):
    context = self._context(variables={'some_unsafe_key': {'an_unsafe_dict': wrap_var('some unsafe string 1')}})
    res = context.resolve('some_unsafe_key')
    self.assertTrue(self.is_unsafe(res['an_unsafe_dict']), 'return of AnsibleContext.resolve (%s) was expected to be marked unsafe but was not' % res['an_unsafe_dict'])

----------

def _context(self, variables=None):
    variables = variables or {}
    env = AnsibleEnvironment()
    context = AnsibleContext(env, parent={}, name='some_context', blocks={})
    for (key, value) in variables.items():
        context.vars[key] = value
    return context

Test Class Name: TestAnsibleContext