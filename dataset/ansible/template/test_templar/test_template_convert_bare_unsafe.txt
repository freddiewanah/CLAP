def template(self, variable, convert_bare=False, preserve_trailing_newlines=True, escape_backslashes=True, fail_on_undefined=None, overrides=None, convert_data=True, static_vars=None, cache=None, disable_lookups=False):
    """
        Templates (possibly recursively) any given data as input. If convert_bare is
        set to True, the given data will be wrapped as a jinja2 variable ('{{foo}}')
        before being sent through the template engine.
        """
    static_vars = [] if static_vars is None else static_vars
    if cache is not None:
        display.deprecated('The `cache` option to `Templar.template` is no longer functional, and will be removed in a future release.', version='2.18')
    if hasattr(variable, '__UNSAFE__'):
        return variable
    if fail_on_undefined is None:
        fail_on_undefined = self._fail_on_undefined_errors
    if convert_bare:
        variable = self._convert_bare_variable(variable)
    if isinstance(variable, string_types):
        if not self.is_possibly_template(variable):
            return variable
        only_one = self.SINGLE_VAR.match(variable)
        if only_one:
            var_name = only_one.group(1)
            if var_name in self._available_variables:
                resolved_val = self._available_variables[var_name]
                if isinstance(resolved_val, NON_TEMPLATED_TYPES):
                    return resolved_val
                elif resolved_val is None:
                    return C.DEFAULT_NULL_REPRESENTATION
        result = self.do_template(variable, preserve_trailing_newlines=preserve_trailing_newlines, escape_backslashes=escape_backslashes, fail_on_undefined=fail_on_undefined, overrides=overrides, disable_lookups=disable_lookups, convert_data=convert_data)
        return result
    elif is_sequence(variable):
        return [self.template(v, preserve_trailing_newlines=preserve_trailing_newlines, fail_on_undefined=fail_on_undefined, overrides=overrides, disable_lookups=disable_lookups) for v in variable]
    elif isinstance(variable, Mapping):
        d = {}
        for k in variable.keys():
            if k not in static_vars:
                d[k] = self.template(variable[k], preserve_trailing_newlines=preserve_trailing_newlines, fail_on_undefined=fail_on_undefined, overrides=overrides, disable_lookups=disable_lookups)
            else:
                d[k] = variable[k]
        return d
    else:
        return variable

----------

def test_template_convert_bare_unsafe(self):
    res = self.templar.template('some_unsafe_var', convert_bare=True)
    self.assertEqual(res, 'unsafe_blip')
    self.assertTrue(self.is_unsafe(res), 'returned value from template.template (%s) is not marked unsafe' % res)

----------



Test Class Name: TestTemplarTemplate