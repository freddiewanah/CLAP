def can_handle_archive(self):
    missing = []
    for b in self.binaries:
        try:
            setattr(self, b[1], get_bin_path(b[0]))
        except ValueError:
            missing.append(b[0])
    if missing:
        return (False, "Unable to find required '{missing}' binary in the path.".format(missing="' or '".join(missing)))
    cmd = [self.cmd_path, '-l', self.src]
    (rc, out, err) = self.module.run_command(cmd)
    if rc == 0:
        return (True, None)
    self.module.debug(err)
    return (False, 'Command "%s" could not handle archive: %s' % (self.cmd_path, err))

----------

def test_no_tar_binary(self, mocker, fake_ansible_module):
    mocker.patch('ansible.modules.unarchive.get_bin_path', side_effect=ValueError)
    fake_ansible_module.params = {'extra_opts': '', 'exclude': '', 'include': '', 'io_buffer_size': 65536}
    fake_ansible_module.check_mode = False
    t = TgzArchive(src='', b_dest='', file_args='', module=fake_ansible_module)
    (can_handle, reason) = t.can_handle_archive()
    assert can_handle is False
    assert 'Unable to find required' in reason
    assert t.cmd_path is None
    assert t.tar_type is None

----------



Test Class Name: TestCaseTgzArchive