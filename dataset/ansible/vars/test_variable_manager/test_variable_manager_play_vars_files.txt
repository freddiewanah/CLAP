def get_vars(self, play=None, host=None, task=None, include_hostvars=True, include_delegate_to=True, use_cache=True, _hosts=None, _hosts_all=None, stage='task'):
    """
        Returns the variables, with optional "context" given via the parameters
        for the play, host, and task (which could possibly result in different
        sets of variables being returned due to the additional context).

        The order of precedence is:
        - play->roles->get_default_vars (if there is a play context)
        - group_vars_files[host] (if there is a host context)
        - host_vars_files[host] (if there is a host context)
        - host->get_vars (if there is a host context)
        - fact_cache[host] (if there is a host context)
        - play vars (if there is a play context)
        - play vars_files (if there's no host context, ignore
          file names that cannot be templated)
        - task->get_vars (if there is a task context)
        - vars_cache[host] (if there is a host context)
        - extra vars

        ``_hosts`` and ``_hosts_all`` should be considered private args, with only internal trusted callers relying
        on the functionality they provide. These arguments may be removed at a later date without a deprecation
        period and without warning.
        """
    display.debug('in VariableManager get_vars()')
    all_vars = dict()
    magic_variables = self._get_magic_variables(play=play, host=host, task=task, include_hostvars=include_hostvars, include_delegate_to=include_delegate_to, _hosts=_hosts, _hosts_all=_hosts_all)
    _vars_sources = {}

    def _combine_and_track(data, new_data, source):
        """
            Wrapper function to update var sources dict and call combine_vars()

            See notes in the VarsWithSources docstring for caveats and limitations of the source tracking
            """
        if C.DEFAULT_DEBUG:
            for key in new_data:
                _vars_sources[key] = source
        return combine_vars(data, new_data)
    basedirs = []
    if self.safe_basedir:
        basedirs = [self._loader.get_basedir()]
    if play:
        if not C.DEFAULT_PRIVATE_ROLE_VARS:
            for role in play.get_roles():
                if not role.from_include or role.public or (role.static and role._completed.get(to_text(host), False)):
                    all_vars = _combine_and_track(all_vars, role.get_default_vars(), "role '%s' defaults" % role.name)
    if task:
        if C.PLAYBOOK_VARS_ROOT == 'all':
            basedirs = task.get_search_path()
        elif C.PLAYBOOK_VARS_ROOT in ('bottom', 'playbook_dir'):
            basedirs = [task.get_search_path()[0]]
        elif C.PLAYBOOK_VARS_ROOT != 'top':
            raise AnsibleError('Unknown playbook vars logic: %s' % C.PLAYBOOK_VARS_ROOT)
        if task._role is not None and (play or task.action in C._ACTION_INCLUDE_ROLE):
            all_vars = _combine_and_track(all_vars, task._role.get_default_vars(dep_chain=task.get_dep_chain()), "role '%s' defaults" % task._role.name)
    if host:
        all_group = self._inventory.groups.get('all')
        host_groups = sort_groups([g for g in host.get_groups() if g.name not in ['all']])

        def _get_plugin_vars(plugin, path, entities):
            data = {}
            try:
                data = plugin.get_vars(self._loader, path, entities)
            except AttributeError:
                try:
                    for entity in entities:
                        if isinstance(entity, Host):
                            data |= plugin.get_host_vars(entity.name)
                        else:
                            data |= plugin.get_group_vars(entity.name)
                except AttributeError:
                    if hasattr(plugin, 'run'):
                        raise AnsibleError('Cannot use v1 type vars plugin %s from %s' % (plugin._load_name, plugin._original_path))
                    else:
                        raise AnsibleError('Invalid vars plugin %s from %s' % (plugin._load_name, plugin._original_path))
            return data

        def _plugins_inventory(entities):
            """ merges all entities by inventory source """
            return get_vars_from_inventory_sources(self._loader, self._inventory._sources, entities, stage)

        def _plugins_play(entities):
            """ merges all entities adjacent to play """
            data = {}
            for path in basedirs:
                data = _combine_and_track(data, get_vars_from_path(self._loader, path, entities, stage), "path '%s'" % path)
            return data

        def all_inventory():
            return all_group.get_vars()

        def all_plugins_inventory():
            return _plugins_inventory([all_group])

        def all_plugins_play():
            return _plugins_play([all_group])

        def groups_inventory():
            """ gets group vars from inventory """
            return get_group_vars(host_groups)

        def groups_plugins_inventory():
            """ gets plugin sources from inventory for groups """
            return _plugins_inventory(host_groups)

        def groups_plugins_play():
            """ gets plugin sources from play for groups """
            return _plugins_play(host_groups)

        def plugins_by_groups():
            """
                    merges all plugin sources by group,
                    This should be used instead, NOT in combination with the other groups_plugins* functions
                """
            data = {}
            for group in host_groups:
                data[group] = _combine_and_track(data[group], _plugins_inventory(group), "inventory group_vars for '%s'" % group)
                data[group] = _combine_and_track(data[group], _plugins_play(group), "playbook group_vars for '%s'" % group)
            return data
        for entry in C.VARIABLE_PRECEDENCE:
            if entry in self._ALLOWED:
                display.debug('Calling %s to load vars for %s' % (entry, host.name))
                all_vars = _combine_and_track(all_vars, locals()[entry](), "group vars, precedence entry '%s'" % entry)
            else:
                display.warning('Ignoring unknown variable precedence entry: %s' % entry)
        all_vars = _combine_and_track(all_vars, host.get_vars(), "host vars for '%s'" % host)
        all_vars = _combine_and_track(all_vars, _plugins_inventory([host]), "inventory host_vars for '%s'" % host)
        all_vars = _combine_and_track(all_vars, _plugins_play([host]), "playbook host_vars for '%s'" % host)
        try:
            facts = wrap_var(self._fact_cache.get(host.name, {}))
            all_vars |= namespace_facts(facts)
            if C.INJECT_FACTS_AS_VARS:
                all_vars = _combine_and_track(all_vars, wrap_var(clean_facts(facts)), 'facts')
            else:
                all_vars = _combine_and_track(all_vars, wrap_var({'ansible_local': facts.get('ansible_local', {})}), 'facts')
        except KeyError:
            pass
    if play:
        all_vars = _combine_and_track(all_vars, play.get_vars(), 'play vars')
        vars_files = play.get_vars_files()
        try:
            for vars_file_item in vars_files:
                temp_vars = combine_vars(all_vars, self._extra_vars)
                temp_vars = combine_vars(temp_vars, magic_variables)
                templar = Templar(loader=self._loader, variables=temp_vars)
                vars_file_list = vars_file_item
                if not isinstance(vars_file_list, list):
                    vars_file_list = [vars_file_list]
                try:
                    for vars_file in vars_file_list:
                        vars_file = templar.template(vars_file)
                        if not isinstance(vars_file, Sequence):
                            raise AnsibleError('Invalid vars_files entry found: %r\nvars_files entries should be either a string type or a list of string types after template expansion' % vars_file)
                        try:
                            play_search_stack = play.get_search_path()
                            found_file = real_file = self._loader.path_dwim_relative_stack(play_search_stack, 'vars', vars_file)
                            data = preprocess_vars(self._loader.load_from_file(found_file, unsafe=True, cache=False))
                            if data is not None:
                                for item in data:
                                    all_vars = _combine_and_track(all_vars, item, "play vars_files from '%s'" % vars_file)
                            break
                        except AnsibleFileNotFound:
                            continue
                        except AnsibleParserError:
                            raise
                    else:
                        if include_delegate_to and host:
                            raise AnsibleFileNotFound('vars file %s was not found' % vars_file_item)
                except (UndefinedError, AnsibleUndefinedVariable):
                    if host is not None and self._fact_cache.get(host.name, dict()).get('module_setup') and (task is not None):
                        raise AnsibleUndefinedVariable("an undefined variable was found when attempting to template the vars_files item '%s'" % vars_file_item, obj=vars_file_item)
                    else:
                        display.vvv("skipping vars_file '%s' due to an undefined variable" % vars_file_item)
                        continue
                display.vvv("Read vars_file '%s'" % vars_file_item)
        except TypeError:
            raise AnsibleParserError("Error while reading vars files - please supply a list of file names. Got '%s' of type %s" % (vars_files, type(vars_files)))
        if not C.DEFAULT_PRIVATE_ROLE_VARS:
            for role in play.get_roles():
                if not role.from_include or role.public or (role.static and role._completed.get(to_text(host), False)):
                    all_vars = _combine_and_track(all_vars, role.get_vars(include_params=False, only_exports=True), "role '%s' exported vars" % role.name)
    if task:
        if task._role:
            all_vars = _combine_and_track(all_vars, task._role.get_vars(task.get_dep_chain(), include_params=True, only_exports=False), "role '%s' all vars" % task._role.name)
        all_vars = _combine_and_track(all_vars, task.get_vars(), 'task vars')
    if host:
        all_vars = _combine_and_track(all_vars, self._vars_cache.get(host.get_name(), dict()), 'include_vars')
        all_vars = _combine_and_track(all_vars, self._nonpersistent_fact_cache.get(host.name, dict()), 'set_fact')
    if task:
        all_vars = _combine_and_track(all_vars, task.get_include_params(), 'include params')
    all_vars = _combine_and_track(all_vars, self._extra_vars, 'extra vars')
    all_vars = _combine_and_track(all_vars, magic_variables, 'magic vars')
    if task:
        all_vars['environment'] = task.environment
    if task or play:
        all_vars['vars'] = all_vars.copy()
    if task and host and (task.delegate_to is not None) and include_delegate_to:
        (all_vars['ansible_delegated_vars'], all_vars['_ansible_loop_cache']) = self._get_delegated_vars(play, task, all_vars)
    display.debug('done with get_vars()')
    if C.DEFAULT_DEBUG:
        return VarsWithSources.new_vars_with_sources(all_vars, _vars_sources)
    else:
        return all_vars

----------

def test_variable_manager_play_vars_files(self):
    fake_loader = DictDataLoader({__file__: '\n               foo: bar\n            '})
    mock_play = MagicMock()
    mock_play.get_vars.return_value = dict()
    mock_play.get_roles.return_value = []
    mock_play.get_vars_files.return_value = [__file__]
    mock_inventory = MagicMock()
    v = VariableManager(inventory=mock_inventory, loader=fake_loader)
    self.assertEqual(v.get_vars(play=mock_play, use_cache=False).get('foo'), 'bar')

----------



Test Class Name: TestVariableManager