@abstractmethod
def run(self):
    """Run the ansible command

        Subclasses must implement this method.  It does the actual work of
        running an Ansible command.
        """
    self.parse()
    cli_collections_path = context.CLIARGS.get('collections_path') or []
    if not is_sequence(cli_collections_path):
        cli_collections_path = [cli_collections_path]
    init_plugin_loader(cli_collections_path)
    display.vv(to_text(opt_help.version(self.parser.prog)))
    if C.CONFIG_FILE:
        display.v(u'Using %s as config file' % to_text(C.CONFIG_FILE))
    else:
        display.v(u'No config file found; using defaults')
    for deprecated in C.config.DEPRECATED:
        name = deprecated[0]
        why = deprecated[1]['why']
        if 'alternatives' in deprecated[1]:
            alt = ', use %s instead' % deprecated[1]['alternatives']
        else:
            alt = ''
        ver = deprecated[1].get('version')
        date = deprecated[1].get('date')
        collection_name = deprecated[1].get('collection_name')
        display.deprecated('%s option, %s%s' % (name, why, alt), version=ver, date=date, collection_name=collection_name)

----------

def test_ansible_version(capsys):
    adhoc_cli = AdHocCLI(args=['/bin/ansible', '--version'])
    with pytest.raises(SystemExit):
        adhoc_cli.run()
    version = capsys.readouterr()
    version_lines = version.out.splitlines()
    assert len(version_lines) == 9, 'Incorrect number of lines in "ansible --version" output'
    assert re.match('ansible \\[core [0-9.a-z]+\\]', version_lines[0]), 'Incorrect ansible version line in "ansible --version" output'
    assert re.match('  config file = .*$', version_lines[1]), 'Incorrect config file line in "ansible --version" output'
    assert re.match('  configured module search path = .*$', version_lines[2]), 'Incorrect module search path in "ansible --version" output'
    assert re.match('  ansible python module location = .*$', version_lines[3]), 'Incorrect python module location in "ansible --version" output'
    assert re.match('  ansible collection location = .*$', version_lines[4]), 'Incorrect collection location in "ansible --version" output'
    assert re.match('  executable location = .*$', version_lines[5]), 'Incorrect executable locaction in "ansible --version" output'
    assert re.match('  python version = .*$', version_lines[6]), 'Incorrect python version in "ansible --version" output'
    assert re.match('  jinja version = .*$', version_lines[7]), 'Incorrect jinja version in "ansible --version" output'
    assert re.match('  libyaml = .*$', version_lines[8]), 'Missing libyaml in "ansible --version" output'

----------



Test Class Name: default