def write(data):
    if not isinstance(data, basestring):
        data = str(data)
    if isinstance(fp, file) and isinstance(data, unicode) and (fp.encoding is not None):
        errors = getattr(fp, 'errors', None)
        if errors is None:
            errors = 'strict'
        data = data.encode(fp.encoding, errors)
    fp.write(data)

----------

@pytest.mark.parametrize('cli_args, expected', [(['ansible-vault', 'view', 'vault.txt'], 0), (['ansible-vault', 'view', 'vault.txt', '-vvv'], 3), (['ansible-vault', 'view', 'vault.txt', '-vv'], 2)])
def test_verbosity_arguments(cli_args, expected, tmp_path_factory, monkeypatch):
    test_dir = to_text(tmp_path_factory.mktemp('test-ansible-vault'))
    pass_file = os.path.join(test_dir, 'pass.txt')
    with open(pass_file, 'w') as pass_fd:
        pass_fd.write('password')
    cli_args.extend(['--vault-id', pass_file])
    for func_name in [f for f in dir(VaultCLI) if f.startswith('execute_')]:
        monkeypatch.setattr(VaultCLI, func_name, MagicMock())
    cli = VaultCLI(args=cli_args)
    cli.run()
    assert context.CLIARGS['verbosity'] == expected

----------



Test Class Name: TestVaultCli