def parse(self):
    """Parse the command line args

        This method parses the command line arguments.  It uses the parser
        stored in the self.parser attribute and saves the args and options in
        context.CLIARGS.

        Subclasses need to implement two helper methods, init_parser() and post_process_args() which
        are called from this function before and after parsing the arguments.
        """
    self.init_parser()
    if HAS_ARGCOMPLETE:
        argcomplete.autocomplete(self.parser)
    try:
        options = self.parser.parse_args(self.args[1:])
    except SystemExit as ex:
        if ex.code != 0:
            self.parser.exit(status=2, message=' \n%s' % self.parser.format_help())
        raise
    options = self.post_process_args(options)
    context._init_global_context(options)

----------

def test_legacy_modules_list():
    args = ['ansible-doc', '-l', 'ansible.legacy', '-t', 'module']
    obj = DocCLI(args=args)
    obj.parse()
    result = obj._list_plugins('module', module_loader)
    assert len(result) > 0

----------



Test Class Name: default