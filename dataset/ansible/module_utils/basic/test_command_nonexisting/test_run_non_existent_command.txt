def run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None, use_unsafe_shell=False, prompt_regex=None, environ_update=None, umask=None, encoding='utf-8', errors='surrogate_or_strict', expand_user_and_vars=True, pass_fds=None, before_communicate_callback=None, ignore_invalid_cwd=True, handle_exceptions=True):
    """
        Execute a command, returns rc, stdout, and stderr.

        :arg args: is the command to run
            * If args is a list, the command will be run with shell=False.
            * If args is a string and use_unsafe_shell=False it will split args to a list and run with shell=False
            * If args is a string and use_unsafe_shell=True it runs with shell=True.
        :kw check_rc: Whether to call fail_json in case of non zero RC.
            Default False
        :kw close_fds: See documentation for subprocess.Popen(). Default True
        :kw executable: See documentation for subprocess.Popen(). Default None
        :kw data: If given, information to write to the stdin of the command
        :kw binary_data: If False, append a newline to the data.  Default False
        :kw path_prefix: If given, additional path to find the command in.
            This adds to the PATH environment variable so helper commands in
            the same directory can also be found
        :kw cwd: If given, working directory to run the command inside
        :kw use_unsafe_shell: See `args` parameter.  Default False
        :kw prompt_regex: Regex string (not a compiled regex) which can be
            used to detect prompts in the stdout which would otherwise cause
            the execution to hang (especially if no input data is specified)
        :kw environ_update: dictionary to *update* environ variables with
        :kw umask: Umask to be used when running the command. Default None
        :kw encoding: Since we return native strings, on python3 we need to
            know the encoding to use to transform from bytes to text.  If you
            want to always get bytes back, use encoding=None.  The default is
            "utf-8".  This does not affect transformation of strings given as
            args.
        :kw errors: Since we return native strings, on python3 we need to
            transform stdout and stderr from bytes to text.  If the bytes are
            undecodable in the ``encoding`` specified, then use this error
            handler to deal with them.  The default is ``surrogate_or_strict``
            which means that the bytes will be decoded using the
            surrogateescape error handler if available (available on all
            python3 versions we support) otherwise a UnicodeError traceback
            will be raised.  This does not affect transformations of strings
            given as args.
        :kw expand_user_and_vars: When ``use_unsafe_shell=False`` this argument
            dictates whether ``~`` is expanded in paths and environment variables
            are expanded before running the command. When ``True`` a string such as
            ``$SHELL`` will be expanded regardless of escaping. When ``False`` and
            ``use_unsafe_shell=False`` no path or variable expansion will be done.
        :kw pass_fds: When running on Python 3 this argument
            dictates which file descriptors should be passed
            to an underlying ``Popen`` constructor. On Python 2, this will
            set ``close_fds`` to False.
        :kw before_communicate_callback: This function will be called
            after ``Popen`` object will be created
            but before communicating to the process.
            (``Popen`` object will be passed to callback as a first argument)
        :kw ignore_invalid_cwd: This flag indicates whether an invalid ``cwd``
            (non-existent or not a directory) should be ignored or should raise
            an exception.
        :kw handle_exceptions: This flag indicates whether an exception will
            be handled inline and issue a failed_json or if the caller should
            handle it.
        :returns: A 3-tuple of return code (integer), stdout (native string),
            and stderr (native string).  On python2, stdout and stderr are both
            byte strings.  On python3, stdout and stderr are text strings converted
            according to the encoding and errors parameters.  If you want byte
            strings on python3, use encoding=None to turn decoding to text off.
        """
    self._clean = None
    if not isinstance(args, (list, binary_type, text_type)):
        msg = "Argument 'args' to run_command must be list or string"
        self.fail_json(rc=257, cmd=args, msg=msg)
    shell = False
    if use_unsafe_shell:
        if isinstance(args, list):
            args = b' '.join([to_bytes(shlex_quote(x), errors='surrogate_or_strict') for x in args])
        else:
            args = to_bytes(args, errors='surrogate_or_strict')
        if executable:
            executable = to_bytes(executable, errors='surrogate_or_strict')
            args = [executable, b'-c', args]
        elif self._shell not in (None, '/bin/sh'):
            args = [to_bytes(self._shell, errors='surrogate_or_strict'), b'-c', args]
        else:
            shell = True
    else:
        if isinstance(args, (binary_type, text_type)):
            if PY2:
                args = to_bytes(args, errors='surrogate_or_strict')
            elif PY3:
                args = to_text(args, errors='surrogateescape')
            args = shlex.split(args)
        if expand_user_and_vars:
            args = [to_bytes(os.path.expanduser(os.path.expandvars(x)), errors='surrogate_or_strict') for x in args if x is not None]
        else:
            args = [to_bytes(x, errors='surrogate_or_strict') for x in args if x is not None]
    prompt_re = None
    if prompt_regex:
        if isinstance(prompt_regex, text_type):
            if PY3:
                prompt_regex = to_bytes(prompt_regex, errors='surrogateescape')
            elif PY2:
                prompt_regex = to_bytes(prompt_regex, errors='surrogate_or_strict')
        try:
            prompt_re = re.compile(prompt_regex, re.MULTILINE)
        except re.error:
            self.fail_json(msg='invalid prompt regular expression given to run_command')
    rc = 0
    msg = None
    st_in = None
    env = os.environ.copy()
    env.update(self.run_command_environ_update or {})
    env.update(environ_update or {})
    if path_prefix:
        path = env.get('PATH', '')
        if path:
            env['PATH'] = '%s:%s' % (path_prefix, path)
        else:
            env['PATH'] = path_prefix
    if 'PYTHONPATH' in env:
        pypaths = [x for x in env['PYTHONPATH'].split(':') if x and (not x.endswith('/ansible_modlib.zip')) and (not x.endswith('/debug_dir'))]
        if pypaths and any(pypaths):
            env['PYTHONPATH'] = ':'.join(pypaths)
    if data:
        st_in = subprocess.PIPE

    def preexec():
        self._restore_signal_handlers()
        if umask:
            os.umask(umask)
    kwargs = dict(executable=executable, shell=shell, close_fds=close_fds, stdin=st_in, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=preexec, env=env)
    if PY3 and pass_fds:
        kwargs['pass_fds'] = pass_fds
    elif PY2 and pass_fds:
        kwargs['close_fds'] = False
    if cwd:
        cwd = to_bytes(os.path.abspath(os.path.expanduser(cwd)), errors='surrogate_or_strict')
        if os.path.isdir(cwd):
            kwargs['cwd'] = cwd
        elif not ignore_invalid_cwd:
            self.fail_json(msg='Provided cwd is not a valid directory: %s' % cwd)
    try:
        if self._debug:
            self.log('Executing: ' + self._clean_args(args))
        cmd = subprocess.Popen(args, **kwargs)
        if before_communicate_callback:
            before_communicate_callback(cmd)
        stdout = b''
        stderr = b''
        try:
            selector = selectors.DefaultSelector()
        except (IOError, OSError):
            selector = selectors.PollSelector()
        selector.register(cmd.stdout, selectors.EVENT_READ)
        selector.register(cmd.stderr, selectors.EVENT_READ)
        if os.name == 'posix':
            fcntl.fcntl(cmd.stdout.fileno(), fcntl.F_SETFL, fcntl.fcntl(cmd.stdout.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK)
            fcntl.fcntl(cmd.stderr.fileno(), fcntl.F_SETFL, fcntl.fcntl(cmd.stderr.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK)
        if data:
            if not binary_data:
                data += '\n'
            if isinstance(data, text_type):
                data = to_bytes(data)
            cmd.stdin.write(data)
            cmd.stdin.close()
        while True:
            events = selector.select(1)
            for (key, event) in events:
                b_chunk = key.fileobj.read()
                if b_chunk == b(''):
                    selector.unregister(key.fileobj)
                if key.fileobj == cmd.stdout:
                    stdout += b_chunk
                elif key.fileobj == cmd.stderr:
                    stderr += b_chunk
            if prompt_re:
                if prompt_re.search(stdout) and (not data):
                    if encoding:
                        stdout = to_native(stdout, encoding=encoding, errors=errors)
                    return (257, stdout, 'A prompt was encountered while running a command, but no input data was specified')
            if (not events or not selector.get_map()) and cmd.poll() is not None:
                break
            elif not selector.get_map() and cmd.poll() is None:
                cmd.wait()
                break
        cmd.stdout.close()
        cmd.stderr.close()
        selector.close()
        rc = cmd.returncode
    except (OSError, IOError) as e:
        self.log('Error Executing CMD:%s Exception:%s' % (self._clean_args(args), to_native(e)))
        if handle_exceptions:
            self.fail_json(rc=e.errno, stdout=b'', stderr=b'', msg=to_native(e), cmd=self._clean_args(args))
        else:
            raise e
    except Exception as e:
        self.log('Error Executing CMD:%s Exception:%s' % (self._clean_args(args), to_native(traceback.format_exc())))
        if handle_exceptions:
            self.fail_json(rc=257, stdout=b'', stderr=b'', msg=to_native(e), exception=traceback.format_exc(), cmd=self._clean_args(args))
        else:
            raise e
    if rc != 0 and check_rc:
        msg = heuristic_log_sanitize(stderr.rstrip(), self.no_log_values)
        self.fail_json(cmd=self._clean_args(args), rc=rc, stdout=stdout, stderr=stderr, msg=msg)
    if encoding is not None:
        return (rc, to_native(stdout, encoding=encoding, errors=errors), to_native(stderr, encoding=encoding, errors=errors))
    return (rc, stdout, stderr)

----------

def test_run_non_existent_command(monkeypatch):
    """ Test that `command` returns std{out,err} even if the executable is not found """

    def fail_json(msg, **kwargs):
        assert kwargs['stderr'] == b''
        assert kwargs['stdout'] == b''
        sys.exit(1)

    def popen(*args, **kwargs):
        raise OSError()
    monkeypatch.setattr(basic, '_ANSIBLE_ARGS', to_bytes(json.dumps({'ANSIBLE_MODULE_ARGS': {}})))
    monkeypatch.setattr(subprocess, 'Popen', popen)
    am = basic.AnsibleModule(argument_spec={})
    monkeypatch.setattr(am, 'fail_json', fail_json)
    with pytest.raises(SystemExit):
        am.run_command('lecho', 'whatever')

----------



Test Class Name: default