def log(self, msg, log_args=None):
    if not self.no_log:
        if log_args is None:
            log_args = dict()
        module = 'ansible-%s' % self._name
        if isinstance(module, binary_type):
            module = module.decode('utf-8', 'replace')
        if not isinstance(msg, (binary_type, text_type)):
            raise TypeError('msg should be a string (got %s)' % type(msg))
        if isinstance(msg, binary_type):
            journal_msg = remove_values(msg.decode('utf-8', 'replace'), self.no_log_values)
        else:
            journal_msg = remove_values(msg, self.no_log_values)
        if PY3:
            syslog_msg = journal_msg
        else:
            syslog_msg = journal_msg.encode('utf-8', 'replace')
        if has_journal:
            journal_args = [('MODULE', os.path.basename(__file__))]
            for arg in log_args:
                (name, value) = (arg.upper(), str(log_args[arg]))
                if name in ('PRIORITY', 'MESSAGE', 'MESSAGE_ID', 'CODE_FILE', 'CODE_LINE', 'CODE_FUNC', 'SYSLOG_FACILITY', 'SYSLOG_IDENTIFIER', 'SYSLOG_PID'):
                    name = '_%s' % name
                journal_args.append((name, value))
            try:
                if HAS_SYSLOG:
                    facility = getattr(syslog, self._syslog_facility, syslog.LOG_USER) >> 3
                    journal.send(MESSAGE=u'%s %s' % (module, journal_msg), SYSLOG_FACILITY=facility, **dict(journal_args))
                else:
                    journal.send(MESSAGE=u'%s %s' % (module, journal_msg), **dict(journal_args))
            except IOError:
                self._log_to_syslog(syslog_msg)
        else:
            self._log_to_syslog(syslog_msg)

----------

@pytest.mark.parametrize('stdin', ({},), indirect=['stdin'])
def test_log_args(self, am, mocker):
    journal_send = mocker.patch('systemd.journal.send')
    am.log('unittest log_args', log_args=dict(TEST='log unittest'))
    assert journal_send.called == 1
    assert journal_send.call_args[1]['MESSAGE'].endswith('unittest log_args'), 'Message was not sent to log'
    assert 'MODULE' in journal_send.call_args[1]
    assert 'basic.py' in journal_send.call_args[1]['MODULE']
    assert 'TEST' in journal_send.call_args[1]
    assert 'log unittest' in journal_send.call_args[1]['TEST']

----------



Test Class Name: TestAnsibleModuleLogJournal