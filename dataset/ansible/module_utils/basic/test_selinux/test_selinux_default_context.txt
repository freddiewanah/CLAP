def selinux_default_context(self, path, mode=0):
    context = self.selinux_initial_context()
    if not self.selinux_enabled():
        return context
    try:
        ret = selinux.matchpathcon(to_native(path, errors='surrogate_or_strict'), mode)
    except OSError:
        return context
    if ret[0] == -1:
        return context
    context = ret[1].split(':', 3)
    return context

----------

def test_selinux_default_context(self):
    with patch.object(basic, 'HAVE_SELINUX', False):
        assert no_args_module().selinux_default_context(path='/foo/bar') == [None, None, None]
    am = no_args_module(selinux_enabled=True, selinux_mls_enabled=True)
    with patch('ansible.module_utils.compat.selinux.matchpathcon', return_value=[0, 'unconfined_u:object_r:default_t:s0']):
        assert am.selinux_default_context(path='/foo/bar') == ['unconfined_u', 'object_r', 'default_t', 's0']
    with patch('ansible.module_utils.compat.selinux.matchpathcon', return_value=[-1, '']):
        assert am.selinux_default_context(path='/foo/bar') == [None, None, None, None]
    with patch('ansible.module_utils.compat.selinux.matchpathcon', side_effect=OSError):
        assert am.selinux_default_context(path='/foo/bar') == [None, None, None, None]

----------



Test Class Name: TestSELinuxMU