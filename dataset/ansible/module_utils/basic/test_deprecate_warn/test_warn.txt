def warn(warning):
    if isinstance(warning, string_types):
        _global_warnings.append(warning)
    else:
        raise TypeError('warn requires a string not a %s' % type(warning))

----------

@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_warn(am, capfd):
    am.warn('warning1')
    with pytest.raises(SystemExit):
        am.exit_json(warnings=['warning2'])
    (out, err) = capfd.readouterr()
    assert json.loads(out)['warnings'] == ['warning1', 'warning2']

----------



Test Class Name: default