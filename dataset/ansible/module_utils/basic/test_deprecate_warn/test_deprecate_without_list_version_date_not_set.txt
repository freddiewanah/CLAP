def deprecate(msg, version=None, date=None, collection_name=None):
    if isinstance(msg, string_types):
        if date is not None:
            _global_deprecations.append({'msg': msg, 'date': date, 'collection_name': collection_name})
        else:
            _global_deprecations.append({'msg': msg, 'version': version, 'collection_name': collection_name})
    else:
        raise TypeError('deprecate requires a string not a %s' % type(msg))

----------

@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_deprecate_without_list_version_date_not_set(am, capfd):
    with pytest.raises(AssertionError) as ctx:
        am.deprecate('Simple deprecation warning', date='', version='')
    assert ctx.value.args[0] == 'implementation error -- version and date must not both be set'

----------



Test Class Name: default