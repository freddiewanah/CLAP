def get_cpu_facts(self, collected_facts=None):
    cpu_facts = {}
    collected_facts = collected_facts or {}
    i = 0
    vendor_id_occurrence = 0
    model_name_occurrence = 0
    processor_occurrence = 0
    physid = 0
    coreid = 0
    sockets = {}
    cores = {}
    zp = 0
    zmt = 0
    xen = False
    xen_paravirt = False
    try:
        if os.path.exists('/proc/xen'):
            xen = True
        else:
            for line in get_file_lines('/sys/hypervisor/type'):
                if line.strip() == 'xen':
                    xen = True
                break
    except IOError:
        pass
    if not os.access('/proc/cpuinfo', os.R_OK):
        return cpu_facts
    cpu_facts['processor'] = []
    for line in get_file_lines('/proc/cpuinfo'):
        data = line.split(':', 1)
        key = data[0].strip()
        try:
            val = data[1].strip()
        except IndexError:
            val = ''
        if xen:
            if key == 'flags':
                if 'vme' not in val:
                    xen_paravirt = True
        if key in ['model name', 'Processor', 'vendor_id', 'cpu', 'Vendor', 'processor']:
            if 'processor' not in cpu_facts:
                cpu_facts['processor'] = []
            cpu_facts['processor'].append(val)
            if key == 'vendor_id':
                vendor_id_occurrence += 1
            if key == 'model name':
                model_name_occurrence += 1
            if key == 'processor':
                processor_occurrence += 1
            i += 1
        elif key == 'physical id':
            physid = val
            if physid not in sockets:
                sockets[physid] = 1
        elif key == 'core id':
            coreid = val
            if coreid not in sockets:
                cores[coreid] = 1
        elif key == 'cpu cores':
            sockets[physid] = int(val)
        elif key == 'siblings':
            cores[coreid] = int(val)
        elif key == '# processors':
            zp = int(val)
        elif key == 'max thread id':
            zmt = int(val) + 1
        elif key == 'ncpus active':
            i = int(val)
    if vendor_id_occurrence > 0:
        if vendor_id_occurrence == model_name_occurrence:
            i = vendor_id_occurrence
    if collected_facts.get('ansible_architecture', '').startswith(('armv', 'aarch', 'ppc')):
        i = processor_occurrence
    if collected_facts.get('ansible_architecture') == 's390x':
        cpu_facts['processor_count'] = 1
        cpu_facts['processor_cores'] = zp // zmt
        cpu_facts['processor_threads_per_core'] = zmt
        cpu_facts['processor_vcpus'] = zp
        cpu_facts['processor_nproc'] = zp
    elif xen_paravirt:
        cpu_facts['processor_count'] = i
        cpu_facts['processor_cores'] = i
        cpu_facts['processor_threads_per_core'] = 1
        cpu_facts['processor_vcpus'] = i
        cpu_facts['processor_nproc'] = i
    else:
        if sockets:
            cpu_facts['processor_count'] = len(sockets)
        else:
            cpu_facts['processor_count'] = i
        socket_values = list(sockets.values())
        if socket_values and socket_values[0]:
            cpu_facts['processor_cores'] = socket_values[0]
        else:
            cpu_facts['processor_cores'] = 1
        core_values = list(cores.values())
        if core_values:
            cpu_facts['processor_threads_per_core'] = core_values[0] // cpu_facts['processor_cores']
        else:
            cpu_facts['processor_threads_per_core'] = 1 // cpu_facts['processor_cores']
        cpu_facts['processor_vcpus'] = cpu_facts['processor_threads_per_core'] * cpu_facts['processor_count'] * cpu_facts['processor_cores']
        cpu_facts['processor_nproc'] = processor_occurrence
    try:
        cpu_facts['processor_nproc'] = len(os.sched_getaffinity(0))
    except AttributeError:
        try:
            cmd = get_bin_path('nproc')
        except ValueError:
            pass
        else:
            (rc, out, _err) = self.module.run_command(cmd)
            if rc == 0:
                cpu_facts['processor_nproc'] = int(out)
    return cpu_facts

----------

def test_get_cpu_info_missing_arch(mocker):
    module = mocker.Mock()
    inst = linux.LinuxHardware(module)
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('os.access', return_value=True)
    for test in CPU_INFO_TEST_SCENARIOS:
        mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])
        mocker.patch('os.sched_getaffinity', create=True, return_value=test['sched_getaffinity'])
        module.run_command.return_value = (0, test['nproc_out'], '')
        test_result = inst.get_cpu_facts()
        if test['architecture'].startswith(('armv', 'aarch', 'ppc', 's390')):
            assert test['expected_result'] != test_result
        else:
            assert test['expected_result'] == test_result

----------



Test Class Name: default