def get_cpu_facts(self):
    cpu_facts = {}
    cpu_facts['processor'] = []
    cpu_facts['processor_count'] = 1
    (rc, out, err) = self.module.run_command('/usr/sbin/lsdev -Cc processor')
    if out:
        i = 0
        for line in out.splitlines():
            if 'Available' in line:
                if i == 0:
                    data = line.split(' ')
                    cpudev = data[0]
                i += 1
        cpu_facts['processor_cores'] = int(i)
        (rc, out, err) = self.module.run_command('/usr/sbin/lsattr -El ' + cpudev + ' -a type')
        data = out.split(' ')
        cpu_facts['processor'] = [data[1]]
        cpu_facts['processor_threads_per_core'] = 1
        (rc, out, err) = self.module.run_command('/usr/sbin/lsattr -El ' + cpudev + ' -a smt_threads')
        if out:
            data = out.split(' ')
            cpu_facts['processor_threads_per_core'] = int(data[1])
        cpu_facts['processor_vcpus'] = cpu_facts['processor_cores'] * cpu_facts['processor_threads_per_core']
    return cpu_facts

----------

@pytest.mark.parametrize('scenario', AIX_PROCESSOR_TEST_SCENARIOS)
def test_get_cpu_info(mocker, scenario):
    commands_results = [(0, '\n'.join(scenario['lsdev_output']), ''), (0, '\n'.join(scenario['lsattr_type_output']), ''), (0, '\n'.join(scenario['lsattr_smt_threads_output']), '')]
    module = mocker.Mock()
    module.run_command = mocker.Mock(side_effect=commands_results)
    inst = aix.AIXHardware(module=module)
    assert scenario['expected_result'] == inst.get_cpu_facts()

----------



Test Class Name: default