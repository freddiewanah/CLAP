def collect(self, module=None, collected_facts=None):
    """
        Example of contents of /etc/iscsi/initiatorname.iscsi:

        ## DO NOT EDIT OR REMOVE THIS FILE!
        ## If you remove this file, the iSCSI daemon will not start.
        ## If you change the InitiatorName, existing access control lists
        ## may reject this initiator.  The InitiatorName must be unique
        ## for each iSCSI initiator.  Do NOT duplicate iSCSI InitiatorNames.
        InitiatorName=iqn.1993-08.org.debian:01:44a42c8ddb8b

        Example of output from the AIX lsattr command:

        # lsattr -E -l iscsi0
        disc_filename  /etc/iscsi/targets            Configuration file                            False
        disc_policy    file                          Discovery Policy                              True
        initiator_name iqn.localhost.hostid.7f000002 iSCSI Initiator Name                          True
        isns_srvnames  auto                          iSNS Servers IP Addresses                     True
        isns_srvports                                iSNS Servers Port Numbers                     True
        max_targets    16                            Maximum Targets Allowed                       True
        num_cmd_elems  200                           Maximum number of commands to queue to driver True

        Example of output from the HP-UX iscsiutil command:

        #iscsiutil -l
        Initiator Name             : iqn.1986-03.com.hp:mcel_VMhost3.1f355cf6-e2db-11e0-a999-b44c0aef5537
        Initiator Alias            :

        Authentication Method      : None
        CHAP Method                : CHAP_UNI
        Initiator CHAP Name        :
        CHAP Secret                :
        NAS Hostname               :
        NAS Secret                 :
        Radius Server Hostname     :
        Header Digest              : None, CRC32C (default)
        Data Digest                : None, CRC32C (default)
        SLP Scope list for iSLPD   :
        """
    iscsi_facts = {}
    iscsi_facts['iscsi_iqn'] = ''
    if sys.platform.startswith('linux') or sys.platform.startswith('sunos'):
        for line in get_file_content('/etc/iscsi/initiatorname.iscsi', '').splitlines():
            if line.startswith('#') or line.startswith(';') or line.strip() == '':
                continue
            if line.startswith('InitiatorName='):
                iscsi_facts['iscsi_iqn'] = line.split('=', 1)[1]
                break
    elif sys.platform.startswith('aix'):
        try:
            cmd = get_bin_path('lsattr')
        except ValueError:
            return iscsi_facts
        cmd += ' -E -l iscsi0'
        (rc, out, err) = module.run_command(cmd)
        if rc == 0 and out:
            line = self.findstr(out, 'initiator_name')
            iscsi_facts['iscsi_iqn'] = line.split()[1].rstrip()
    elif sys.platform.startswith('hp-ux'):
        try:
            cmd = get_bin_path('iscsiutil', opt_dirs=['/opt/iscsi/bin'])
        except ValueError:
            return iscsi_facts
        cmd += ' -l'
        (rc, out, err) = module.run_command(cmd)
        if out:
            line = self.findstr(out, 'Initiator Name')
            iscsi_facts['iscsi_iqn'] = line.split(':', 1)[1].rstrip()
    return iscsi_facts

----------

def test_get_iscsi_info(mocker):
    module = Mock()
    inst = iscsi.IscsiInitiatorNetworkCollector()
    mocker.patch('sys.platform', 'aix6')
    mocker.patch('ansible.module_utils.facts.network.iscsi.get_bin_path', return_value='/usr/sbin/lsattr')
    mocker.patch.object(module, 'run_command', return_value=(0, LSATTR_OUTPUT, ''))
    aix_iscsi_expected = {'iscsi_iqn': 'iqn.localhost.hostid.7f000002'}
    assert aix_iscsi_expected == inst.collect(module=module)
    mocker.patch('sys.platform', 'hp-ux')
    mocker.patch('ansible.module_utils.facts.network.iscsi.get_bin_path', return_value='/opt/iscsi/bin/iscsiutil')
    mocker.patch.object(module, 'run_command', return_value=(0, ISCSIUTIL_OUTPUT, ''))
    hpux_iscsi_expected = {'iscsi_iqn': ' iqn.2001-04.com.hp.stor:svcio'}
    assert hpux_iscsi_expected == inst.collect(module=module)

----------



Test Class Name: default