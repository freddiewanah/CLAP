def retry(retries=None, retry_pause=1):
    """Retry decorator"""

    def wrapper(f):

        def retried(*args, **kwargs):
            retry_count = 0
            if retries is not None:
                ret = None
                while True:
                    retry_count += 1
                    if retry_count >= retries:
                        raise Exception('Retry limit exceeded: %d' % retries)
                    try:
                        ret = f(*args, **kwargs)
                    except Exception:
                        pass
                    if ret:
                        break
                    time.sleep(retry_pause)
                return ret
        return retried
    return wrapper

----------

def test_no_retry_required(self):

    @retry(retries=4, retry_pause=2)
    def login_database():
        login_database.counter += 1
        return 'success'
    login_database.counter = 0
    r = login_database()
    assert r == 'success'
    assert login_database.counter == 1

----------



Test Class Name: TestRetry