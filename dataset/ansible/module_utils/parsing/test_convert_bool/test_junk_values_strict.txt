def boolean(value, strict=True):
    if isinstance(value, bool):
        return value
    normalized_value = value
    if isinstance(value, (text_type, binary_type)):
        normalized_value = to_text(value, errors='surrogate_or_strict').lower().strip()
    if normalized_value in BOOLEANS_TRUE:
        return True
    elif normalized_value in BOOLEANS_FALSE or not strict:
        return False
    raise TypeError("The value '%s' is not a valid boolean.  Valid booleans include: %s" % (to_text(value), ', '.join((repr(i) for i in BOOLEANS))))

----------

def test_junk_values_strict(self):
    with pytest.raises(TypeError):
        assert boolean('flibbity', strict=True) is False
    with pytest.raises(TypeError):
        assert boolean(42, strict=True) is False
    with pytest.raises(TypeError):
        assert boolean(42.0, strict=True) is False
    with pytest.raises(TypeError):
        assert boolean(object(), strict=True) is False

----------



Test Class Name: TestBoolean