def redirect_request(self, req, fp, code, msg, hdrs, newurl):
    if not any((HAS_SSLCONTEXT, HAS_URLLIB3_PYOPENSSLCONTEXT)):
        handler = maybe_add_ssl_handler(newurl, validate_certs, ca_path=ca_path, ciphers=ciphers)
        if handler:
            urllib_request._opener.add_handler(handler)
    if follow_redirects == 'urllib2':
        return urllib_request.HTTPRedirectHandler.redirect_request(self, req, fp, code, msg, hdrs, newurl)
    elif follow_redirects in ['no', 'none', False]:
        raise urllib_error.HTTPError(newurl, code, msg, hdrs, fp)
    method = req.get_method()
    if follow_redirects in ['all', 'yes', True]:
        if code < 300 or code >= 400:
            raise urllib_error.HTTPError(req.get_full_url(), code, msg, hdrs, fp)
    elif follow_redirects == 'safe':
        if code < 300 or code >= 400 or method not in ('GET', 'HEAD'):
            raise urllib_error.HTTPError(req.get_full_url(), code, msg, hdrs, fp)
    else:
        raise urllib_error.HTTPError(req.get_full_url(), code, msg, hdrs, fp)
    try:
        data = req.get_data()
        origin_req_host = req.get_origin_req_host()
    except AttributeError:
        data = req.data
        origin_req_host = req.origin_req_host
    newurl = newurl.replace(' ', '%20')
    if code in (307, 308):
        headers = req.headers
    else:
        data = None
        headers = dict(((k, v) for (k, v) in req.headers.items() if k.lower() not in ('content-length', 'content-type', 'transfer-encoding')))
        if code == 303 and method != 'HEAD':
            method = 'GET'
        if code == 302 and method != 'HEAD':
            method = 'GET'
        if code == 301 and method == 'POST':
            method = 'GET'
    return RequestWithMethod(newurl, method=method, headers=headers, data=data, origin_req_host=origin_req_host, unverifiable=True)

----------

def test_redir_http_error_308_urllib2(urllib_req, request_body, mocker):
    redir_mock = mocker.patch.object(urllib_request.HTTPRedirectHandler, 'redirect_request')
    handler = RedirectHandlerFactory('urllib2', False)
    inst = handler()
    inst.redirect_request(urllib_req, request_body, 308, '308 Permanent Redirect', {}, 'https://docs.ansible.com/')
    assert redir_mock.call_count == 1

----------



Test Class Name: default