def b64decode(string, encoding='utf-8'):
    return to_text(base64.b64decode(to_bytes(string, errors='surrogate_or_strict')), encoding=encoding)

----------

@pytest.mark.skipif(not urls.HAS_CRYPTOGRAPHY, reason='Requires cryptography to be installed')
@pytest.mark.parametrize('certificate, expected', [('rsa_md5.pem', b'#4\xb8Gl\xbfNm\xfcvj]Z0\xd6d\x9c\x01\xba\xe1f*\\:\x13\x02\xa9h\xd7\xc6\xb0\xf6'), ('rsa_sha1.pem', b'\x14\xcf\xe8\xe4\xb32\xb2\n4?\xc8@\xb1\x8f\x9fox\x92j\xfe~\xc3\xe7\xb8\xe2\x89ia\x9b\x1e\x8f>'), ('rsa_sha256.pem', b'\x99o>\xea\x81,\x18p\xe3\x05I\xff\x9b\x86\xcd\x87\xa8\x90\xb6\xd8\xdf\xdfJ\x81\xbe\xf9gYp\xda\xdb&'), ('rsa_sha384.pem', b'4\xf3\x03\xc9\x95(oK!J\x9b\xa6C[i\xb5\x1e\xcf7X\xea\xbc*\x14\xd7\xa4?\xd27\xdc+\x1a\x1a\xd9\x11\x1c\\\x96^\x10u\x07\xcbA\x98\xc0\x9f\xec'), ('rsa_sha512.pem', b'Un\x1c\x17\x84\xe3\xb9W7\x0b\x7fTOb\xc53\xcb,\xa5\xc1\xda\xe0po\xae\xf0\x05D\xe1\xad+v\xff%\xcf\xbei\xb1\xc4\xe60\xc3\xbb\x02\x07\xdf\x111Lg8\xbc\xae\xd7\xe0q\xd7\xbf\xbf,\x9d\xfa\xb8]'), ('rsa-pss_sha256.pem', b'\xf21\xe6\xff?\x9e\x16\x1b\xc2\xdc\xbb\x89\x8d\x84GNX\x9c\xd7\xc2z\xdb\xef\x8b\xd9\xc0\xc0h\xaf\x9c6m'), ('rsa-pss_sha512.pem', b"\x85\x85\x19\xb9\xe1\x0f#\xe2\x1d,\xe9\xd5G*\xab\xceB\x0f\xd1\x00u\x9cS\xa1{\xb9y\x86\xb2Ya'"), ('ecdsa_sha256.pem', b'\xfe\xcf\x1b%\x85D\x99\x90\xd9\xe3\xb2\xc9-?Y~\xc85N\x12N\xdau\x1d\x94\x83|,\x89\xa2\xc1U'), ('ecdsa_sha512.pem', b'\xe5\xcbh\xb2\xf8C\xd6;\xf4\x0b\xcb \x07`\x8f\x81\x97a\x83\x92x?#0\xe5\xef\x19\xa5\xbd\x8f\x0b/\xaa\xc8a\x85_\xbbc\xa2!\xccF\xfc\x1e"j\x07$\x11\xaf\x17]\xdeG\x92\x81\xe0\x06\x87\x8b4\x80Y')])
def test_cbt_with_cert(certificate, expected):
    with open(os.path.join(os.path.dirname(__file__), 'fixtures', 'cbt', certificate)) as fd:
        cert_der = base64.b64decode(''.join([l.strip() for l in fd.readlines()[1:-1]]))
    actual = urls.get_channel_binding_cert_hash(cert_der)
    assert actual == expected

----------



Test Class Name: default