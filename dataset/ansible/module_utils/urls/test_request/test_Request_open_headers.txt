def open(self, method, url, data=None, headers=None, use_proxy=None, force=None, last_mod_time=None, timeout=None, validate_certs=None, url_username=None, url_password=None, http_agent=None, force_basic_auth=None, follow_redirects=None, client_cert=None, client_key=None, cookies=None, use_gssapi=False, unix_socket=None, ca_path=None, unredirected_headers=None, decompress=None, ciphers=None, use_netrc=None):
    """
        Sends a request via HTTP(S) or FTP using urllib2 (Python2) or urllib (Python3)

        Does not require the module environment

        Returns :class:`HTTPResponse` object.

        :arg method: method for the request
        :arg url: URL to request

        :kwarg data: (optional) bytes, or file-like object to send
            in the body of the request
        :kwarg headers: (optional) Dictionary of HTTP Headers to send with the
            request
        :kwarg use_proxy: (optional) Boolean of whether or not to use proxy
        :kwarg force: (optional) Boolean of whether or not to set `cache-control: no-cache` header
        :kwarg last_mod_time: (optional) Datetime object to use when setting If-Modified-Since header
        :kwarg timeout: (optional) How long to wait for the server to send
            data before giving up, as a float
        :kwarg validate_certs: (optional) Booleani that controls whether we verify
            the server's TLS certificate
        :kwarg url_username: (optional) String of the user to use when authenticating
        :kwarg url_password: (optional) String of the password to use when authenticating
        :kwarg http_agent: (optional) String of the User-Agent to use in the request
        :kwarg force_basic_auth: (optional) Boolean determining if auth header should be sent in the initial request
        :kwarg follow_redirects: (optional) String of urllib2, all/yes, safe, none to determine how redirects are
            followed, see RedirectHandlerFactory for more information
        :kwarg client_cert: (optional) PEM formatted certificate chain file to be used for SSL client authentication.
            This file can also include the key as well, and if the key is included, client_key is not required
        :kwarg client_key: (optional) PEM formatted file that contains your private key to be used for SSL client
            authentication. If client_cert contains both the certificate and key, this option is not required
        :kwarg cookies: (optional) CookieJar object to send with the
            request
        :kwarg use_gssapi: (optional) Use GSSAPI handler of requests.
        :kwarg unix_socket: (optional) String of file system path to unix socket file to use when establishing
            connection to the provided url
        :kwarg ca_path: (optional) String of file system path to CA cert bundle to use
        :kwarg unredirected_headers: (optional) A list of headers to not attach on a redirected request
        :kwarg decompress: (optional) Whether to attempt to decompress gzip content-encoded responses
        :kwarg ciphers: (optional) List of ciphers to use
        :kwarg use_netrc: (optional) Boolean determining whether to use credentials from ~/.netrc file
        :returns: HTTPResponse. Added in Ansible 2.9
        """
    method = method.upper()
    if headers is None:
        headers = {}
    elif not isinstance(headers, dict):
        raise ValueError('headers must be a dict')
    headers = dict(self.headers, **headers)
    use_proxy = self._fallback(use_proxy, self.use_proxy)
    force = self._fallback(force, self.force)
    timeout = self._fallback(timeout, self.timeout)
    validate_certs = self._fallback(validate_certs, self.validate_certs)
    url_username = self._fallback(url_username, self.url_username)
    url_password = self._fallback(url_password, self.url_password)
    http_agent = self._fallback(http_agent, self.http_agent)
    force_basic_auth = self._fallback(force_basic_auth, self.force_basic_auth)
    follow_redirects = self._fallback(follow_redirects, self.follow_redirects)
    client_cert = self._fallback(client_cert, self.client_cert)
    client_key = self._fallback(client_key, self.client_key)
    cookies = self._fallback(cookies, self.cookies)
    unix_socket = self._fallback(unix_socket, self.unix_socket)
    ca_path = self._fallback(ca_path, self.ca_path)
    unredirected_headers = self._fallback(unredirected_headers, self.unredirected_headers)
    decompress = self._fallback(decompress, self.decompress)
    ciphers = self._fallback(ciphers, self.ciphers)
    use_netrc = self._fallback(use_netrc, self.use_netrc)
    handlers = []
    if unix_socket:
        handlers.append(UnixHTTPHandler(unix_socket))
    parsed = generic_urlparse(urlparse(url))
    if parsed.scheme != 'ftp':
        username = url_username
        password = url_password
        if username:
            netloc = parsed.netloc
        elif '@' in parsed.netloc:
            (credentials, netloc) = parsed.netloc.split('@', 1)
            if ':' in credentials:
                (username, password) = credentials.split(':', 1)
            else:
                username = credentials
                password = ''
            parsed_list = parsed.as_list()
            parsed_list[1] = netloc
            url = urlunparse(parsed_list)
        if use_gssapi:
            if HTTPGSSAPIAuthHandler:
                handlers.append(HTTPGSSAPIAuthHandler(username, password))
            else:
                imp_err_msg = missing_required_lib('gssapi', reason='for use_gssapi=True', url='https://pypi.org/project/gssapi/')
                raise MissingModuleError(imp_err_msg, import_traceback=GSSAPI_IMP_ERR)
        elif username and (not force_basic_auth):
            passman = urllib_request.HTTPPasswordMgrWithDefaultRealm()
            passman.add_password(None, netloc, username, password)
            authhandler = urllib_request.HTTPBasicAuthHandler(passman)
            digest_authhandler = urllib_request.HTTPDigestAuthHandler(passman)
            handlers.append(authhandler)
            handlers.append(digest_authhandler)
        elif username and force_basic_auth:
            headers['Authorization'] = basic_auth_header(username, password)
        elif use_netrc:
            try:
                rc = netrc.netrc(os.environ.get('NETRC'))
                login = rc.authenticators(parsed.hostname)
            except IOError:
                login = None
            if login:
                (username, _, password) = login
                if username and password:
                    headers['Authorization'] = basic_auth_header(username, password)
    if not use_proxy:
        proxyhandler = urllib_request.ProxyHandler({})
        handlers.append(proxyhandler)
    if not any((HAS_SSLCONTEXT, HAS_URLLIB3_PYOPENSSLCONTEXT)):
        ssl_handler = maybe_add_ssl_handler(url, validate_certs, ca_path=ca_path, ciphers=ciphers)
        if ssl_handler:
            handlers.append(ssl_handler)
    else:
        (tmp_ca_path, cadata, paths_checked) = get_ca_certs(ca_path)
        context = make_context(cafile=tmp_ca_path, cadata=cadata, ciphers=ciphers, validate_certs=validate_certs)
        handlers.append(HTTPSClientAuthHandler(client_cert=client_cert, client_key=client_key, unix_socket=unix_socket, context=context))
    handlers.append(RedirectHandlerFactory(follow_redirects, validate_certs, ca_path=ca_path, ciphers=ciphers))
    if cookies is not None:
        handlers.append(urllib_request.HTTPCookieProcessor(cookies))
    opener = urllib_request.build_opener(*handlers)
    urllib_request.install_opener(opener)
    data = to_bytes(data, nonstring='passthru')
    request = RequestWithMethod(url, method, data)
    if http_agent:
        request.add_header('User-agent', http_agent)
    if force:
        request.add_header('cache-control', 'no-cache')
    elif last_mod_time:
        tstamp = rfc2822_date_string(last_mod_time.timetuple(), 'GMT')
        request.add_header('If-Modified-Since', tstamp)
    unredirected_headers = [h.lower() for h in unredirected_headers or []]
    for header in headers:
        if header.lower() in unredirected_headers:
            request.add_unredirected_header(header, headers[header])
        else:
            request.add_header(header, headers[header])
    r = urllib_request.urlopen(request, None, timeout)
    if decompress and r.headers.get('content-encoding', '').lower() == 'gzip':
        fp = GzipDecodedReader(r.fp)
        if PY3:
            r.fp = fp
            r.length = None
        else:
            msg = r.msg
            r = urllib_request.addinfourl(fp, r.info(), r.geturl(), r.getcode())
            r.msg = msg
    return r

----------

def test_Request_open_headers(urlopen_mock, install_opener_mock):
    r = Request().open('GET', 'http://ansible.com/', headers={'Foo': 'bar'})
    args = urlopen_mock.call_args[0]
    req = args[0]
    assert req.headers == {'Foo': 'bar'}

----------



Test Class Name: default