def validate(self, parameters, *args, **kwargs):
    """Validate ``parameters`` against argument spec.

        Error messages in the :class:`ValidationResult` may contain no_log values and should be
        sanitized with :func:`~ansible.module_utils.common.parameters.sanitize_keys` before logging or displaying.

        :arg parameters: Parameters to validate against the argument spec
        :type parameters: dict[str, dict]

        :return: :class:`ValidationResult` containing validated parameters.

        :Simple Example:

            .. code-block:: text

                argument_spec = {
                    'name': {'type': 'str'},
                    'age': {'type': 'int'},
                }

                parameters = {
                    'name': 'bo',
                    'age': '42',
                }

                validator = ArgumentSpecValidator(argument_spec)
                result = validator.validate(parameters)

                if result.error_messages:
                    sys.exit("Validation failed: {0}".format(", ".join(result.error_messages))

                valid_params = result.validated_parameters
        """
    result = ValidationResult(parameters)
    result._no_log_values.update(set_fallbacks(self.argument_spec, result._validated_parameters))
    alias_warnings = []
    alias_deprecations = []
    try:
        result._aliases.update(_handle_aliases(self.argument_spec, result._validated_parameters, alias_warnings, alias_deprecations))
    except (TypeError, ValueError) as e:
        result.errors.append(AliasError(to_native(e)))
    legal_inputs = _get_legal_inputs(self.argument_spec, result._validated_parameters, result._aliases)
    for (option, alias) in alias_warnings:
        result._warnings.append({'option': option, 'alias': alias})
    for deprecation in alias_deprecations:
        result._deprecations.append({'msg': "Alias '%s' is deprecated. See the module docs for more information" % deprecation['name'], 'version': deprecation.get('version'), 'date': deprecation.get('date'), 'collection_name': deprecation.get('collection_name')})
    try:
        result._no_log_values.update(_list_no_log_values(self.argument_spec, result._validated_parameters))
    except TypeError as te:
        result.errors.append(NoLogError(to_native(te)))
    try:
        result._deprecations.extend(_list_deprecations(self.argument_spec, result._validated_parameters))
    except TypeError as te:
        result.errors.append(DeprecationError(to_native(te)))
    try:
        result._unsupported_parameters.update(_get_unsupported_parameters(self.argument_spec, result._validated_parameters, legal_inputs, store_supported=result._supported_parameters))
    except TypeError as te:
        result.errors.append(RequiredDefaultError(to_native(te)))
    except ValueError as ve:
        result.errors.append(AliasError(to_native(ve)))
    try:
        check_mutually_exclusive(self._mutually_exclusive, result._validated_parameters)
    except TypeError as te:
        result.errors.append(MutuallyExclusiveError(to_native(te)))
    result._no_log_values.update(_set_defaults(self.argument_spec, result._validated_parameters, False))
    try:
        check_required_arguments(self.argument_spec, result._validated_parameters)
    except TypeError as e:
        result.errors.append(RequiredError(to_native(e)))
    _validate_argument_types(self.argument_spec, result._validated_parameters, errors=result.errors)
    _validate_argument_values(self.argument_spec, result._validated_parameters, errors=result.errors)
    for check in _ADDITIONAL_CHECKS:
        try:
            check['func'](getattr(self, '_{attr}'.format(attr=check['attr'])), result._validated_parameters)
        except TypeError as te:
            result.errors.append(check['err'](to_native(te)))
    result._no_log_values.update(_set_defaults(self.argument_spec, result._validated_parameters))
    alias_deprecations = []
    _validate_sub_spec(self.argument_spec, result._validated_parameters, errors=result.errors, no_log_values=result._no_log_values, unsupported_parameters=result._unsupported_parameters, supported_parameters=result._supported_parameters, alias_deprecations=alias_deprecations)
    for deprecation in alias_deprecations:
        result._deprecations.append({'msg': "Alias '%s' is deprecated. See the module docs for more information" % deprecation['name'], 'version': deprecation.get('version'), 'date': deprecation.get('date'), 'collection_name': deprecation.get('collection_name')})
    if result._unsupported_parameters:
        flattened_names = []
        for item in result._unsupported_parameters:
            if isinstance(item, tuple):
                flattened_names.append('.'.join(item))
            else:
                flattened_names.append(item)
        unsupported_string = ', '.join(sorted(list(flattened_names)))
        supported_params = supported_aliases = []
        if result._supported_parameters.get(item):
            supported_params = sorted(list(result._supported_parameters[item][0]))
            supported_aliases = sorted(list(result._supported_parameters[item][1]))
        supported_string = ', '.join(supported_params)
        if supported_aliases:
            aliases_string = ', '.join(supported_aliases)
            supported_string += ' (%s)' % aliases_string
        msg = '{0}. Supported parameters include: {1}.'.format(unsupported_string, supported_string)
        result.errors.append(UnsupportedError(msg))
    return result

----------

def test_module_validate():
    arg_spec = {'name': {}}
    parameters = {'name': 'larry'}
    expected = {'name': 'larry'}
    v = ModuleArgumentSpecValidator(arg_spec)
    result = v.validate(parameters)
    assert isinstance(result, ValidationResult)
    assert result.error_messages == []
    assert result._deprecations == []
    assert result._warnings == []
    assert result.validated_parameters == expected

----------



Test Class Name: default