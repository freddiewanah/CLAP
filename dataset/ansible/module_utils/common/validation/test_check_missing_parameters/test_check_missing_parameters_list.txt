def check_missing_parameters(parameters, required_parameters=None):
    """This is for checking for required params when we can not check via
    argspec because we need more information than is simply given in the argspec.

    Raises :class:`TypeError` if any required parameters are missing

    :arg parameters: Dictionary of parameters
    :arg required_parameters: List of parameters to look for in the given parameters.

    :returns: Empty list or raises :class:`TypeError` if the check fails.
    """
    missing_params = []
    if required_parameters is None:
        return missing_params
    for param in required_parameters:
        if not parameters.get(param):
            missing_params.append(param)
    if missing_params:
        msg = 'missing required arguments: %s' % ', '.join(missing_params)
        raise TypeError(to_native(msg))
    return missing_params

----------

def test_check_missing_parameters_list():
    expected = 'missing required arguments: path'
    with pytest.raises(TypeError) as e:
        check_missing_parameters({}, ['path'])
    assert to_native(e.value) == expected

----------



Test Class Name: default