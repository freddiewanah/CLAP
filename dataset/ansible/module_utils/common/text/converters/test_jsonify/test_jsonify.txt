def jsonify(data, **kwargs):
    for encoding in ('utf-8', 'latin-1'):
        try:
            return json.dumps(data, encoding=encoding, default=_json_encode_fallback, **kwargs)
        except TypeError:
            try:
                new_data = container_to_text(data, encoding=encoding)
            except UnicodeDecodeError:
                continue
            return json.dumps(new_data, default=_json_encode_fallback, **kwargs)
        except UnicodeDecodeError:
            continue
    raise UnicodeError('Invalid unicode encoding encountered')

----------

@pytest.mark.parametrize('test_input,expected', [(1, '1'), (u'string', u'"string"'), (u'くらとみ', u'"\\u304f\\u3089\\u3068\\u307f"'), (u'café', u'"caf\\u00e9"'), (b'string', u'"string"'), (False, u'false'), (u'string'.encode('utf-8'), u'"string"')])
def test_jsonify(test_input, expected):
    """Test for jsonify()."""
    assert jsonify(test_input) == expected

----------



Test Class Name: default