def container_to_text(d, encoding='utf-8', errors='surrogate_or_strict'):
    """Recursively convert dict keys and values to text str

    Specialized for json return because this only handles, lists, tuples,
    and dict container types (the containers that the json module returns)
    """
    if isinstance(d, binary_type):
        return to_text(d, encoding=encoding, errors=errors)
    elif isinstance(d, dict):
        return dict((container_to_text(o, encoding, errors) for o in iteritems(d)))
    elif isinstance(d, list):
        return [container_to_text(o, encoding, errors) for o in d]
    elif isinstance(d, tuple):
        return tuple((container_to_text(o, encoding, errors) for o in d))
    else:
        return d

----------

@pytest.mark.parametrize('test_input,expected', [({1: 1}, {1: 1}), ([1, 2], [1, 2]), ((1, 2), (1, 2)), (1, 1), (1.1, 1.1), (b'str', u'str'), (u'str', u'str'), ([b'str'], [u'str']), (b'str', u'str'), ({b'str': b'str'}, {u'str': u'str'})])
@pytest.mark.parametrize('encoding', ['utf-8', 'latin1', 'shift-jis', 'big5', 'koi8_r'])
@pytest.mark.parametrize('errors', ['strict', 'surrogate_or_strict', 'surrogate_then_replace'])
def test_container_to_text_different_types(test_input, expected, encoding, errors):
    """Test for passing objects to container_to_text()."""
    assert container_to_text(test_input, encoding=encoding, errors=errors) == expected

----------



Test Class Name: default