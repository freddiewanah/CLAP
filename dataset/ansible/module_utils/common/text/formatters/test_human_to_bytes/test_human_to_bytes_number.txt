def human_to_bytes(size, default_unit=None, isbits=False):
    """ Return bytes count from a human readable string """
    try:
        return formatters.human_to_bytes(size, default_unit, isbits)
    except TypeError as e:
        raise AnsibleFilterTypeError('human_to_bytes() failed on bad input: %s' % to_native(e))
    except Exception:
        raise AnsibleFilterError("human_to_bytes() can't interpret following string: %s" % size)

----------

@pytest.mark.parametrize('input_data,expected', [(0, 0), (u'0B', 0), (1024, NUM_IN_METRIC['K']), (u'1024B', NUM_IN_METRIC['K']), (u'1K', NUM_IN_METRIC['K']), (u'1KB', NUM_IN_METRIC['K']), (u'1M', NUM_IN_METRIC['M']), (u'1MB', NUM_IN_METRIC['M']), (u'1G', NUM_IN_METRIC['G']), (u'1GB', NUM_IN_METRIC['G']), (u'1T', NUM_IN_METRIC['T']), (u'1TB', NUM_IN_METRIC['T']), (u'1P', NUM_IN_METRIC['P']), (u'1PB', NUM_IN_METRIC['P']), (u'1E', NUM_IN_METRIC['E']), (u'1EB', NUM_IN_METRIC['E']), (u'1Z', NUM_IN_METRIC['Z']), (u'1ZB', NUM_IN_METRIC['Z']), (u'1Y', NUM_IN_METRIC['Y']), (u'1YB', NUM_IN_METRIC['Y'])])
def test_human_to_bytes_number(input_data, expected):
    """Test of human_to_bytes function, only number arg is passed."""
    assert human_to_bytes(input_data) == expected

----------



Test Class Name: default