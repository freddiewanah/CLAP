def bytes_to_human(size, isbits=False, unit=None):
    base = 'Bytes'
    if isbits:
        base = 'bits'
    suffix = ''
    for (suffix, limit) in sorted(iteritems(SIZE_RANGES), key=lambda item: -item[1]):
        if unit is None and size >= limit or (unit is not None and unit.upper() == suffix[0]):
            break
    if limit != 1:
        suffix += base[0]
    else:
        suffix = base
    return '%.2f %s' % (size / limit, suffix)

----------

@pytest.mark.parametrize('input_data,unit,expected', [(0, u'B', u'0.00 Bytes'), (0.5, u'B', u'0.50 Bytes'), (0.54, u'B', u'0.54 Bytes'), (1024, u'K', u'1.00 KB'), (1536, u'K', u'1.50 KB'), (1790, u'K', u'1.75 KB'), (1048576, u'M', u'1.00 MB'), (1099511627776, u'T', u'1.00 TB'), (1152921504606846976, u'E', u'1.00 EB'), (1180591620717411303424, u'Z', u'1.00 ZB'), (1208925819614629174706176, u'Y', u'1.00 YB'), (1025, u'KB', u'1025.00 Bytes'), (1073741824, u'Gb', u'1073741824.00 Bytes'), (1125899906842624, u'Pb', u'1125899906842624.00 Bytes')])
def test_bytes_to_human_unit(input_data, unit, expected):
    """Test unit argument of bytes_to_human function proper results."""
    assert bytes_to_human(input_data, unit=unit) == expected

----------



Test Class Name: default