@keras_export('keras.backend.update')
@doc_controls.do_not_generate_docs
def update(x, new_x):
    return tf.compat.v1.assign(x, new_x)

----------

@parameterized.named_parameters(*model_architectures.ALL_MODELS)
def test_basic_saving_and_loading(self, model_fn):
    save_format = test_utils.get_save_format()
    custom_objects = self.get_custom_objects()
    if 'subclassed_in_functional' in model_fn.__name__:
        subclass_custom_objects = {'MySubclassModel': model_architectures.MySubclassModel}
        custom_objects.update(subclass_custom_objects)
    elif 'subclassed' in model_fn.__name__ and save_format == 'h5':
        self.skipTest('Saving the model to HDF5 format requires the model to be a Functional model or a Sequential model.')
    saved_model_dir = self._save_model_dir()
    model_data = model_fn()
    model = model_data.model
    (x_test, y_test) = self.get_test_data(model_data.input_shape, model_data.target_shape)
    model.compile('rmsprop', 'mse')
    model.train_on_batch(x_test, y_test)
    out1 = model.predict(x_test)
    keras.models.save_model(model, saved_model_dir, save_format=save_format)
    loaded_model = keras.models.load_model(saved_model_dir, custom_objects=custom_objects)
    out2 = loaded_model.predict(x_test)
    self.assertAllClose(out1, out2, atol=1e-05)

----------



Test Class Name: default