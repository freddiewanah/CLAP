@keras_export('keras.layers.add')
def add(inputs, **kwargs):
    """Functional interface to the `tf.keras.layers.Add` layer.

    Args:
        inputs: A list of input tensors with the same shape.
        **kwargs: Standard layer keyword arguments.

    Returns:
        A tensor as the sum of the inputs. It has the same shape as the inputs.

    Examples:

    >>> input_shape = (2, 3, 4)
    >>> x1 = tf.random.normal(input_shape)
    >>> x2 = tf.random.normal(input_shape)
    >>> y = tf.keras.layers.add([x1, x2])
    >>> print(y.shape)
    (2, 3, 4)

    Used in a functional model:

    >>> input1 = tf.keras.layers.Input(shape=(16,))
    >>> x1 = tf.keras.layers.Dense(8, activation='relu')(input1)
    >>> input2 = tf.keras.layers.Input(shape=(32,))
    >>> x2 = tf.keras.layers.Dense(8, activation='relu')(input2)
    >>> added = tf.keras.layers.add([x1, x2])
    >>> out = tf.keras.layers.Dense(4)(added)
    >>> model = tf.keras.models.Model(inputs=[input1, input2], outputs=out)

    """
    return Add(**kwargs)(inputs)

----------

def test_timeseries_classification_sequential_tf_rnn(self):
    np.random.seed(1337)
    ((x_train, y_train), _) = test_utils.get_test_data(train_samples=100, test_samples=0, input_shape=(4, 10), num_classes=2)
    y_train = utils.to_categorical(y_train)
    with base_layer.keras_style_scope():
        model = keras.models.Sequential()
        model.add(keras.layers.RNN(legacy_cells.LSTMCell(5), return_sequences=True, input_shape=x_train.shape[1:]))
        model.add(keras.layers.RNN(legacy_cells.GRUCell(y_train.shape[-1], activation='softmax', dtype=tf.float32)))
        model.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.legacy.adam.Adam(0.005), metrics=['acc'], run_eagerly=test_utils.should_run_eagerly())
    history = model.fit(x_train, y_train, epochs=15, batch_size=10, validation_data=(x_train, y_train), verbose=2)
    self.assertGreater(history.history['val_acc'][-1], 0.7)
    (_, val_acc) = model.evaluate(x_train, y_train)
    self.assertAlmostEqual(history.history['val_acc'][-1], val_acc)
    predictions = model.predict(x_train)
    self.assertEqual(predictions.shape, (x_train.shape[0], 2))

----------



Test Class Name: TimeseriesClassificationIntegrationTest