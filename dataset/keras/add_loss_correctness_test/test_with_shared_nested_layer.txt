@keras_export('keras.backend.constant')
@tf.__internal__.dispatch.add_dispatch_support
@doc_controls.do_not_generate_docs
def constant(value, dtype=None, shape=None, name=None):
    """Creates a constant tensor.

    Args:
        value: A constant value (or list)
        dtype: The type of the elements of the resulting tensor.
        shape: Optional dimensions of resulting tensor.
        name: Optional name for the tensor.

    Returns:
        A Constant Tensor.
    """
    if dtype is None:
        dtype = floatx()
    return tf.constant(value, dtype=dtype, shape=shape, name=name)

----------

@test_combinations.run_all_keras_modes
def test_with_shared_nested_layer(self):

    class LayerWithLoss(layers.Layer):

        def call(self, inputs):
            self.add_loss(tf.reduce_sum(inputs))
            return inputs * 2

    class LayerWithNestedLayerWithLoss(layers.Layer):

        def __init__(self):
            super().__init__()
            self.loss_layer = LayerWithLoss()

        def call(self, inputs):
            return self.loss_layer(inputs)
    shared_layer = LayerWithNestedLayerWithLoss()
    m = Sequential([shared_layer])
    m2 = Sequential([shared_layer, m])
    m2(tf.constant([1, 2, 3]))
    self.assertEqual(len(m2.losses), 2)
    self.assertAllClose(m2.losses, [6, 12])

----------



Test Class Name: default