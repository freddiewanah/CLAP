@keras_export('keras.backend.learning_phase_scope')
@tf_contextlib.contextmanager
@doc_controls.do_not_generate_docs
def learning_phase_scope(value):
    """Provides a scope within which the learning phase is equal to `value`.

    The learning phase gets restored to its original value upon exiting the
    scope.

    Args:
       value: Learning phase value, either 0 or 1 (integers).
              0 = test, 1 = train

    Yields:
      None.

    Raises:
       ValueError: if `value` is neither `0` nor `1`.
    """
    warnings.warn('`tf.keras.backend.learning_phase_scope` is deprecated and will be removed after 2020-10-11. To update it, simply pass a True/False value to the `training` argument of the `__call__` method of your layer or model.', stacklevel=2)
    with deprecated_internal_learning_phase_scope(value):
        try:
            yield
        finally:
            pass

----------

@parameterized.named_parameters(('eager', False), ('defun', True))
def test_training_arg_priorities(self, defun):

    class MyModel(keras.layers.Layer):

        def __init__(self):
            super().__init__()
            self.layer = LayerWithTrainingArg()

        def call(self, inputs, training=False):
            return self.layer(inputs)
    model = MyModel()

    def train_step(x):
        explicit_out = model(x, training=True)
        default_out = model(x)
        with keras.backend.learning_phase_scope(1):
            parent_out = model(x, training=False)
            lr_out = model(x)
        return [explicit_out, default_out, parent_out, lr_out]
    if defun:
        train_step = tf.function(train_step)
    x = tf.ones((1, 1))
    results = train_step(x)
    self.assertAllClose(results[0], tf.ones((1, 1)))
    self.assertAllClose(results[1], tf.zeros((1, 1)))
    self.assertAllClose(results[2], tf.zeros((1, 1)))
    self.assertAllClose(results[3], tf.ones((1, 1)))

----------



Test Class Name: default