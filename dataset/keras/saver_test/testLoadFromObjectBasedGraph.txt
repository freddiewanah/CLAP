def join(self):
    while True:
        time.sleep(5)

----------

def testLoadFromObjectBasedGraph(self):
    checkpoint_directory = self.get_temp_dir()
    checkpoint_prefix = os.path.join(checkpoint_directory, 'ckpt')
    save_graph = tf.Graph()
    with save_graph.as_default(), self.session(graph=save_graph) as sess:
        root = self._initialized_model()
        object_saver = tf.train.Checkpoint(root=root)
        save_path = object_saver.save(file_prefix=checkpoint_prefix)
        var = tf.Variable(1.0, name='a')
        self.evaluate(var.initializer)
        second_saver = tf.train.Checkpoint(v=var)
        second_path = second_saver.save(file_prefix=os.path.join(checkpoint_directory, 'second'))
    restore_graph = tf.Graph()
    with restore_graph.as_default(), self.session(graph=restore_graph) as sess:
        root = self._initialized_model()
        self._set_sentinels(root)
        saver = tf.compat.v1.train.Saver()
        saver.restore(sess=sess, save_path=save_path)
        self._check_sentinels(root)
        before_second_restore_ops = restore_graph.get_operations()
        saver.restore(sess=sess, save_path=save_path)
        self.assertEqual(before_second_restore_ops, restore_graph.get_operations())
        with self.assertRaisesRegex(tf.errors.NotFoundError, 'Could not find some variables'):
            saver.restore(sess=sess, save_path=second_path)

----------

def _initialized_model(self):
    input_value = tf.constant([[3.0]])
    model = MyModel()
    optimizer = tf.compat.v1.train.AdamOptimizer(0.001)
    optimizer_step = tf.compat.v1.train.get_or_create_global_step()
    root_trackable = tf.train.Checkpoint(optimizer=optimizer, model=model, optimizer_step=optimizer_step)
    train_op = optimizer.minimize(functools.partial(model, input_value), global_step=optimizer_step)
    self.evaluate(trackable_utils.gather_initializers(root_trackable))
    self.evaluate(train_op)
    self.evaluate(model._named_dense.bias.assign([1.0]))
    self.evaluate(optimizer.get_slot(var=model._named_dense.bias, name='m').assign([2.0]))
    (beta1_power, _) = optimizer._get_beta_accumulators()
    self.evaluate(beta1_power.assign(3.0))
    return root_trackable
def _set_sentinels(self, root_trackable):
    self.evaluate(root_trackable.model._named_dense.bias.assign([101.0]))
    self.evaluate(root_trackable.optimizer.get_slot(var=root_trackable.model._named_dense.bias, name='m').assign([102.0]))
    (beta1_power, _) = root_trackable.optimizer._get_beta_accumulators()
    self.evaluate(beta1_power.assign(103.0))
def _check_sentinels(self, root_trackable):
    self.assertAllEqual([1.0], self.evaluate(root_trackable.model._named_dense.bias))
    self.assertAllEqual([2.0], self.evaluate(root_trackable.optimizer.get_slot(var=root_trackable.model._named_dense.bias, name='m')))
    (beta1_power, _) = root_trackable.optimizer._get_beta_accumulators()
    self.assertAllEqual(3.0, self.evaluate(beta1_power))

Test Class Name: TrackableCompatibilityTests