def dataclass_json(_cls=None, *, letter_case=None, undefined: Optional[Union[str, Undefined]]=None):
    """
    Based on the code in the `dataclasses` module to handle optional-parens
    decorators. See example below:

    @dataclass_json
    @dataclass_json(letter_case=LetterCase.CAMEL)
    class Example:
        ...
    """

    def wrap(cls):
        return _process_class(cls, letter_case, undefined)
    if _cls is None:
        return wrap
    return wrap(_cls)

----------

def test_undefined_parameters_catch_all_default_factory_init_converts_factory(valid_response):

    @dataclass_json(undefined='include')
    @dataclass()
    class UnknownAPIDumpDefault:
        endpoint: str
        data: Dict[str, Any]
        catch_all: CatchAll = field(default_factory=dict)
    dump = UnknownAPIDumpDefault(**valid_response)
    assert dump.catch_all == {}

----------



Test Class Name: UnknownAPIDumpDefault