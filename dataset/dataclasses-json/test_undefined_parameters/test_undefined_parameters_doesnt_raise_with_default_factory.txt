@classmethod
def from_dict(cls: Type[A], kvs: Json, *, infer_missing=False) -> A:
    return _decode_dataclass(cls, kvs, infer_missing)

----------

def test_undefined_parameters_doesnt_raise_with_default_factory(valid_response, invalid_response):

    @dataclass_json(undefined='include')
    @dataclass()
    class UnknownAPIDumpDefault(DataClassJsonMixin):
        endpoint: str
        data: Dict[str, Any]
        catch_all: CatchAll = field(default_factory=dict)
    from_valid = UnknownAPIDumpDefault.from_dict(valid_response)
    from_invalid = UnknownAPIDumpDefault.from_dict(invalid_response)
    assert from_valid.catch_all == {}
    assert {'undefined_field_name': [1, 2, 3]} == from_invalid.catch_all

----------



Test Class Name: UnknownAPIDumpDefault