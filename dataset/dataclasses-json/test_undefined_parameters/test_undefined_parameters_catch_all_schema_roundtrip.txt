@classmethod
def schema(cls: Type[A], *, infer_missing: bool=False, only=None, exclude=(), many: bool=False, context=None, load_only=(), dump_only=(), partial: bool=False, unknown=None) -> SchemaType:
    Schema = build_schema(cls, DataClassJsonMixin, infer_missing, partial)
    if unknown is None:
        undefined_parameter_action = _undefined_parameter_action_safe(cls)
        if undefined_parameter_action is not None:
            unknown = undefined_parameter_action.name.lower()
    return Schema(only=only, exclude=exclude, many=many, context=context, load_only=load_only, dump_only=dump_only, partial=partial, unknown=unknown)

----------

def test_undefined_parameters_catch_all_schema_roundtrip(boss_json):

    @dataclass_json(undefined=Undefined.INCLUDE)
    @dataclass(frozen=True)
    class Minion:
        name: str
        catch_all: CatchAll

    @dataclass_json(undefined=Undefined.INCLUDE)
    @dataclass(frozen=True)
    class Boss:
        minions: List[Minion]
        catch_all: CatchAll
    boss1 = Boss.schema().loads(boss_json)
    dumped_s = Boss.schema().dumps(boss1)
    boss2 = Boss.schema().loads(dumped_s)
    assert boss1 == boss2

----------



Test Class Name: Boss