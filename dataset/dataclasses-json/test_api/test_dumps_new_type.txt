def schema(cls, mixin, infer_missing):
    schema = {}
    overrides = _user_overrides_or_exts(cls)
    for field in dc_fields(cls):
        metadata = (field.metadata or {}).get('dataclasses_json', {})
        metadata = overrides[field.name]
        if metadata.mm_field is not None:
            schema[field.name] = metadata.mm_field
        else:
            type_ = field.type
            options = {}
            missing_key = 'missing' if infer_missing else 'default'
            if field.default is not MISSING:
                options[missing_key] = field.default
            elif field.default_factory is not MISSING:
                options[missing_key] = field.default_factory
            if options.get(missing_key, ...) is None:
                options['allow_none'] = True
            if _is_optional(type_):
                options.setdefault(missing_key, None)
                options['allow_none'] = True
                if len(type_.__args__) == 2:
                    type_ = type_.__args__[0]
            if metadata.letter_case is not None:
                options['data_key'] = metadata.letter_case(field.name)
            t = build_type(type_, options, mixin, field, cls)
            if field.type != typing.Optional[CatchAllVar]:
                schema[field.name] = t
    return schema

----------

def test_dumps_new_type(self):
    raw_value = 'd1d61dd7-c036-47d3-a6ed-91cc2e885fc8'
    id_value = UUIDWrapper(UUID(raw_value))
    d_new_type = DataClassWithNewType(id_value)
    assert DataClassWithNewType.schema().dumps(d_new_type) == f'{{"id": "{raw_value}"}}'

----------



Test Class Name: TestSchema