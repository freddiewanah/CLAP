@classmethod
def schema(cls: Type[A], *, infer_missing: bool=False, only=None, exclude=(), many: bool=False, context=None, load_only=(), dump_only=(), partial: bool=False, unknown=None) -> SchemaType:
    Schema = build_schema(cls, DataClassJsonMixin, infer_missing, partial)
    if unknown is None:
        undefined_parameter_action = _undefined_parameter_action_safe(cls)
        if undefined_parameter_action is not None:
            unknown = undefined_parameter_action.name.lower()
    return Schema(only=only, exclude=exclude, many=many, context=context, load_only=load_only, dump_only=dump_only, partial=partial, unknown=unknown)

----------

def test_tree_schema_round_trip(self):
    tree_dict = Tree.schema().dump(family_tree)
    tree_obj = Tree.schema().load(tree_dict)
    assert tree_obj == family_tree

----------



Test Class Name: TestRecursive