def replace(m: Match[str]) -> str:
    groups = m.groupdict()
    back_slashes = groups['backslashes']
    if len(back_slashes) % 2 == 0:
        return back_slashes + groups['body']
    if groups['u']:
        return back_slashes + 'u' + groups['u'].lower()
    elif groups['U']:
        return back_slashes + 'U' + groups['U'].lower()
    elif groups['x']:
        return back_slashes + 'x' + groups['x'].lower()
    else:
        assert groups['N'], f'Unexpected match: {m}'
        return back_slashes + 'N{' + groups['N'].upper() + '}'

----------

@pytest.mark.parametrize('mode, expected_output, expectation', [pytest.param(JUPYTER_MODE, '%%custom_python_magic -n1 -n2\nx=2', pytest.raises(NothingChanged), id='No change when cell magic not registered'), pytest.param(replace(JUPYTER_MODE, python_cell_magics={'cust1', 'cust1'}), '%%custom_python_magic -n1 -n2\nx=2', pytest.raises(NothingChanged), id='No change when other cell magics registered'), pytest.param(replace(JUPYTER_MODE, python_cell_magics={'custom_python_magic', 'cust1'}), '%%custom_python_magic -n1 -n2\nx = 2', does_not_raise(), id='Correctly change when cell magic registered')])
def test_cell_magic_with_custom_python_magic(mode: Mode, expected_output: str, expectation: ContextManager[object]) -> None:
    with expectation:
        result = format_cell('%%custom_python_magic -n1 -n2\nx=2', fast=True, mode=mode)
        assert result == expected_output

----------



Test Class Name: default