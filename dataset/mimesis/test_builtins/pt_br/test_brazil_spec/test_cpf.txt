def cpf(self, with_mask: bool=True) -> str:
    """Get a random CPF.

        :param with_mask: Use CPF mask (###.###.###-##).
        :returns: Random CPF.

        :Example:
            001.137.297-40
        """

    def get_verifying_digit_cpf(cpf: t.List[int], peso: int) -> int:
        """Calculate the verifying digit for the CPF.

            :param cpf: List of integers with the CPF.
            :param peso: Integer with the weight for the modulo 11 calculate.
            :returns: The verifying digit for the CPF.
            """
        soma = 0
        for (index, digit) in enumerate(cpf):
            soma += digit * (peso - index)
        resto = soma % 11
        if resto == 0 or resto == 1 or resto >= 11:
            return 0
        return 11 - resto
    cpf_without_dv = [self.random.randint(0, 9) for _ in range(9)]
    first_dv = get_verifying_digit_cpf(cpf_without_dv, 10)
    cpf_without_dv.append(first_dv)
    second_dv = get_verifying_digit_cpf(cpf_without_dv, 11)
    cpf_without_dv.append(second_dv)
    cpf = ''.join(map(str, cpf_without_dv))
    if with_mask:
        return cpf[:3] + '.' + cpf[3:6] + '.' + cpf[6:9] + '-' + cpf[9:]
    return cpf

----------

def test_cpf(pt_br):
    cpf_with_mask = pt_br.cpf()
    assert len(cpf_with_mask) == 14
    non_numeric_digits = re.sub('\\d', '', cpf_with_mask)
    assert '..-' == non_numeric_digits == non_numeric_digits
    assert len(re.sub('\\D', '', cpf_with_mask)) == 11
    cpf_without_mask = pt_br.cpf(False)
    assert len(cpf_without_mask) == 11
    non_numeric_digits = re.sub('\\d', '', cpf_without_mask)
    assert '' == non_numeric_digits

----------



Test Class Name: default