def pesel(self, birth_date: t.Optional[DateTime]=None, gender: t.Optional[Gender]=None) -> str:
    """Generate random 11-digit PESEL.

        :param birth_date: Initial birth date (optional)
        :param gender: Gender of person
        :return: Valid 11-digit PESEL
        """
    date_object = birth_date
    if not date_object:
        date_object = Datetime().datetime(1940, 2018)
    date = date_object.date()
    year = date.year % 100
    month = date.month
    day = date.day
    if 1800 <= year <= 1899:
        month += 80
    elif 2000 <= year <= 2099:
        month += 20
    elif 2100 <= year <= 2199:
        month += 40
    elif 2200 <= year <= 2299:
        month += 60
    series_number = self.random.randint(0, 999)
    pesel_digits = list(map(int, f'{year:02d}{month:02d}{day:02d}{series_number:03d}'))
    if gender == Gender.MALE:
        gender_digit = self.random.choice((1, 3, 5, 7, 9))
    elif gender == Gender.FEMALE:
        gender_digit = self.random.choice((0, 2, 4, 6, 8))
    else:
        gender_digit = self.random.choice(range(10))
    pesel_digits.append(gender_digit)
    pesel_coeffs = (9, 7, 3, 1, 9, 7, 3, 1, 9, 7)
    sum_v = sum((nc * nd for (nc, nd) in zip(pesel_coeffs, pesel_digits)))
    checksum_digit = sum_v % 10
    pesel_digits.append(checksum_digit)
    return ''.join(map(str, pesel_digits))

----------

@pytest.mark.parametrize('gender', [Gender.FEMALE, Gender.MALE, None])
def test_pesel(pl, gender):
    pesel = pl.pesel(gender=gender)
    assert len(pesel) == 11
    assert validate_pesel(pesel)
    birth_date = Datetime().datetime()
    pesel = pl.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert validate_pesel(pesel)

----------



Test Class Name: default