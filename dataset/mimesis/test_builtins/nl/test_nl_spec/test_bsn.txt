def bsn(self) -> str:
    """Generate a random, but valid ``Burgerservicenummer``.

        :returns: Random BSN.

        :Example:
            255159705
        """

    def _is_valid_bsn(number: str) -> bool:
        total = 0
        multiplier = 9
        for char in number:
            multiplier = -multiplier if multiplier == 1 else multiplier
            total += int(char) * multiplier
            multiplier -= 1
        result = total % 11 == 0
        return result
    (a, b) = (100000000, 999999999)
    sample = str(self.random.randint(a, b))
    while not _is_valid_bsn(sample):
        sample = str(self.random.randint(a, b))
    return sample

----------

def test_bsn(nl):
    result = nl.bsn()
    assert result is not None
    assert len(result) == 9
    assert result.isdigit()
    test11 = int(result[0:1]) * 9 + int(result[1:2]) * 8 + int(result[2:3]) * 7 + int(result[3:4]) * 6 + int(result[4:5]) * 5 + int(result[5:6]) * 4 + int(result[6:7]) * 3 + int(result[7:8]) * 2 + int(result[8:9]) * -1
    assert test11 % 11 == 0

----------



Test Class Name: default