def port(self, port_range: PortRange=PortRange.ALL) -> int:
    """Generate random port.

        :param port_range: PortRange enum object.
        :return: Port number.
        :raises NonEnumerableError: if port_range is not in PortRange.

        :Example:
            8080
        """
    rng = self.validate_enum(port_range, PortRange)
    return self.random.randint(*rng)

----------

@pytest.mark.parametrize('port_range, excepted', [(PortRange.ALL, (1, 65535)), (PortRange.EPHEMERAL, (49152, 65535)), (PortRange.REGISTERED, (1024, 49151))])
def test_port(self, net, port_range, excepted):
    result = net.port(port_range=port_range)
    assert result >= excepted[0] and result <= excepted[1]
    with pytest.raises(NonEnumerableError):
        net.port('nil')

----------



Test Class Name: TestInternet