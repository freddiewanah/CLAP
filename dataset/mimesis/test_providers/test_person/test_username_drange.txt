def username(self, mask: t.Optional[str]=None, drange: t.Tuple[int, int]=(1800, 2100)) -> str:
    """Generate username by template.

        You can create many different usernames using masks.

        - **C** stands for capitalized username.
        - **U** stands for uppercase username.
        - **l** stands for lowercase username.
        - **d** stands for digits in username.

        You can also use symbols to separate the different parts
        of the username: **.** **_** **-**

        :param mask: Mask.
        :param drange: Digits range.
        :raises ValueError: If template is not supported.
        :return: Username as string.

        Example:
            >>> username(mask='C_C_d')
            Cotte_Article_1923
            >>> username(mask='U.l.d')
            ELKINS.wolverine.2013
            >>> username(mask='l_l_d', drange=(1900, 2021))
            plasmic_blockader_1907
        """
    if len(drange) != 2:
        raise ValueError('The drange parameter must contain only two integers.')
    if mask is None:
        mask = 'l_d'
    required_tags = 'CUl'
    tags = re.findall('[CUld.\\-_]', mask)
    if not any((tag in tags for tag in required_tags)):
        raise ValueError('Username mask must contain at least one of these: (C, U, l).')
    final_username = ''
    for tag in tags:
        username = self.random.choice(USERNAMES)
        if tag == 'C':
            final_username += username.capitalize()
        if tag == 'U':
            final_username += username.upper()
        elif tag == 'l':
            final_username += username.lower()
        elif tag == 'd':
            final_username += str(self.random.randint(*drange))
        elif tag in '-_.':
            final_username += tag
    return final_username

----------

def test_username_drange(self, _person):
    username = _person.username(mask='U.d', drange=(1000, 2000))
    (username, digits) = username.split('.')
    assert 1000 <= int(digits.strip()) <= 2000
    with pytest.raises(ValueError):
        _person.username(drange=(1000, 2000, 3000))

----------



Test Class Name: TestPerson