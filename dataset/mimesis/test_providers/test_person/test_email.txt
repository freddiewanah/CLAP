def email(self, domains: t.Optional[t.Sequence[str]]=None, unique: bool=False) -> str:
    """Generate a random email.

        :param domains: List of custom domains for emails.
        :param unique: Makes email addresses unique.
        :return: Email address.
        :raises ValueError: if \xabunique\xbb is True and the provider was seeded.

        :Example:
            foretime10@live.com
        """
    if unique and self.seed is not None:
        raise ValueError('You cannot use «unique» parameter with the seeded provider')
    if not domains:
        domains = EMAIL_DOMAINS
    domain = self.random.choice(domains)
    if not domain.startswith('@'):
        domain = '@' + domain
    if unique:
        name = self.random.randstr(unique)
    else:
        name = self.username(mask='ld')
    return f'{name}{domain}'

----------

@pytest.mark.parametrize('unique', [False, True])
def test_email(self, _person, unique):
    result = _person.email()
    assert re.match(patterns.EMAIL_REGEX, result)
    domains = ['@example.com', 'example.com']
    result = _person.email(domains=domains)
    assert re.match(patterns.EMAIL_REGEX, result)
    assert result.split('@')[1] == 'example.com'
    if unique:
        count = 1000000
        generated = set()
        for i in range(count):
            email = _person.email(domains=['example.com'], unique=unique)
            email_username = email.split('@')[0].strip()
            generated.add(email_username)
        assert len(generated) == count

----------



Test Class Name: TestPerson