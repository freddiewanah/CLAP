def title(self, gender: t.Optional[Gender]=None, title_type: t.Optional[TitleType]=None) -> str:
    """Generate a random title for name.

        You can generate random prefix or suffix
        for name using this method.

        :param gender: The gender.
        :param title_type: TitleType enum object.
        :return: The title.
        :raises NonEnumerableError: if gender or title_type in incorrect format.

        :Example:
            PhD.
        """
    gender_key = self.validate_enum(gender, Gender)
    title_key = self.validate_enum(title_type, TitleType)
    titles: t.List[str] = self.extract(['title', gender_key, title_key])
    return self.random.choice(titles)

----------

@pytest.mark.parametrize('title_type', [TitleType.ACADEMIC, TitleType.TYPICAL, None])
@pytest.mark.parametrize('gender', [Gender.FEMALE, Gender.MALE, None])
def test_title(self, person, gender, title_type):
    result = person.title(gender=gender, title_type=title_type)
    assert result is not None
    with pytest.raises(NonEnumerableError):
        person.title(title_type='nil')
        person.title(gender='nil')

----------



Test Class Name: TestPerson