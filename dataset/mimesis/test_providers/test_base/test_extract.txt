def extract(self, keys: t.List[str], default: t.Optional[t.Any]=None) -> t.Any:
    """Extracts nested values from JSON file by list of keys.

        :param keys: List of keys (order extremely matters).
        :param default: Default value.
        :return: Data.
        """
    if not keys:
        raise ValueError('The list of keys to extract cannot be empty.')
    try:
        return reduce(operator.getitem, keys, self._data)
    except (TypeError, KeyError):
        return default

----------

def test_extract(self, base_data_provider):
    dictionary = {'names': {'female': 'Ariel', 'male': 'John'}}
    base_data_provider._data = dictionary
    a = list(sorted(dictionary['names'].keys()))
    b = list(sorted(base_data_provider.extract(['names']).keys()))
    assert base_data_provider.extract(['names', 'male']) == 'John'
    assert base_data_provider.extract(['names', 'female']) == 'Ariel'
    assert base_data_provider.extract(['names', 'other'], default='Sam') == 'Sam'
    assert a == b
    with pytest.raises(ValueError):
        assert base_data_provider.extract([])

----------



Test Class Name: TestBase