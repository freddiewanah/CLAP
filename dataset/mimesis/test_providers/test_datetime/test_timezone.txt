def timezone(self, region: t.Optional[TimezoneRegion]=None) -> str:
    """Get a random timezone.

        :param region: Timezone region.
        :return: Timezone.
        """
    region_name = self.validate_enum(region, TimezoneRegion)
    return self.random.choice([tz for tz in TIMEZONES if tz.startswith(region_name)])

----------

@pytest.mark.parametrize('region', [TimezoneRegion.AFRICA, TimezoneRegion.AMERICA, TimezoneRegion.ANTARCTICA, TimezoneRegion.ARCTIC, TimezoneRegion.ASIA, TimezoneRegion.ATLANTIC, TimezoneRegion.AUSTRALIA, TimezoneRegion.EUROPE, TimezoneRegion.INDIAN, TimezoneRegion.PACIFIC])
def test_timezone(self, _datetime, region):
    result = _datetime.timezone(region=region)
    assert result in TIMEZONES
    assert result.startswith(region.value)

----------



Test Class Name: TestDatetime