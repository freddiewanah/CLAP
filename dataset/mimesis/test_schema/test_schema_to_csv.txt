def to_csv(self, file_path: str, iterations: int=100, **kwargs: t.Any) -> None:
    """Export a schema as a CSV file.

        :param file_path: File path.
        :param iterations: The required number of rows.
        :param kwargs: The keyword arguments for :py:class:`csv.DictWriter` class.

        *New in version 5.3.0*
        """
    data = self.create(iterations)
    fieldnames = list(data[0])
    with open(file_path, 'w', encoding='utf-8', newline='') as fp:
        dict_writer = csv.DictWriter(fp, fieldnames, **kwargs)
        dict_writer.writeheader()
        dict_writer.writerows(data)

----------

@pytest.mark.parametrize('iterations', [5, 10])
def test_schema_to_csv(schema, iterations):
    with tempfile.NamedTemporaryFile('r+') as temp_file:
        schema.to_csv(temp_file.name, iterations=iterations)
        dict_reader = csv.DictReader(temp_file)
        assert len(list(dict_reader)) == iterations
        assert isinstance(dict_reader, csv.DictReader)
        for row in dict_reader:
            assert 'id' in row and 'timestamp' in row

----------



Test Class Name: default