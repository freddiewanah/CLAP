def draw_instance_predictions(self, predictions):
    """
        Draw instance-level prediction results on an image.

        Args:
            predictions (Instances): the output of an instance detection/segmentation
                model. Following fields will be used to draw:
                "pred_boxes", "pred_classes", "scores", "pred_masks" (or "pred_masks_rle").

        Returns:
            output (VisImage): image object with visualizations.
        """
    boxes = predictions.pred_boxes if predictions.has('pred_boxes') else None
    scores = predictions.scores if predictions.has('scores') else None
    classes = predictions.pred_classes.tolist() if predictions.has('pred_classes') else None
    labels = _create_text_labels(classes, scores, self.metadata.get('thing_classes', None))
    keypoints = predictions.pred_keypoints if predictions.has('pred_keypoints') else None
    if predictions.has('pred_masks'):
        masks = np.asarray(predictions.pred_masks)
        masks = [GenericMask(x, self.output.height, self.output.width) for x in masks]
    else:
        masks = None
    if self._instance_mode == ColorMode.SEGMENTATION and self.metadata.get('thing_colors'):
        colors = [self._jitter([x / 255 for x in self.metadata.thing_colors[c]]) for c in classes]
        alpha = 0.8
    else:
        colors = None
        alpha = 0.5
    if self._instance_mode == ColorMode.IMAGE_BW:
        self.output.reset_image(self._create_grayscale_image((predictions.pred_masks.any(dim=0) > 0).numpy() if predictions.has('pred_masks') else None))
        alpha = 0.3
    self.overlay_instances(masks=masks, boxes=boxes, labels=labels, keypoints=keypoints, assigned_colors=colors, alpha=alpha)
    return self.output

----------

def test_BWmode_nomask(self):
    (img, boxes, _, _, masks) = self._random_data()
    num_inst = len(boxes)
    inst = Instances((img.shape[0], img.shape[1]))
    inst.pred_classes = torch.randint(0, 80, size=(num_inst,))
    inst.scores = torch.rand(num_inst)
    inst.pred_boxes = torch.from_numpy(boxes)
    v = Visualizer(img, self.metadata, instance_mode=ColorMode.IMAGE_BW)
    v.draw_instance_predictions(inst)
    inst = inst[:0]
    v = Visualizer(img, self.metadata, instance_mode=ColorMode.IMAGE_BW)
    output = v.draw_instance_predictions(inst).get_image()
    self.assertTrue(np.allclose(output[:, :, 0], output[:, :, 1]))
    self.assertTrue(np.allclose(output[:, :, 0], output[:, :, 2]))

----------

def _random_data(self):
    (H, W) = (100, 100)
    N = 10
    img = np.random.rand(H, W, 3) * 255
    boxxy = np.random.rand(N, 2) * (H // 2)
    boxes = np.concatenate((boxxy, boxxy + H // 2), axis=1)

    def _rand_poly():
        return np.random.rand(3, 2).flatten() * H
    polygons = [[_rand_poly() for _ in range(np.random.randint(1, 5))] for _ in range(N)]
    mask = np.zeros_like(img[:, :, 0], dtype=bool)
    mask[:40, 10:20] = 1
    labels = [str(i) for i in range(N)]
    return (img, boxes, labels, polygons, [mask] * N)

Test Class Name: TestVisualizer