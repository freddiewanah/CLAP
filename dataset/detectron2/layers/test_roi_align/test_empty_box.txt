@staticmethod
def backward(ctx, grad):
    shape = ctx.shape
    return (_NewEmptyTensorOp.apply(grad, shape), None)

----------

def test_empty_box(self):
    img = np.random.rand(5, 5)
    box = [3, 4, 5, 4]
    o = self._simple_roialign(img, box, 7)
    self.assertTrue(o.shape == (7, 7))
    self.assertTrue((o == 0).all())
    for dev in ['cpu'] + ['cuda'] if torch.cuda.is_available() else []:
        (input, output) = self._simple_roialign_with_grad(img, box, 7, torch.device(dev))
        output.sum().backward()
        self.assertTrue(torch.allclose(input.grad, torch.zeros_like(input)))

----------

def _simple_roialign(self, img, box, resolution, sampling_ratio=0, aligned=True):
    """
        RoiAlign with scale 1.0.
        """
    if isinstance(resolution, int):
        resolution = (resolution, resolution)
    op = ROIAlign(resolution, 1.0, sampling_ratio, aligned=aligned)
    input = torch.from_numpy(img[None, None, :, :].astype('float32'))
    rois = [0] + list(box)
    rois = torch.from_numpy(np.asarray(rois)[None, :].astype('float32'))
    output = op.forward(input, rois)
    if torch.cuda.is_available():
        output_cuda = op.forward(input.cuda(), rois.cuda()).cpu()
        self.assertTrue(torch.allclose(output, output_cuda))
    return output[0, 0]
def _simple_roialign_with_grad(self, img, box, resolution, device):
    if isinstance(resolution, int):
        resolution = (resolution, resolution)
    op = ROIAlign(resolution, 1.0, 0, aligned=True)
    input = torch.from_numpy(img[None, None, :, :].astype('float32'))
    rois = [0] + list(box)
    rois = torch.from_numpy(np.asarray(rois)[None, :].astype('float32'))
    input = input.to(device=device)
    rois = rois.to(device=device)
    input.requires_grad = True
    output = op.forward(input, rois)
    return (input, output)

Test Class Name: ROIAlignTest