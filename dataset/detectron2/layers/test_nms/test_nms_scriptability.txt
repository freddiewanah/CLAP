def batched_nms(boxes: torch.Tensor, scores: torch.Tensor, idxs: torch.Tensor, iou_threshold: float):
    """
    Same as torchvision.ops.boxes.batched_nms, but with float().
    """
    assert boxes.shape[-1] == 4
    return box_ops.batched_nms(boxes.float(), scores, idxs, iou_threshold)

----------

def test_nms_scriptability(self):
    N = 2000
    num_classes = 50
    (boxes, scores) = self._create_tensors(N)
    idxs = torch.randint(0, num_classes, (N,))
    scripted_batched_nms = torch.jit.script(batched_nms)
    err_msg = 'NMS is incompatible with jit-scripted NMS for IoU={}'
    for iou in [0.2, 0.5, 0.8]:
        keep_ref = batched_nms(boxes, scores, idxs, iou)
        backup = boxes.clone()
        scripted_keep = scripted_batched_nms(boxes, scores, idxs, iou)
        assert torch.allclose(boxes, backup), 'boxes modified by jit-scripted batched_nms'
        self.assertTrue(torch.equal(keep_ref, scripted_keep), err_msg.format(iou))

----------

def _create_tensors(self, N):
    boxes = random_boxes(N, 200)
    scores = torch.rand(N)
    return (boxes, scores)

Test Class Name: TestNMS