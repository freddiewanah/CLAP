@staticmethod
def cat(keypoints_list: List['Keypoints']) -> 'Keypoints':
    """
        Concatenates a list of Keypoints into a single Keypoints

        Arguments:
            keypoints_list (list[Keypoints])

        Returns:
            Keypoints: the concatenated Keypoints
        """
    assert isinstance(keypoints_list, (list, tuple))
    assert len(keypoints_list) > 0
    assert all((isinstance(keypoints, Keypoints) for keypoints in keypoints_list))
    cat_kpts = type(keypoints_list[0])(torch.cat([kpts.tensor for kpts in keypoints_list], dim=0))
    return cat_kpts

----------

def test_cat_keypoints(self):
    keypoints1 = Keypoints(torch.rand(2, 21, 3))
    keypoints2 = Keypoints(torch.rand(4, 21, 3))
    cat_keypoints = keypoints1.cat([keypoints1, keypoints2])
    self.assertTrue(torch.all(cat_keypoints.tensor[:2] == keypoints1.tensor).item())
    self.assertTrue(torch.all(cat_keypoints.tensor[2:] == keypoints2.tensor).item())

----------



Test Class Name: TestKeypoints