def pairwise_iou_rotated(boxes1, boxes2):
    """
    Return intersection-over-union (Jaccard index) of boxes.

    Both sets of boxes are expected to be in
    (x_center, y_center, width, height, angle) format.

    Arguments:
        boxes1 (Tensor[N, 5])
        boxes2 (Tensor[M, 5])

    Returns:
        iou (Tensor[N, M]): the NxM matrix containing the pairwise
            IoU values for every element in boxes1 and boxes2
    """
    return torch.ops.detectron2.box_iou_rotated(boxes1, boxes2)

----------

def test_iou_0_dim_cpu(self):
    boxes1 = torch.rand(0, 5, dtype=torch.float32)
    boxes2 = torch.rand(10, 5, dtype=torch.float32)
    expected_ious = torch.zeros(0, 10, dtype=torch.float32)
    ious = pairwise_iou_rotated(boxes1, boxes2)
    self.assertTrue(torch.allclose(ious, expected_ious))
    boxes1 = torch.rand(10, 5, dtype=torch.float32)
    boxes2 = torch.rand(0, 5, dtype=torch.float32)
    expected_ious = torch.zeros(10, 0, dtype=torch.float32)
    ious = pairwise_iou_rotated(boxes1, boxes2)
    self.assertTrue(torch.allclose(ious, expected_ious))

----------



Test Class Name: TestRotatedBoxesLayer