def pairwise_iou_rotated(boxes1, boxes2):
    """
    Return intersection-over-union (Jaccard index) of boxes.

    Both sets of boxes are expected to be in
    (x_center, y_center, width, height, angle) format.

    Arguments:
        boxes1 (Tensor[N, 5])
        boxes2 (Tensor[M, 5])

    Returns:
        iou (Tensor[N, M]): the NxM matrix containing the pairwise
            IoU values for every element in boxes1 and boxes2
    """
    return torch.ops.detectron2.box_iou_rotated(boxes1, boxes2)

----------

@unittest.skipIf(not torch.cuda.is_available(), 'CUDA not available')
def test_iou_too_many_boxes_cuda(self):
    (s1, s2) = (5, 1289035)
    boxes1 = torch.zeros(s1, 5)
    boxes2 = torch.zeros(s2, 5)
    ious_cuda = pairwise_iou_rotated(boxes1.cuda(), boxes2.cuda())
    self.assertTupleEqual(tuple(ious_cuda.shape), (s1, s2))

----------



Test Class Name: TestRotatedBoxesLayer