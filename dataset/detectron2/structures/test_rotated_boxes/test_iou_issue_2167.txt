def pairwise_iou_rotated(boxes1, boxes2):
    """
    Return intersection-over-union (Jaccard index) of boxes.

    Both sets of boxes are expected to be in
    (x_center, y_center, width, height, angle) format.

    Arguments:
        boxes1 (Tensor[N, 5])
        boxes2 (Tensor[M, 5])

    Returns:
        iou (Tensor[N, M]): the NxM matrix containing the pairwise
            IoU values for every element in boxes1 and boxes2
    """
    return torch.ops.detectron2.box_iou_rotated(boxes1, boxes2)

----------

def test_iou_issue_2167(self):
    for device in ['cpu'] + (['cuda'] if torch.cuda.is_available() else []):
        boxes1 = torch.tensor([[2563.74462890625, 1436.7901611328125, 2174.703369140625, 214.09500122070312, 115.11834716796875]], device=device)
        boxes2 = torch.tensor([[2563.74462890625, 1436.790283203125, 2174.702880859375, 214.09495544433594, 115.11835479736328]], device=device)
        ious = pairwise_iou_rotated(boxes1, boxes2)
        expected_ious = torch.tensor([[1.0]], dtype=torch.float32)
        self.assertTrue(torch.allclose(ious.cpu(), expected_ious))

----------



Test Class Name: TestRotatedBoxesLayer