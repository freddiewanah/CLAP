def get_bounding_boxes(self) -> Boxes:
    """
        Returns:
            Boxes: tight bounding boxes around bitmasks.
            If a mask is empty, it's bounding box will be all zero.
        """
    boxes = torch.zeros(self.tensor.shape[0], 4, dtype=torch.float32)
    x_any = torch.any(self.tensor, dim=1)
    y_any = torch.any(self.tensor, dim=2)
    for idx in range(self.tensor.shape[0]):
        x = torch.where(x_any[idx, :])[0]
        y = torch.where(y_any[idx, :])[0]
        if len(x) > 0 and len(y) > 0:
            boxes[idx, :] = torch.as_tensor([x[0], y[0], x[-1] + 1, y[-1] + 1], dtype=torch.float32)
    return Boxes(boxes)

----------

def test_get_bounding_box(self):
    masks = torch.tensor([[[False, False, False, True], [False, False, True, True], [False, True, True, False], [False, True, True, False]], [[False, False, False, False], [False, False, True, False], [False, True, True, False], [False, True, True, False]], torch.zeros(4, 4)])
    bitmask = BitMasks(masks)
    box_true = torch.tensor([[1, 0, 4, 4], [1, 1, 3, 4], [0, 0, 0, 0]], dtype=torch.float32)
    box = bitmask.get_bounding_boxes()
    self.assertTrue(torch.all(box.tensor == box_true).item())
    for box in box_true:
        poly = box[[0, 1, 2, 1, 2, 3, 0, 3]].numpy()
        mask = polygons_to_bitmask([poly], 4, 4)
        reconstruct_box = BitMasks(mask[None, :, :]).get_bounding_boxes()[0].tensor
        self.assertTrue(torch.all(box == reconstruct_box).item())
        reconstruct_box = PolygonMasks([[poly]]).get_bounding_boxes()[0].tensor
        self.assertTrue(torch.all(box == reconstruct_box).item())

----------



Test Class Name: TestBitMask