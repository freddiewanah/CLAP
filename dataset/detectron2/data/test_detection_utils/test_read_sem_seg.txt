def get(self, name):
    """
        Args:
            name (str): name of a dataset (e.g. coco_2014_train).

        Returns:
            Metadata: The :class:`Metadata` instance associated with this name,
            or create an empty one if none is available.
        """
    assert len(name)
    r = super().get(name, None)
    if r is None:
        r = self[name] = Metadata(name=name)
    return r

----------

def test_read_sem_seg(self):
    cityscapes_dir = MetadataCatalog.get('cityscapes_fine_sem_seg_val').gt_dir
    sem_seg_gt_path = os.path.join(cityscapes_dir, 'frankfurt', 'frankfurt_000001_083852_gtFine_labelIds.png')
    if not PathManager.exists(sem_seg_gt_path):
        raise unittest.SkipTest('Semantic segmentation ground truth {} not found.'.format(sem_seg_gt_path))
    sem_seg = detection_utils.read_image(sem_seg_gt_path, 'L')
    self.assertEqual(sem_seg.ndim, 3)
    self.assertEqual(sem_seg.shape[2], 1)
    self.assertEqual(sem_seg.dtype, np.uint8)
    self.assertEqual(sem_seg.max(), 32)
    self.assertEqual(sem_seg.min(), 1)

----------



Test Class Name: TestTransformAnnotations