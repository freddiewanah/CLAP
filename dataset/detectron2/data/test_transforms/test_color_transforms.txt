def apply_image(self, img, interp=None):
    (h, w) = self.output_size
    if len(img.shape) > 2 and img.shape[2] == 1:
        pil_image = Image.fromarray(img[:, :, 0], mode='L')
    else:
        pil_image = Image.fromarray(img)
    pil_image = pil_image.transform(size=(w, h), method=Image.EXTENT, data=self.src_rect, resample=interp if interp else self.interp, fill=self.fill)
    ret = np.asarray(pil_image)
    if len(img.shape) > 2 and img.shape[2] == 1:
        ret = np.expand_dims(ret, -1)
    return ret

----------

def test_color_transforms(self):
    rand_img = np.random.random((100, 100, 3)) * 255
    rand_img = rand_img.astype('uint8')
    noop_transform = T.ColorTransform(lambda img: img)
    self.assertTrue(np.array_equal(rand_img, noop_transform.apply_image(rand_img)))
    magnitude = np.random.randint(0, 256)
    solarize_transform = T.PILColorTransform(lambda img: ImageOps.solarize(img, magnitude))
    expected_img = ImageOps.solarize(Image.fromarray(rand_img), magnitude)
    self.assertTrue(np.array_equal(expected_img, solarize_transform.apply_image(rand_img)))

----------



Test Class Name: default