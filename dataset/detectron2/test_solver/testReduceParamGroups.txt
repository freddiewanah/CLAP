def reduce_param_groups(params: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    params = _expand_param_groups(params)
    groups = defaultdict(list)
    for item in params:
        cur_params = tuple(((x, y) for (x, y) in item.items() if x != 'params'))
        groups[cur_params].extend(item['params'])
    ret = []
    for (param_keys, param_values) in groups.items():
        cur = {kv[0]: kv[1] for kv in param_keys}
        cur['params'] = param_values
        ret.append(cur)
    return ret

----------

def testReduceParamGroups(self):
    params = [dict(params=['p1'], lr=1.0, weight_decay=4.0), dict(params=['p2', 'p6'], lr=2.0, weight_decay=3.0, momentum=2.0), dict(params=['p3'], lr=2.0, weight_decay=3.0, momentum=2.0), dict(params=['p4'], lr=1.0, weight_decay=3.0), dict(params=['p5'], lr=2.0, momentum=2.0)]
    gt_groups = [{'lr': 1.0, 'weight_decay': 4.0, 'params': ['p1']}, {'lr': 2.0, 'weight_decay': 3.0, 'momentum': 2.0, 'params': ['p2', 'p6', 'p3']}, {'lr': 1.0, 'weight_decay': 3.0, 'params': ['p4']}, {'lr': 2.0, 'momentum': 2.0, 'params': ['p5']}]
    out = reduce_param_groups(params)
    self.assertEqual(out, gt_groups)

----------



Test Class Name: TestOptimizer