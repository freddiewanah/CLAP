def add_ground_truth_to_proposals(gt: Union[List[Instances], List[Boxes]], proposals: List[Instances]) -> List[Instances]:
    """
    Call `add_ground_truth_to_proposals_single_image` for all images.

    Args:
        gt(Union[List[Instances], List[Boxes]): list of N elements. Element i is a Instances
            representing the ground-truth for image i.
        proposals (list[Instances]): list of N elements. Element i is a Instances
            representing the proposals for image i.

    Returns:
        list[Instances]: list of N Instances. Each is the proposals for the image,
            with field "proposal_boxes" and "objectness_logits".
    """
    assert gt is not None
    if len(proposals) != len(gt):
        raise ValueError('proposals and gt should have the same length as the number of images!')
    if len(proposals) == 0:
        return proposals
    return [add_ground_truth_to_proposals_single_image(gt_i, proposals_i) for (gt_i, proposals_i) in zip(gt, proposals)]

----------

def test_append_gt_to_proposal(self):
    proposals = Instances((10, 10), **{'proposal_boxes': Boxes(torch.empty((0, 4))), 'objectness_logits': torch.tensor([]), 'custom_attribute': torch.tensor([])})
    gt_boxes = Boxes(torch.tensor([[0, 0, 1, 1]]))
    self.assertRaises(AssertionError, add_ground_truth_to_proposals, [gt_boxes], [proposals])
    gt_instances = Instances((10, 10))
    gt_instances.gt_boxes = gt_boxes
    self.assertRaises(AssertionError, add_ground_truth_to_proposals, [gt_instances], [proposals])
    gt_instances.custom_attribute = torch.tensor([1])
    gt_instances.custom_attribute2 = torch.tensor([1])
    new_proposals = add_ground_truth_to_proposals([gt_instances], [proposals])[0]
    self.assertEqual(new_proposals.custom_attribute[0], 1)
    self.assertRaises(AttributeError, lambda : new_proposals.custom_attribute2)

----------



Test Class Name: RPNTest