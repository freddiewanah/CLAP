def predict_probs(self, predictions: Tuple[torch.Tensor, torch.Tensor], proposals: List[Instances]):
    """
        Args:
            predictions: return values of :meth:`forward()`.
            proposals (list[Instances]): proposals that match the features that were
                used to compute predictions.

        Returns:
            list[Tensor]:
                A list of Tensors of predicted class probabilities for each image.
                Element i has shape (Ri, K + 1), where Ri is the number of proposals for image i.
        """
    (scores, _) = predictions
    num_inst_per_image = [len(p) for p in proposals]
    if self.use_sigmoid_ce:
        probs = scores.sigmoid()
    else:
        probs = F.softmax(scores, dim=-1)
    return probs.split(num_inst_per_image, dim=0)

----------

def test_predict_probs_tracing(self):

    class Model(torch.nn.Module):

        def __init__(self, output_layer):
            super(Model, self).__init__()
            self._output_layer = output_layer

        def forward(self, scores, proposal_boxes):
            instances = Instances((10, 10))
            instances.proposal_boxes = Boxes(proposal_boxes)
            return self._output_layer.predict_probs((scores, None), [instances])
    box_head_output_size = 8
    box_predictor = FastRCNNOutputLayers(ShapeSpec(channels=box_head_output_size), box2box_transform=Box2BoxTransform(weights=(10, 10, 5, 5)), num_classes=5)
    model = Model(box_predictor)
    from detectron2.export.torchscript_patch import patch_builtin_len
    with torch.no_grad(), patch_builtin_len():
        func = torch.jit.trace(model, (torch.randn(10, 6), torch.rand(10, 4)))
        o = func(torch.randn(10, 6), torch.randn(10, 4))
        self.assertEqual(o[0].shape, (10, 6))
        o = func(torch.randn(5, 6), torch.randn(5, 4))
        self.assertEqual(o[0].shape, (5, 6))
        o = func(torch.randn(20, 6), torch.randn(20, 4))
        self.assertEqual(o[0].shape, (20, 6))

----------



Test Class Name: default