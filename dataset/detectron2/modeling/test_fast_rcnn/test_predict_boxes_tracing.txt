def predict_boxes(self, predictions: Tuple[torch.Tensor, torch.Tensor], proposals: List[Instances]):
    """
        Args:
            predictions: return values of :meth:`forward()`.
            proposals (list[Instances]): proposals that match the features that were
                used to compute predictions. The ``proposal_boxes`` field is expected.

        Returns:
            list[Tensor]:
                A list of Tensors of predicted class-specific or class-agnostic boxes
                for each image. Element i has shape (Ri, K * B) or (Ri, B), where Ri is
                the number of proposals for image i and B is the box dimension (4 or 5)
        """
    if not len(proposals):
        return []
    (_, proposal_deltas) = predictions
    num_prop_per_image = [len(p) for p in proposals]
    proposal_boxes = cat([p.proposal_boxes.tensor for p in proposals], dim=0)
    predict_boxes = self.box2box_transform.apply_deltas(proposal_deltas, proposal_boxes)
    return predict_boxes.split(num_prop_per_image)

----------

def test_predict_boxes_tracing(self):

    class Model(torch.nn.Module):

        def __init__(self, output_layer):
            super(Model, self).__init__()
            self._output_layer = output_layer

        def forward(self, proposal_deltas, proposal_boxes):
            instances = Instances((10, 10))
            instances.proposal_boxes = Boxes(proposal_boxes)
            return self._output_layer.predict_boxes((None, proposal_deltas), [instances])
    box_head_output_size = 8
    box_predictor = FastRCNNOutputLayers(ShapeSpec(channels=box_head_output_size), box2box_transform=Box2BoxTransform(weights=(10, 10, 5, 5)), num_classes=5)
    model = Model(box_predictor)
    from detectron2.export.torchscript_patch import patch_builtin_len
    with torch.no_grad(), patch_builtin_len():
        func = torch.jit.trace(model, (torch.randn(10, 20), torch.randn(10, 4)))
        o = func(torch.randn(10, 20), torch.randn(10, 4))
        self.assertEqual(o[0].shape, (10, 20))
        o = func(torch.randn(5, 20), torch.randn(5, 4))
        self.assertEqual(o[0].shape, (5, 20))
        o = func(torch.randn(20, 20), torch.randn(20, 4))
        self.assertEqual(o[0].shape, (20, 20))

----------



Test Class Name: FastRCNNTest