def instantiate(cfg):
    """
    Recursively instantiate objects defined in dictionaries by
    "_target_" and arguments.

    Args:
        cfg: a dict-like object with "_target_" that defines the caller, and
            other keys that define the arguments

    Returns:
        object instantiated by cfg
    """
    from omegaconf import ListConfig, DictConfig, OmegaConf
    if isinstance(cfg, ListConfig):
        lst = [instantiate(x) for x in cfg]
        return ListConfig(lst, flags={'allow_objects': True})
    if isinstance(cfg, list):
        return [instantiate(x) for x in cfg]
    if isinstance(cfg, DictConfig) and dataclasses.is_dataclass(cfg._metadata.object_type):
        return OmegaConf.to_object(cfg)
    if isinstance(cfg, abc.Mapping) and '_target_' in cfg:
        cfg = {k: instantiate(v) for (k, v) in cfg.items()}
        cls = cfg.pop('_target_')
        cls = instantiate(cls)
        if isinstance(cls, str):
            cls_name = cls
            cls = locate(cls_name)
            assert cls is not None, cls_name
        else:
            try:
                cls_name = cls.__module__ + '.' + cls.__qualname__
            except Exception:
                cls_name = str(cls)
        assert callable(cls), f'_target_ {cls} does not define a callable object'
        try:
            return cls(**cfg)
        except TypeError:
            logger = logging.getLogger(__name__)
            logger.error(f'Error when instantiating {cls_name}!')
            raise
    return cfg

----------

def test_process_unmatched_prev_idx(self):
    cfg = {'_target_': 'detectron2.tracking.iou_weighted_hungarian_bbox_iou_tracker.IOUWeightedHungarianBBoxIOUTracker', 'video_height': self._img_size[0], 'video_width': self._img_size[1], 'max_num_instances': self._max_num_instances, 'max_lost_frame_count': self._max_lost_frame_count, 'min_box_rel_dim': self._min_box_rel_dim, 'min_instance_period': self._min_instance_period, 'track_iou_threshold': self._track_iou_threshold}
    tracker = instantiate(cfg)
    prev_instances = tracker._initialize_extra_fields(self._prev_instances)
    prev_instances.ID_period = [3, 3]
    tracker._prev_instances = prev_instances
    curr_instances = tracker._initialize_extra_fields(self._curr_instances)
    matched_idx = np.array([0])
    matched_prev_idx = np.array([1])
    curr_instances = tracker._process_matched_idx(curr_instances, matched_idx, matched_prev_idx)
    curr_instances = tracker._process_unmatched_idx(curr_instances, matched_idx)
    curr_instances = tracker._process_unmatched_prev_idx(curr_instances, matched_prev_idx)
    self.assertTrue(curr_instances.ID[2] == 0)

----------



Test Class Name: TestIOUWeightedHungarianBBoxIOUTracker