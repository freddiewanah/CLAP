def ordered_indices(self):
    """Return an ordered list of indices. Batches will be constructed based
        on this order."""
    if self.shuffle:
        indices = np.random.permutation(len(self)).astype(np.int64)
    else:
        indices = np.arange(len(self), dtype=np.int64)
    if self.buckets is None:
        if self.tgt_sizes is not None:
            indices = indices[np.argsort(self.tgt_sizes[indices], kind='mergesort')]
        return indices[np.argsort(self.src_sizes[indices], kind='mergesort')]
    else:
        return indices[np.argsort(self.bucketed_num_tokens[indices], kind='mergesort')]

----------

def test_round_robin_zip_datasets(self):
    long_dataset = lang_pair_dataset([10, 9, 8, 11])
    short_dataset = lang_pair_dataset([11, 9])
    dataset = RoundRobinZipDatasets({'a': long_dataset, 'b': short_dataset})
    dataset.ordered_indices()
    assert dataset.longest_dataset is long_dataset
    self.assertEqual(dict(dataset[0]), {'a': sample(2, 8), 'b': sample(1, 9)})
    self.assertEqual(dict(dataset[2]), {'a': sample(0, 10), 'b': sample(1, 9)})

----------



Test Class Name: TestDataset