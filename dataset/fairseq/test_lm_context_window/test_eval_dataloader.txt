def eval_lm_dataloader(self, dataset, max_tokens: Optional[int]=36000, batch_size: Optional[int]=None, max_positions: Optional[int]=None, num_shards: int=1, shard_id: int=0, num_workers: int=1, data_buffer_size: int=10, context_window: int=0):
    if context_window > 0:
        dataset = LMContextWindowDataset(dataset=dataset, tokens_per_sample=self.args.tokens_per_sample, context_window=context_window, pad_idx=self.source_dictionary.pad())
    return self.get_batch_iterator(dataset=dataset, max_tokens=max_tokens, max_sentences=batch_size, max_positions=max_positions, ignore_invalid_inputs=True, num_shards=num_shards, shard_id=shard_id, num_workers=num_workers, data_buffer_size=data_buffer_size).next_epoch_itr(shuffle=False)

----------

def test_eval_dataloader(self):
    dictionary = test_utils.dummy_dictionary(10)
    assert len(dictionary) == 14
    assert dictionary.pad() == 1
    dataset = test_utils.TestDataset([torch.tensor([4, 5, 6, 7], dtype=torch.long), torch.tensor([8, 9, 10, 11], dtype=torch.long), torch.tensor([12, 13], dtype=torch.long)])
    dataset = MonolingualDataset(dataset, sizes=[4, 4, 2], src_vocab=dictionary)
    config = LanguageModelingConfig(tokens_per_sample=4)
    task = LanguageModelingTask(config, dictionary)
    eval_dataloader = task.eval_lm_dataloader(dataset=dataset, batch_size=1, context_window=2, num_workers=0)
    batch = next(eval_dataloader)
    assert batch['net_input']['src_tokens'][0].tolist() == [4, 5, 6, 7, 1, 1]
    assert batch['target'][0].tolist() == [4, 5, 6, 7, 1, 1]
    batch = next(eval_dataloader)
    assert batch['net_input']['src_tokens'][0].tolist() == [6, 7, 8, 9, 10, 11]
    assert batch['target'][0].tolist() == [1, 1, 8, 9, 10, 11]
    batch = next(eval_dataloader)
    assert batch['net_input']['src_tokens'][0].tolist() == [10, 11, 12, 13]
    assert batch['target'][0].tolist() == [1, 1, 12, 13]

----------



Test Class Name: TestLMContextWindow