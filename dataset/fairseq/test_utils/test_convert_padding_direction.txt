def convert_padding_direction(src_tokens, padding_idx, right_to_left: bool=False, left_to_right: bool=False):
    assert right_to_left ^ left_to_right
    pad_mask = src_tokens.eq(padding_idx)
    if not pad_mask.any():
        return src_tokens
    if left_to_right and (not pad_mask[:, 0].any()):
        return src_tokens
    if right_to_left and (not pad_mask[:, -1].any()):
        return src_tokens
    max_len = src_tokens.size(1)
    buffered = torch.empty(0).long()
    if max_len > 0:
        torch.arange(max_len, out=buffered)
    range = buffered.type_as(src_tokens).expand_as(src_tokens)
    num_pads = pad_mask.long().sum(dim=1, keepdim=True)
    if right_to_left:
        index = torch.remainder(range - num_pads, max_len)
    else:
        index = torch.remainder(range + num_pads, max_len)
    return src_tokens.gather(1, index)

----------

def test_convert_padding_direction(self):
    pad = 1
    left_pad = torch.LongTensor([[2, 3, 4, 5, 6], [1, 7, 8, 9, 10], [1, 1, 1, 11, 12]])
    right_pad = torch.LongTensor([[2, 3, 4, 5, 6], [7, 8, 9, 10, 1], [11, 12, 1, 1, 1]])
    self.assertAlmostEqual(right_pad, utils.convert_padding_direction(left_pad, pad, left_to_right=True))
    self.assertAlmostEqual(left_pad, utils.convert_padding_direction(right_pad, pad, right_to_left=True))

----------



Test Class Name: TestUtils