def apply_rotary_pos_emb(q, k, sinu_pos):
    sinu_pos = rearrange(sinu_pos, '() n (j d) -> n j d', j=2)
    (sin, cos) = sinu_pos.unbind(dim=-2)
    (sin, cos) = map(lambda t: repeat(t, 'b n -> b (n j)', j=2), (sin, cos))
    (q, k) = map(lambda t: t * cos + rotate_every_two(t) * sin, (q, k))
    return (q, k)

----------

def test_apply_rotary_pos_emb(self):
    (cos, sin) = self.rope_pos_emd(self.sample, self.T)
    query = self.sample.view(self.T, self.B, 1, self.C)
    expected_query = torch.tensor([[[[1.541, -0.2934]]], [[[-1.6555, -1.5263]]], [[[1.7231, -0.4041]]]])
    (new_query, new_key) = apply_rotary_pos_emb(query, query, cos, sin)
    self.assertTrue(np.allclose(expected_query.cpu().detach().numpy(), new_query.cpu().detach().numpy(), atol=0.0001))
    self.assertTrue(np.allclose(expected_query.cpu().detach().numpy(), new_key.cpu().detach().numpy(), atol=0.0001))

----------



Test Class Name: TestRotaryPositionalEmbedding