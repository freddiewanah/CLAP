def forward_qkv(self, query, key, value, **kwargs):
    """Transform query, key and value.
        Args:
            query: Query tensor  B X T1 X C
            key: Key tensor B X T2 X C
            value: Value tensor  B X T2 X C
        Returns:
            torch.Tensor: Transformed query tensor  B X n_head X T1 X d_k
            torch.Tensor: Transformed key tensor B X n_head X T2 X d_k
            torch.Tensor: Transformed value tensor  B X n_head X T2 X d_k
        """
    n_batch = query.size(0)
    q = self.linear_q(query).view(n_batch, -1, self.h, self.d_k)
    k = self.linear_k(key).view(n_batch, -1, self.h, self.d_k)
    v = self.linear_v(value).view(n_batch, -1, self.h, self.d_k)
    q = q.transpose(1, 2)
    k = k.transpose(1, 2)
    v = v.transpose(1, 2)
    return (q, k, v)

----------

def test_forward_qkv(self):
    expected_query = torch.tensor([[[[-1.0235, 0.0409], [0.4008, 1.3077], [0.5396, 2.0698]]]])
    expected_key = torch.tensor([[[[0.5053, -0.4965], [-0.373, -0.9473], [-0.7019, -0.1935]]]])
    expected_val = torch.tensor([[[[-0.994, 0.5403], [0.5924, -0.7619], [0.7504, -1.0892]]]])
    sample_t = self.sample.transpose(0, 1)
    (query, key, val) = self.MHA.forward_qkv(sample_t, sample_t, sample_t)
    self.assertTrue(np.allclose(expected_query.cpu().detach().numpy(), query.cpu().detach().numpy(), atol=0.0001))
    self.assertTrue(np.allclose(expected_key.cpu().detach().numpy(), key.cpu().detach().numpy(), atol=0.0001))
    self.assertTrue(np.allclose(expected_val.cpu().detach().numpy(), val.cpu().detach().numpy(), atol=0.0001))

----------



Test Class Name: TestESPNETMultiHeadedAttention