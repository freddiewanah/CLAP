def load_ema_from_checkpoint(fpath):
    """Loads exponential moving averaged (EMA) checkpoint from input and
    returns a model with ema weights.

    Args:
      fpath: A string path of checkpoint to load from.

    Returns:
      A dict of string keys mapping to various values. The 'model' key
      from the returned dict should correspond to an OrderedDict mapping
      string parameter names to torch Tensors.
    """
    params_dict = collections.OrderedDict()
    new_state = None
    with PathManager.open(fpath, 'rb') as f:
        new_state = torch.load(f, map_location=lambda s, _: torch.serialization.default_restore_location(s, 'cpu'))
        model_params = new_state['extra_state']['ema']
        for key in list(model_params.keys()):
            p = model_params[key]
            if isinstance(p, torch.HalfTensor):
                p = p.float()
            if key not in params_dict:
                params_dict[key] = p.clone()
            else:
                raise ValueError('Key {} is repeated in EMA model params.'.format(key))
        if len(params_dict) == 0:
            raise ValueError(f"Input checkpoint path '{fpath}' does not contain ema model weights, is this model trained with EMA?")
    new_state['model'] = params_dict
    return new_state

----------

def test_load_ema_from_checkpoint(self):
    dummy_state = {'a': torch.tensor([1]), 'b': torch.tensor([0.1])}
    with patch(f'{checkpoint_utils.__name__}.PathManager.open') as mock_open, patch(f'{checkpoint_utils.__name__}.torch.load') as mock_load:
        mock_load.return_value = {'extra_state': {'ema': dummy_state}}
        filename = 'ema_checkpoint.pt'
        state = checkpoint_utils.load_ema_from_checkpoint(filename)
        mock_open.assert_called_with(filename, 'rb')
        mock_load.assert_called()
        self.assertIn('a', state['model'])
        self.assertIn('b', state['model'])
        self.assertTrue(torch.allclose(dummy_state['a'], state['model']['a']))
        self.assertTrue(torch.allclose(dummy_state['b'], state['model']['b']))

----------



Test Class Name: TestCheckpointUtils