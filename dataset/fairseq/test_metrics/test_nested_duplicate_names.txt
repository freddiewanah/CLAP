def log_scalar(key: str, value: float, weight: float=1, priority: int=10, round: Optional[int]=None):
    """Log a scalar value.

    Args:
        key (str): name of the field to log
        value (float): value to log
        weight (float): weight that this value contributes to the average.
            A weight of 0 will always log the latest value.
        priority (int): smaller values are logged earlier in the output
        round (Optional[int]): number of digits to round to when displaying
    """
    for agg in get_active_aggregators():
        if key not in agg:
            agg.add_meter(key, AverageMeter(round=round), priority)
        agg[key].update(value, weight)

----------

def test_nested_duplicate_names(self):
    name = str(uuid.uuid4())
    metrics.reset_meters(name)
    with metrics.aggregate(name):
        metrics.log_scalar('loss', 1)
        with metrics.aggregate() as other:
            with metrics.aggregate(name):
                metrics.log_scalar('loss', 2)
        metrics.log_scalar('loss', 6)
    self.assertEqual(metrics.get_smoothed_values(name)['loss'], 3)
    self.assertEqual(other.get_smoothed_values()['loss'], 2)

----------



Test Class Name: TestMetrics