def prompt_and_delete(path, no_input=False):
    """
    Ask user if it's okay to delete the previously-downloaded file/directory.

    If yes, delete it. If no, checks to see if the old version should be
    reused. If yes, it's reused; otherwise, Cookiecutter exits.

    :param path: Previously downloaded zipfile.
    :param no_input: Suppress prompt to delete repo and just delete it.
    :return: True if the content was deleted
    """
    if no_input:
        ok_to_delete = True
    else:
        question = f"You've downloaded {path} before. Is it okay to delete and re-download it?"
        ok_to_delete = read_user_yes_no(question, 'yes')
    if ok_to_delete:
        if os.path.isdir(path):
            rmtree(path)
        else:
            os.remove(path)
        return True
    else:
        ok_to_reuse = read_user_yes_no('Do you want to re-use the existing version?', 'yes')
        if ok_to_reuse:
            return False
        sys.exit()

----------

def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmp_path):
    """Prompt should not ask if no input and rm file.

    In `prompt_and_delete()`, if `no_input` is True, the call to
    `prompt.read_user_yes_no()` should be suppressed.
    """
    mock_read_user = mocker.patch('cookiecutter.prompt.read_user_yes_no', return_value=True, autospec=True)
    repo_file = tmp_path.joinpath('repo.zip')
    repo_file.write_text('this is zipfile content')
    deleted = utils.prompt_and_delete(str(repo_file), no_input=True)
    assert not mock_read_user.called
    assert not repo_file.exists()
    assert deleted

----------



Test Class Name: default