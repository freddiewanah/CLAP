def prompt_for_config(context, no_input=False):
    """Prompt user to enter a new config.

    :param dict context: Source for field names and sample values.
    :param no_input: Do not prompt for user input and use only values from context.
    """
    cookiecutter_dict = OrderedDict([])
    env = StrictEnvironment(context=context)
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            cookiecutter_dict[key] = raw
            continue
        elif key.startswith('__'):
            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
            continue
        try:
            if isinstance(raw, list):
                val = prompt_choice_for_config(cookiecutter_dict, env, key, raw, no_input)
                cookiecutter_dict[key] = val
            elif isinstance(raw, bool):
                if no_input:
                    cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
                else:
                    cookiecutter_dict[key] = read_user_yes_no(key, raw)
            elif not isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input:
                    val = read_user_variable(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            continue
        try:
            if isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input and (not key.startswith('__')):
                    val = read_user_dict(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    return cookiecutter_dict

----------

def test_should_render_choices(self, mocker):
    """Verify Jinja2 templating engine works inside choices variables."""
    read_user_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
    read_user_choice.return_value = 'anewproject'
    read_user_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
    read_user_variable.return_value = 'A New Project'
    rendered_choices = ['foo', 'anewproject', 'bar']
    context = {'cookiecutter': OrderedDict([('project_name', 'A New Project'), ('pkg_name', ['foo', '{{ cookiecutter.project_name|lower|replace(" ", "") }}', 'bar'])])}
    expected = {'project_name': 'A New Project', 'pkg_name': 'anewproject'}
    cookiecutter_dict = prompt.prompt_for_config(context)
    read_user_variable.assert_called_once_with('project_name', 'A New Project')
    read_user_choice.assert_called_once_with('pkg_name', rendered_choices)
    assert cookiecutter_dict == expected

----------



Test Class Name: TestReadUserChoice