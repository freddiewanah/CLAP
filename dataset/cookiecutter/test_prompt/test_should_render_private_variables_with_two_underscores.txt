def prompt_for_config(context, no_input=False):
    """Prompt user to enter a new config.

    :param dict context: Source for field names and sample values.
    :param no_input: Do not prompt for user input and use only values from context.
    """
    cookiecutter_dict = OrderedDict([])
    env = StrictEnvironment(context=context)
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            cookiecutter_dict[key] = raw
            continue
        elif key.startswith('__'):
            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
            continue
        try:
            if isinstance(raw, list):
                val = prompt_choice_for_config(cookiecutter_dict, env, key, raw, no_input)
                cookiecutter_dict[key] = val
            elif isinstance(raw, bool):
                if no_input:
                    cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
                else:
                    cookiecutter_dict[key] = read_user_yes_no(key, raw)
            elif not isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input:
                    val = read_user_variable(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            continue
        try:
            if isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input and (not key.startswith('__')):
                    val = read_user_dict(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    return cookiecutter_dict

----------

def test_should_render_private_variables_with_two_underscores(self):
    """Test rendering of private variables with two underscores.

        There are three cases:
        1. Variables beginning with a single underscore are private and not rendered.
        2. Variables beginning with a double underscore are private and are rendered.
        3. Variables beginning with anything other than underscores are not private and
           are rendered.
        """
    context = {'cookiecutter': OrderedDict([('foo', 'Hello world'), ('bar', 123), ('rendered_foo', '{{ cookiecutter.foo|lower }}'), ('rendered_bar', 123), ('_hidden_foo', '{{ cookiecutter.foo|lower }}'), ('_hidden_bar', 123), ('__rendered_hidden_foo', '{{ cookiecutter.foo|lower }}'), ('__rendered_hidden_bar', 123)])}
    cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
    assert cookiecutter_dict == OrderedDict([('foo', 'Hello world'), ('bar', '123'), ('rendered_foo', 'hello world'), ('rendered_bar', '123'), ('_hidden_foo', '{{ cookiecutter.foo|lower }}'), ('_hidden_bar', 123), ('__rendered_hidden_foo', 'hello world'), ('__rendered_hidden_bar', '123')])

----------



Test Class Name: TestPrompt