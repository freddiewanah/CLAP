def prompt_for_config(context, no_input=False):
    """Prompt user to enter a new config.

    :param dict context: Source for field names and sample values.
    :param no_input: Do not prompt for user input and use only values from context.
    """
    cookiecutter_dict = OrderedDict([])
    env = StrictEnvironment(context=context)
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            cookiecutter_dict[key] = raw
            continue
        elif key.startswith('__'):
            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
            continue
        try:
            if isinstance(raw, list):
                val = prompt_choice_for_config(cookiecutter_dict, env, key, raw, no_input)
                cookiecutter_dict[key] = val
            elif isinstance(raw, bool):
                if no_input:
                    cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
                else:
                    cookiecutter_dict[key] = read_user_yes_no(key, raw)
            elif not isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input:
                    val = read_user_variable(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    for (key, raw) in context['cookiecutter'].items():
        if key.startswith('_') and (not key.startswith('__')):
            continue
        try:
            if isinstance(raw, dict):
                val = render_variable(env, raw, cookiecutter_dict)
                if not no_input and (not key.startswith('__')):
                    val = read_user_dict(key, val)
                cookiecutter_dict[key] = val
        except UndefinedError as err:
            msg = f"Unable to render variable '{key}'"
            raise UndefinedVariableInTemplate(msg, err, context) from err
    return cookiecutter_dict

----------

def test_should_render_deep_dict(self):
    """Verify nested structures like dict in dict, rendered correctly."""
    context = {'cookiecutter': {'project_name': 'Slartibartfast', 'details': {'key': 'value', 'integer_key': 37, 'other_name': '{{cookiecutter.project_name}}', 'dict_key': {'deep_key': 'deep_value', 'deep_integer': 42, 'deep_other_name': '{{cookiecutter.project_name}}', 'deep_list': ['deep value 1', '{{cookiecutter.project_name}}', 'deep value 3']}, 'list_key': ['value 1', '{{cookiecutter.project_name}}', 'value 3']}}}
    cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
    assert cookiecutter_dict == {'project_name': 'Slartibartfast', 'details': {'key': 'value', 'integer_key': '37', 'other_name': 'Slartibartfast', 'dict_key': {'deep_key': 'deep_value', 'deep_integer': '42', 'deep_other_name': 'Slartibartfast', 'deep_list': ['deep value 1', 'Slartibartfast', 'deep value 3']}, 'list_key': ['value 1', 'Slartibartfast', 'value 3']}}

----------



Test Class Name: TestPrompt