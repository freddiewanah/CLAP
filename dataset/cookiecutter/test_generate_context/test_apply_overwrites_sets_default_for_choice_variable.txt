def apply_overwrites_to_context(context, overwrite_context):
    """Modify the given context in place based on the overwrite_context."""
    for (variable, overwrite) in overwrite_context.items():
        if variable not in context:
            continue
        context_value = context[variable]
        if isinstance(context_value, list):
            if overwrite in context_value:
                context_value.remove(overwrite)
                context_value.insert(0, overwrite)
            else:
                raise ValueError(f'{overwrite} provided for choice variable {variable}, but the choices are {context_value}.')
        elif isinstance(context_value, dict) and isinstance(overwrite, dict):
            apply_overwrites_to_context(context_value, overwrite)
            context[variable] = context_value
        else:
            context[variable] = overwrite

----------

def test_apply_overwrites_sets_default_for_choice_variable(template_context):
    """Verify overwritten list member became a default value."""
    generate.apply_overwrites_to_context(context=template_context, overwrite_context={'orientation': 'landscape'})
    assert template_context['orientation'] == ['landscape', 'all', 'portrait']

----------



Test Class Name: default