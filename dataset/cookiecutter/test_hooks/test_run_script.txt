def run_script(script_path, cwd='.'):
    """Execute a script from a working directory.

    :param script_path: Absolute path to the script to run.
    :param cwd: The directory to run the script from.
    """
    run_thru_shell = sys.platform.startswith('win')
    if script_path.endswith('.py'):
        script_command = [sys.executable, script_path]
    else:
        script_command = [script_path]
    utils.make_executable(script_path)
    try:
        proc = subprocess.Popen(script_command, shell=run_thru_shell, cwd=cwd)
        exit_status = proc.wait()
        if exit_status != EXIT_SUCCESS:
            raise FailedHookException(f'Hook script failed (exit status: {exit_status})')
    except OSError as err:
        if err.errno == errno.ENOEXEC:
            raise FailedHookException('Hook script failed, might be an empty file or missing a shebang') from err
        raise FailedHookException(f'Hook script failed (error: {err})') from err

----------

def test_run_script(self):
    """Execute a hook script, independently of project generation."""
    hooks.run_script(os.path.join(self.hooks_path, self.post_hook))
    assert os.path.isfile('shell_post.txt')

----------



Test Class Name: TestExternalHooks