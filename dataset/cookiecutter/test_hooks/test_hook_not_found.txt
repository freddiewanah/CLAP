def find_hook(hook_name, hooks_dir='hooks'):
    """Return a dict of all hook scripts provided.

    Must be called with the project template as the current working directory.
    Dict's key will be the hook/script's name, without extension, while values
    will be the absolute path to the script. Missing scripts will not be
    included in the returned dict.

    :param hook_name: The hook to find
    :param hooks_dir: The hook directory in the template
    :return: The absolute path to the hook script or None
    """
    logger.debug('hooks_dir is %s', os.path.abspath(hooks_dir))
    if not os.path.isdir(hooks_dir):
        logger.debug('No hooks/dir in template_dir')
        return None
    scripts = []
    for hook_file in os.listdir(hooks_dir):
        if valid_hook(hook_file, hook_name):
            scripts.append(os.path.abspath(os.path.join(hooks_dir, hook_file)))
    if len(scripts) == 0:
        return None
    return scripts

----------

def test_hook_not_found(self):
    """`find_hooks` should return None if the hook could not be found."""
    with utils.work_in(self.repo_path):
        assert hooks.find_hook('unknown_hook') is None

----------



Test Class Name: TestFindHooks