def clone(repo_url: str, checkout: Optional[str]=None, clone_to_dir: 'os.PathLike[str]'='.', no_input: bool=False):
    """Clone a repo to the current directory.

    :param repo_url: Repo URL of unknown type.
    :param checkout: The branch, tag or commit ID to checkout after clone.
    :param clone_to_dir: The directory to clone to.
                         Defaults to the current directory.
    :param no_input: Do not prompt for user input and eventually force a refresh of
        cached resources.
    :returns: str with path to the new directory of the repository.
    """
    clone_to_dir = Path(clone_to_dir).expanduser()
    make_sure_path_exists(clone_to_dir)
    (repo_type, repo_url) = identify_repo(repo_url)
    if not is_vcs_installed(repo_type):
        msg = f"'{repo_type}' is not installed."
        raise VCSNotInstalled(msg)
    repo_url = repo_url.rstrip('/')
    repo_name = os.path.split(repo_url)[1]
    if repo_type == 'git':
        repo_name = repo_name.split(':')[-1].rsplit('.git')[0]
        repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))
    if repo_type == 'hg':
        repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))
    logger.debug(f'repo_dir is {repo_dir}')
    if os.path.isdir(repo_dir):
        clone = prompt_and_delete(repo_dir, no_input=no_input)
    else:
        clone = True
    if clone:
        try:
            subprocess.check_output([repo_type, 'clone', repo_url], cwd=clone_to_dir, stderr=subprocess.STDOUT)
            if checkout is not None:
                checkout_params = [checkout]
                if repo_type == 'hg':
                    checkout_params.insert(0, '--')
                subprocess.check_output([repo_type, 'checkout', *checkout_params], cwd=repo_dir, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as clone_error:
            output = clone_error.output.decode('utf-8')
            if 'not found' in output.lower():
                raise RepositoryNotFound(f'The repository {repo_url} could not be found, have you made a typo?') from clone_error
            if any((error in output for error in BRANCH_ERRORS)):
                raise RepositoryCloneFailed(f'The {checkout} branch of repository {repo_url} could not found, have you made a typo?') from clone_error
            logger.error('git clone failed with error: %s', output)
            raise
    return repo_dir

----------

@pytest.mark.parametrize('error_message', [b"fatal: repository 'https://github.com/hackebro/cookiedozer' not found", b'hg: abort: HTTP Error 404: Not Found'])
def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
    """In `clone()`, repository not found errors should raise an     appropriate exception."""
    mocker.patch('cookiecutter.vcs.subprocess.check_output', autospec=True, side_effect=[subprocess.CalledProcessError(-1, 'cmd', output=error_message)])
    repository_url = 'https://github.com/hackebro/cookiedozer'
    with pytest.raises(exceptions.RepositoryNotFound) as err:
        vcs.clone(repository_url, clone_to_dir=str(clone_dir), no_input=True)
    assert str(err.value) == f'The repository {repository_url} could not be found, have you made a typo?'

----------



Test Class Name: default