def expand_abbreviations(template, abbreviations):
    """Expand abbreviations in a template name.

    :param template: The project template name.
    :param abbreviations: Abbreviation definitions.
    """
    if template in abbreviations:
        return abbreviations[template]
    (prefix, sep, rest) = template.partition(':')
    if prefix in abbreviations:
        return abbreviations[prefix].format(rest)
    return template

----------

@pytest.mark.parametrize(('template', 'abbreviations', 'expected_result'), [('foo', {'foo': 'bar'}, 'bar'), ('baz', {'foo': 'bar'}, 'baz'), ('xx:a', {'xx': '<{0}>'}, '<a>'), ('gh:a', {'gh': '<{0}>'}, '<a>'), ('xx:a', {'xx': '<>'}, '<>'), ('gh:pydanny/cookiecutter-django', BUILTIN_ABBREVIATIONS, 'https://github.com/pydanny/cookiecutter-django.git'), ('gl:pydanny/cookiecutter-django', BUILTIN_ABBREVIATIONS, 'https://gitlab.com/pydanny/cookiecutter-django.git'), ('bb:pydanny/cookiecutter-django', BUILTIN_ABBREVIATIONS, 'https://bitbucket.org/pydanny/cookiecutter-django')], ids=('Simple expansion', 'Skip expansion (expansion not an abbreviation)', 'Expansion prefix', 'expansion_override_builtin', 'expansion_prefix_ignores_suffix', 'Correct expansion for builtin abbreviations (github)', 'Correct expansion for builtin abbreviations (gitlab)', 'Correct expansion for builtin abbreviations (bitbucket)'))
def test_abbreviation_expansion(template, abbreviations, expected_result):
    """Verify abbreviation unpacking."""
    expanded = expand_abbreviations(template, abbreviations)
    assert expanded == expected_result

----------



Test Class Name: default