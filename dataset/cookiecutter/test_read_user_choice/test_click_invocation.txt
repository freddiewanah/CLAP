def read_user_choice(var_name, options):
    """Prompt the user to choose from several options for the given variable.

    The first item will be returned if no input happens.

    :param str var_name: Variable as specified in the context
    :param list options: Sequence of options that are available to select from
    :return: Exactly one item of ``options`` that has been chosen by the user
    """
    if not isinstance(options, list):
        raise TypeError
    if not options:
        raise ValueError
    choice_map = OrderedDict(((f'{i}', value) for (i, value) in enumerate(options, 1)))
    choices = choice_map.keys()
    default = '1'
    choice_lines = ['{} - {}'.format(*c) for c in choice_map.items()]
    prompt = '\n'.join((f'Select {var_name}:', '\n'.join(choice_lines), f"Choose from {', '.join(choices)}"))
    user_choice = click.prompt(prompt, type=click.Choice(choices), default=default, show_choices=False)
    return choice_map[user_choice]

----------

@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))
def test_click_invocation(mocker, user_choice, expected_value):
    """Test click function called correctly by cookiecutter.

    Test for choice type invocation.
    """
    choice = mocker.patch('click.Choice')
    choice.return_value = click.Choice(OPTIONS)
    prompt = mocker.patch('click.prompt')
    prompt.return_value = f'{user_choice}'
    assert read_user_choice('varname', OPTIONS) == expected_value
    prompt.assert_called_once_with(EXPECTED_PROMPT, type=click.Choice(OPTIONS), default='1', show_choices=False)

----------



Test Class Name: default