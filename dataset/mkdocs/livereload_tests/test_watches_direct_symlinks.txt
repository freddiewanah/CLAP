def do_request(server, content):
    request = FakeRequest(content + ' HTTP/1.1')
    server.RequestHandlerClass(request, ('127.0.0.1', 0), server)
    response = request.out_file.getvalue()
    (headers, _, content) = response.partition(b'\r\n\r\n')
    (status, _, headers) = headers.partition(b'\r\n')
    status = status.split(None, 1)[1].decode()
    headers = email.message_from_bytes(headers)
    headers['_status'] = status
    return (headers, content.decode())

----------

@tempdir({'mkdocs.yml': 'original', 'mkdocs2.yml': 'original'}, prefix='tmp_dir')
@tempdir(prefix='origin_dir')
@tempdir({'subdir/foo.md': 'original'}, prefix='dest_docs_dir')
def test_watches_direct_symlinks(self, dest_docs_dir, origin_dir, tmp_dir):
    try:
        Path(origin_dir, 'docs').symlink_to(dest_docs_dir, target_is_directory=True)
        Path(origin_dir, 'mkdocs.yml').symlink_to(Path(tmp_dir, 'mkdocs.yml'))
    except NotImplementedError:
        self.skipTest('Creating symlinks not supported')
    started_building = threading.Event()

    def wait_for_build():
        result = started_building.wait(timeout=10)
        started_building.clear()
        with self.assertLogs('mkdocs.livereload'):
            do_request(server, 'GET /')
        return result
    with testing_server(tmp_dir, started_building.set) as server:
        server.watch(Path(origin_dir, 'docs'))
        server.watch(Path(origin_dir, 'mkdocs.yml'))
        time.sleep(0.01)
        Path(origin_dir, 'unrelated.md').write_text('foo')
        self.assertFalse(started_building.wait(timeout=0.5))
        Path(tmp_dir, 'mkdocs.yml').write_text('edited')
        self.assertTrue(wait_for_build())
        Path(dest_docs_dir, 'subdir', 'foo.md').write_text('edited')
        self.assertTrue(wait_for_build())

----------



Test Class Name: BuildTests