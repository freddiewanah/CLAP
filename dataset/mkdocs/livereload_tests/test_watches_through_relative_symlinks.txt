def watch(self, path: str, func: Optional[Callable[[], None]]=None, recursive: bool=True) -> None:
    """Add the 'path' to watched paths, call the function and reload when any file changes under it."""
    path = os.path.abspath(path)
    if func is None or func is self.builder:
        funct = self.builder
    else:
        funct = func
        warnings.warn("Plugins should not pass the 'func' parameter of watch(). The ability to execute custom callbacks will be removed soon.", DeprecationWarning, stacklevel=2)
    if path in self._watched_paths:
        self._watched_paths[path] += 1
        return
    self._watched_paths[path] = 1

    def callback(event):
        if event.is_directory:
            return
        log.debug(str(event))
        with self._rebuild_cond:
            self._to_rebuild[funct] = True
            self._rebuild_cond.notify_all()
    handler = watchdog.events.FileSystemEventHandler()
    handler.on_any_event = callback
    log.debug(f"Watching '{path}'")
    self._watch_refs[path] = self.observer.schedule(handler, path, recursive=recursive)

----------

@tempdir(prefix='site_dir')
@tempdir(['docs/unused.md', 'README.md'], prefix='origin_dir')
def test_watches_through_relative_symlinks(self, origin_dir, site_dir):
    docs_dir = Path(origin_dir, 'docs')
    with change_dir(docs_dir):
        try:
            Path(docs_dir, 'README.md').symlink_to(Path('..', 'README.md'))
        except NotImplementedError:
            self.skipTest('Creating symlinks not supported')
    started_building = threading.Event()
    with testing_server(docs_dir, started_building.set) as server:
        server.watch(docs_dir)
        time.sleep(0.01)
        Path(origin_dir, 'README.md').write_text('edited')
        self.assertTrue(started_building.wait(timeout=10))

----------



Test Class Name: BuildTests