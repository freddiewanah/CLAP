def do_request(server, content):
    request = FakeRequest(content + ' HTTP/1.1')
    server.RequestHandlerClass(request, ('127.0.0.1', 0), server)
    response = request.out_file.getvalue()
    (headers, _, content) = response.partition(b'\r\n\r\n')
    (status, _, headers) = headers.partition(b'\r\n')
    status = status.split(None, 1)[1].decode()
    headers = email.message_from_bytes(headers)
    headers['_status'] = status
    return (headers, content.decode())

----------

@tempdir({'test.html': '<!DOCTYPE html>\nhi', 'test.xml': '<?xml version="1.0" encoding="UTF-8"?>\n<foo></foo>', 'test.css': 'div { color: red; }', 'test.js': 'use strict;', 'test.json': '{"a": "b"}'})
def test_mime_types(self, site_dir):
    with testing_server(site_dir) as server:
        (headers, _) = do_request(server, 'GET /test.html')
        self.assertEqual(headers.get('content-type'), 'text/html')
        (headers, _) = do_request(server, 'GET /test.xml')
        self.assertIn(headers.get('content-type'), ['text/xml', 'application/xml'])
        (headers, _) = do_request(server, 'GET /test.css')
        self.assertEqual(headers.get('content-type'), 'text/css')
        (headers, _) = do_request(server, 'GET /test.js')
        self.assertEqual(headers.get('content-type'), 'application/javascript')
        (headers, _) = do_request(server, 'GET /test.json')
        self.assertEqual(headers.get('content-type'), 'application/json')

----------



Test Class Name: BuildTests