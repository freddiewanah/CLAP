def do_request(server, content):
    request = FakeRequest(content + ' HTTP/1.1')
    server.RequestHandlerClass(request, ('127.0.0.1', 0), server)
    response = request.out_file.getvalue()
    (headers, _, content) = response.partition(b'\r\n\r\n')
    (status, _, headers) = headers.partition(b'\r\n')
    status = status.split(None, 1)[1].decode()
    headers = email.message_from_bytes(headers)
    headers['_status'] = status
    return (headers, content.decode())

----------

@tempdir({'foo.docs': 'docs1'})
@tempdir({'foo.extra': 'extra1'})
@tempdir({'foo.site': 'original'})
def test_multiple_dirs_changes_rebuild_only_once(self, site_dir, extra_dir, docs_dir):
    started_building = threading.Event()

    def rebuild():
        self.assertFalse(started_building.is_set())
        started_building.set()
        content1 = Path(docs_dir, 'foo.docs').read_text()
        content2 = Path(extra_dir, 'foo.extra').read_text()
        Path(site_dir, 'foo.site').write_text(content1 + content2)
    with testing_server(site_dir, rebuild) as server:
        server.watch(docs_dir)
        server.watch(extra_dir)
        time.sleep(0.01)
        (_, output) = do_request(server, 'GET /foo.site')
        Path(docs_dir, 'foo.docs').write_text('docs2')
        Path(extra_dir, 'foo.extra').write_text('extra2')
        self.assertTrue(started_building.wait(timeout=10))
        (_, output) = do_request(server, 'GET /foo.site')
        self.assertEqual(output, 'docs2extra2')

----------



Test Class Name: BuildTests