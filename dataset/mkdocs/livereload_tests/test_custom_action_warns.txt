def watch(self, path: str, func: Optional[Callable[[], None]]=None, recursive: bool=True) -> None:
    """Add the 'path' to watched paths, call the function and reload when any file changes under it."""
    path = os.path.abspath(path)
    if func is None or func is self.builder:
        funct = self.builder
    else:
        funct = func
        warnings.warn("Plugins should not pass the 'func' parameter of watch(). The ability to execute custom callbacks will be removed soon.", DeprecationWarning, stacklevel=2)
    if path in self._watched_paths:
        self._watched_paths[path] += 1
        return
    self._watched_paths[path] = 1

    def callback(event):
        if event.is_directory:
            return
        log.debug(str(event))
        with self._rebuild_cond:
            self._to_rebuild[funct] = True
            self._rebuild_cond.notify_all()
    handler = watchdog.events.FileSystemEventHandler()
    handler.on_any_event = callback
    log.debug(f"Watching '{path}'")
    self._watch_refs[path] = self.observer.schedule(handler, path, recursive=recursive)

----------

@tempdir({'foo.docs': 'a'})
@tempdir({'foo.site': 'original'})
def test_custom_action_warns(self, site_dir, docs_dir):
    started_building = threading.Event()

    def rebuild():
        started_building.set()
        content = Path(docs_dir, 'foo.docs').read_text()
        Path(site_dir, 'foo.site').write_text(content * 5)
    with testing_server(site_dir) as server:
        with self.assertWarnsRegex(DeprecationWarning, 'func') as cm:
            server.watch(docs_dir, rebuild)
            time.sleep(0.01)
        self.assertIn('livereload_tests.py', cm.filename)
        Path(docs_dir, 'foo.docs').write_text('b')
        self.assertTrue(started_building.wait(timeout=10))
        (_, output) = do_request(server, 'GET /foo.site')
        self.assertEqual(output, 'bbbbb')

----------



Test Class Name: BuildTests