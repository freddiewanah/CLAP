def gh_deploy(config: MkDocsConfig, message: Optional[str]=None, force=False, no_history=False, ignore_version=False, shell=False) -> None:
    if not _is_cwd_git_repo():
        log.error('Cannot deploy - this directory does not appear to be a git repository')
    remote_branch = config.remote_branch
    remote_name = config.remote_name
    if not ignore_version:
        _check_version(remote_branch)
    if message is None:
        message = default_message
    sha = _get_current_sha(os.path.dirname(config.config_file_path))
    message = message.format(version=mkdocs.__version__, sha=sha)
    log.info("Copying '%s' to '%s' branch and pushing to GitHub.", config.site_dir, config.remote_branch)
    try:
        ghp_import.ghp_import(config.site_dir, mesg=message, remote=remote_name, branch=remote_branch, push=True, force=force, use_shell=shell, no_history=no_history, nojekyll=True)
    except ghp_import.GhpError as e:
        log.error(f'Failed to deploy to GitHub with error: \n{e.message}')
        raise Abort('Deployment Aborted!')
    cname_file = os.path.join(config.site_dir, 'CNAME')
    if os.path.isfile(cname_file):
        with open(cname_file) as f:
            cname_host = f.read().strip()
        log.info(f'Based on your CNAME file, your documentation should be available shortly at: http://{cname_host}')
        log.info('NOTE: Your DNS records must be configured appropriately for your CNAME URL to work.')
        return
    (host, path) = _get_remote_url(remote_name)
    if host is None or path is None:
        log.info('Your documentation should be available shortly.')
    else:
        (username, repo) = path.split('/', 1)
        if repo.endswith('.git'):
            repo = repo[:-len('.git')]
        url = f'https://{username}.github.io/{repo}/'
        log.info(f'Your documentation should shortly be available at: {url}')

----------

@mock.patch('mkdocs.commands.gh_deploy._is_cwd_git_repo', return_value=True)
@mock.patch('mkdocs.commands.gh_deploy._get_current_sha', return_value='shashas')
@mock.patch('mkdocs.commands.gh_deploy._check_version')
@mock.patch('ghp_import.ghp_import')
def test_deploy_error(self, mock_import, check_version, get_sha, is_repo):
    mock_import.side_effect = GhpError('TestError123')
    config = load_config(remote_branch='test')
    with self.assertLogs('mkdocs', level='ERROR') as cm:
        with self.assertRaises(Abort):
            gh_deploy.gh_deploy(config)
    self.assertEqual(cm.output, ['ERROR:mkdocs.commands.gh_deploy:Failed to deploy to GitHub with error: \nTestError123'])

----------



Test Class Name: TestGitHubDeploy