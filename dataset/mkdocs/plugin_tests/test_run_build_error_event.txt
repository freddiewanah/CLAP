def build(config: MkDocsConfig, live_server: bool=False, dirty: bool=False) -> None:
    """Perform a full site build."""
    logger = logging.getLogger('mkdocs')
    warning_counter = utils.CountHandler()
    warning_counter.setLevel(logging.WARNING)
    if config.strict:
        logging.getLogger('mkdocs').addHandler(warning_counter)
    try:
        start = time.monotonic()
        config = config.plugins.run_event('config', config)
        config.plugins.run_event('pre_build', config=config)
        if not dirty:
            log.info('Cleaning site directory')
            utils.clean_directory(config.site_dir)
        else:
            log.warning("A 'dirty' build is being performed, this will likely lead to inaccurate navigation and other links within your site. This option is designed for site development purposes only.")
        if not live_server:
            log.info(f'Building documentation to directory: {config.site_dir}')
            if dirty and site_directory_contains_stale_files(config.site_dir):
                log.info('The directory contains stale files. Use --clean to remove them.')
        files = get_files(config)
        env = config.theme.get_env()
        files.add_files_from_theme(env, config)
        files = config.plugins.run_event('files', files, config=config)
        nav = get_navigation(files, config)
        nav = config.plugins.run_event('nav', nav, config=config, files=files)
        log.debug('Reading markdown pages.')
        for file in files.documentation_pages():
            log.debug(f'Reading: {file.src_uri}')
            assert file.page is not None
            _populate_page(file.page, config, files, dirty)
        env = config.plugins.run_event('env', env, config=config, files=files)
        log.debug('Copying static assets.')
        files.copy_static_files(dirty=dirty)
        for template in config.theme.static_templates:
            _build_theme_template(template, env, files, config, nav)
        for template in config.extra_templates:
            _build_extra_template(template, files, config, nav)
        log.debug('Building markdown pages.')
        doc_files = files.documentation_pages()
        for file in doc_files:
            assert file.page is not None
            _build_page(file.page, config, doc_files, nav, env, dirty)
        config.plugins.run_event('post_build', config=config)
        counts = warning_counter.get_counts()
        if counts:
            msg = ', '.join((f'{v} {k.lower()}s' for (k, v) in counts))
            raise Abort(f'\nAborted with {msg} in strict mode!')
        log.info('Documentation built in %.2f seconds', time.monotonic() - start)
    except Exception as e:
        config.plugins.run_event('build_error', error=e)
        if isinstance(e, BuildError):
            log.error(str(e))
            raise Abort('\nAborted with a BuildError!')
        raise
    finally:
        logger.removeHandler(warning_counter)

----------

@tempdir()
def test_run_build_error_event(self, site_dir):
    build_errors = []

    class PluginRaisingError(plugins.BasePlugin):

        def __init__(self, error_on):
            self.error_on = error_on

        def on_pre_page(self, page, **kwargs):
            if self.error_on == 'pre_page':
                raise BuildError('pre page error')
            return page

        def on_page_markdown(self, markdown, **kwargs):
            if self.error_on == 'page_markdown':
                raise BuildError('page markdown error')
            return markdown

        def on_page_content(self, html, **kwargs):
            if self.error_on == 'page_content':
                raise PluginError('page content error')
            return html

        def on_post_page(self, html, **kwargs):
            if self.error_on == 'post_page':
                raise ValueError('post page error')

        def on_build_error(self, error, **kwargs):
            build_errors.append(error)
    cfg = load_config(site_dir=site_dir)
    cfg['plugins']['errorplugin'] = PluginRaisingError(error_on='pre_page')
    with self.assertLogs('mkdocs', level='ERROR'):
        self.assertRaises(Abort, build.build, cfg)
    cfg = load_config(site_dir=site_dir)
    cfg['plugins']['errorplugin'] = PluginRaisingError(error_on='page_markdown')
    with self.assertLogs('mkdocs', level='ERROR'):
        self.assertRaises(Abort, build.build, cfg)
    cfg = load_config(site_dir=site_dir)
    cfg['plugins']['errorplugin'] = PluginRaisingError(error_on='page_content')
    with self.assertLogs('mkdocs', level='ERROR'):
        self.assertRaises(Abort, build.build, cfg)
    cfg = load_config(site_dir=site_dir)
    cfg['plugins']['errorplugin'] = PluginRaisingError(error_on='post_page')
    with self.assertLogs('mkdocs', level='ERROR'):
        self.assertRaises(ValueError, build.build, cfg)
    cfg = load_config(site_dir=site_dir)
    cfg['plugins']['errorplugin'] = PluginRaisingError(error_on='')
    build.build(cfg)
    self.assertEqual(len(build_errors), 4)
    self.assertIs(build_errors[0].__class__, BuildError)
    self.assertEqual(str(build_errors[0]), 'pre page error')
    self.assertIs(build_errors[1].__class__, BuildError)
    self.assertEqual(str(build_errors[1]), 'page markdown error')
    self.assertIs(build_errors[2].__class__, PluginError)
    self.assertEqual(str(build_errors[2]), 'page content error')
    self.assertIs(build_errors[3].__class__, ValueError)
    self.assertEqual(str(build_errors[3]), 'post page error')

----------



Test Class Name: TestPluginCollection
