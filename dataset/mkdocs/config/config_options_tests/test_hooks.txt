def on_page_markdown(self, markdown: str, *, page: Page, config: MkDocsConfig, files: Files) -> Optional[str]:
    """
        The `page_markdown` event is called after the page's markdown is loaded
        from file and can be used to alter the Markdown source text. The meta-
        data has been stripped off and is available as `page.meta` at this point.

        Parameters:
            markdown: Markdown source text of page as string
            page: `mkdocs.nav.Page` instance
            config: global configuration object
            files: global files collection

        Returns:
            Markdown source text of page as string
        """
    return markdown

----------

@tempdir()
def test_hooks(self, src_dir) -> None:
    write_file(b'def on_page_markdown(markdown, **kwargs): return markdown.replace("f", "z")', os.path.join(src_dir, 'hooks', 'my_hook.py'))
    write_file(b'foo foo', os.path.join(src_dir, 'docs', 'index.md'))
    conf = self.get_config(self.Schema, {'hooks': ['hooks/my_hook.py']}, config_file_path=os.path.join(src_dir, 'mkdocs.yml'))
    self.assertIn('hooks/my_hook.py', conf.plugins)
    hook = conf.plugins['hooks/my_hook.py']
    self.assertTrue(hasattr(hook, 'on_page_markdown'))
    self.assertEqual({**conf.plugins.events, 'page_markdown': [hook.on_page_markdown]}, conf.plugins.events)
    self.assertEqual(hook.on_page_markdown('foo foo'), 'zoo zoo')
    self.assertFalse(hasattr(hook, 'on_nav'))

----------



Test Class Name: default