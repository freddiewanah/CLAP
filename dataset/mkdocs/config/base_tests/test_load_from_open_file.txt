def load_config(config_file: Optional[Union[str, IO]]=None, **kwargs) -> MkDocsConfig:
    """
    Load the configuration for a given file object or name

    The config_file can either be a file object, string or None. If it is None
    the default `mkdocs.yml` filename will loaded.

    Extra kwargs are passed to the configuration to replace any default values
    unless they themselves are None.
    """
    options = kwargs.copy()
    for (key, value) in options.copy().items():
        if value is None:
            options.pop(key)
    with _open_config_file(config_file) as fd:
        from mkdocs.config.defaults import MkDocsConfig
        cfg = MkDocsConfig(config_file_path=getattr(fd, 'name', ''))
        cfg.load_file(fd)
    cfg.load_dict(options)
    (errors, warnings) = cfg.validate()
    for (config_name, warning) in warnings:
        log.warning(f"Config value '{config_name}': {warning}")
    for (config_name, error) in errors:
        log.error(f"Config value '{config_name}': {error}")
    for (key, value) in cfg.items():
        log.debug(f"Config value '{key}' = {value!r}")
    if len(errors) > 0:
        raise exceptions.Abort(f'Aborted with {len(errors)} Configuration Errors!')
    elif cfg['strict'] and len(warnings) > 0:
        raise exceptions.Abort(f"Aborted with {len(warnings)} Configuration Warnings in 'strict' mode!")
    return cfg

----------

@tempdir()
def test_load_from_open_file(self, temp_path):
    """
        `load_config` can accept an open file descriptor.
        """
    config_fname = os.path.join(temp_path, 'mkdocs.yml')
    config_file = open(config_fname, 'w+')
    config_file.write('site_name: MkDocs Test\n')
    config_file.flush()
    os.mkdir(os.path.join(temp_path, 'docs'))
    cfg = base.load_config(config_file=config_file)
    self.assertTrue(isinstance(cfg, defaults.MkDocsConfig))
    self.assertEqual(cfg['site_name'], 'MkDocs Test')
    self.assertTrue(config_file.closed)

----------



Test Class Name: ConfigBaseTests