def validate(self, value: object) -> T:
    return self.run_validation(value)

----------

def test_pre_and_run_validation_errors(self):
    """A pre_validation error does not stop run_validation from running."""

    class InvalidConfigOption(c.BaseConfigOption):

        def pre_validation(self, config, key_name):
            raise ValidationError('pre_validation error')

        def run_validation(self, value):
            raise ValidationError('run_validation error')
    conf = base.Config(schema=(('invalid_option', InvalidConfigOption()),))
    (errors, warnings) = conf.validate()
    self.assertEqual(errors, [('invalid_option', ValidationError('pre_validation error')), ('invalid_option', ValidationError('run_validation error'))])
    self.assertEqual(warnings, [])

----------



Test Class Name: default