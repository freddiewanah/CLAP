def load_config(config_file: Optional[Union[str, IO]]=None, **kwargs) -> MkDocsConfig:
    """
    Load the configuration for a given file object or name

    The config_file can either be a file object, string or None. If it is None
    the default `mkdocs.yml` filename will loaded.

    Extra kwargs are passed to the configuration to replace any default values
    unless they themselves are None.
    """
    options = kwargs.copy()
    for (key, value) in options.copy().items():
        if value is None:
            options.pop(key)
    with _open_config_file(config_file) as fd:
        from mkdocs.config.defaults import MkDocsConfig
        cfg = MkDocsConfig(config_file_path=getattr(fd, 'name', ''))
        cfg.load_file(fd)
    cfg.load_dict(options)
    (errors, warnings) = cfg.validate()
    for (config_name, warning) in warnings:
        log.warning(f"Config value '{config_name}': {warning}")
    for (config_name, error) in errors:
        log.error(f"Config value '{config_name}': {error}")
    for (key, value) in cfg.items():
        log.debug(f"Config value '{key}' = {value!r}")
    if len(errors) > 0:
        raise exceptions.Abort(f'Aborted with {len(errors)} Configuration Errors!')
    elif cfg['strict'] and len(warnings) > 0:
        raise exceptions.Abort(f"Aborted with {len(warnings)} Configuration Warnings in 'strict' mode!")
    return cfg

----------

@tempdir()
def test_config_option(self, temp_path):
    """
        Users can explicitly set the config file using the '--config' option.
        Allows users to specify a config other than the default `mkdocs.yml`.
        """
    expected_result = {'site_name': 'Example', 'nav': [{'Introduction': 'index.md'}]}
    file_contents = dedent("\n            site_name: Example\n            nav:\n            - 'Introduction': 'index.md'\n            ")
    config_path = os.path.join(temp_path, 'mkdocs.yml')
    with open(config_path, 'w') as config_file:
        config_file.write(file_contents)
    os.mkdir(os.path.join(temp_path, 'docs'))
    result = config.load_config(config_file=config_file.name)
    self.assertEqual(result['site_name'], expected_result['site_name'])
    self.assertEqual(result['nav'], expected_result['nav'])

----------



Test Class Name: ConfigTests