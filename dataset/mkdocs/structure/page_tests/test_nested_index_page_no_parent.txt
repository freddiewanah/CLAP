def load_config(config_file: Optional[Union[str, IO]]=None, **kwargs) -> MkDocsConfig:
    """
    Load the configuration for a given file object or name

    The config_file can either be a file object, string or None. If it is None
    the default `mkdocs.yml` filename will loaded.

    Extra kwargs are passed to the configuration to replace any default values
    unless they themselves are None.
    """
    options = kwargs.copy()
    for (key, value) in options.copy().items():
        if value is None:
            options.pop(key)
    with _open_config_file(config_file) as fd:
        from mkdocs.config.defaults import MkDocsConfig
        cfg = MkDocsConfig(config_file_path=getattr(fd, 'name', ''))
        cfg.load_file(fd)
    cfg.load_dict(options)
    (errors, warnings) = cfg.validate()
    for (config_name, warning) in warnings:
        log.warning(f"Config value '{config_name}': {warning}")
    for (config_name, error) in errors:
        log.error(f"Config value '{config_name}': {error}")
    for (key, value) in cfg.items():
        log.debug(f"Config value '{key}' = {value!r}")
    if len(errors) > 0:
        raise exceptions.Abort(f'Aborted with {len(errors)} Configuration Errors!')
    elif cfg['strict'] and len(warnings) > 0:
        raise exceptions.Abort(f"Aborted with {len(warnings)} Configuration Warnings in 'strict' mode!")
    return cfg

----------

def test_nested_index_page_no_parent(self):
    cfg = load_config(docs_dir=self.DOCS_DIR)
    fl = File('sub1/index.md', cfg['docs_dir'], cfg['site_dir'], cfg['use_directory_urls'])
    pg = Page('Foo', fl, cfg)
    pg.parent = None
    self.assertEqual(pg.url, 'sub1/')
    self.assertEqual(pg.abs_url, None)
    self.assertEqual(pg.canonical_url, None)
    self.assertEqual(pg.edit_url, None)
    self.assertEqual(pg.file, fl)
    self.assertEqual(pg.content, None)
    self.assertFalse(pg.is_homepage)
    self.assertTrue(pg.is_index)
    self.assertTrue(pg.is_page)
    self.assertFalse(pg.is_section)
    self.assertTrue(pg.is_top_level)
    self.assertEqual(pg.markdown, None)
    self.assertEqual(pg.meta, {})
    self.assertEqual(pg.next_page, None)
    self.assertEqual(pg.parent, None)
    self.assertEqual(pg.previous_page, None)
    self.assertEqual(pg.title, 'Foo')
    self.assertEqual(pg.toc, [])

----------



Test Class Name: PageTests