def documentation_pages(self) -> Sequence[File]:
    """Return iterable of all Markdown page file objects."""
    return [file for file in self if file.is_documentation_page()]

----------

def test_files(self):
    fs = [File('index.md', '/path/to/docs', '/path/to/site', use_directory_urls=True), File('foo/bar.md', '/path/to/docs', '/path/to/site', use_directory_urls=True), File('foo/bar.html', '/path/to/docs', '/path/to/site', use_directory_urls=True), File('foo/bar.jpg', '/path/to/docs', '/path/to/site', use_directory_urls=True), File('foo/bar.js', '/path/to/docs', '/path/to/site', use_directory_urls=True), File('foo/bar.css', '/path/to/docs', '/path/to/site', use_directory_urls=True)]
    files = Files(fs)
    self.assertEqual([f for f in files], fs)
    self.assertEqual(len(files), 6)
    self.assertEqual(files.documentation_pages(), [fs[0], fs[1]])
    self.assertEqual(files.static_pages(), [fs[2]])
    self.assertEqual(files.media_files(), [fs[3], fs[4], fs[5]])
    self.assertEqual(files.javascript_files(), [fs[4]])
    self.assertEqual(files.css_files(), [fs[5]])
    self.assertEqual(files.get_file_from_path('foo/bar.jpg'), fs[3])
    self.assertEqual(files.get_file_from_path('foo/bar.jpg'), fs[3])
    self.assertEqual(files.get_file_from_path('missing.jpg'), None)
    self.assertTrue(fs[2].src_uri in files.src_uris)
    self.assertTrue(fs[2].src_uri in files.src_uris)
    extra_file = File('extra.md', '/path/to/docs', '/path/to/site', use_directory_urls=True)
    self.assertFalse(extra_file.src_uri in files.src_uris)
    files.append(extra_file)
    self.assertEqual(len(files), 7)
    self.assertTrue(extra_file.src_uri in files.src_uris)
    self.assertEqual(files.documentation_pages(), [fs[0], fs[1], extra_file])

----------



Test Class Name: TestFiles