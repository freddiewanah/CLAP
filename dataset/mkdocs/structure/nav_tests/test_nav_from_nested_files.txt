def get_navigation(files: Files, config: Union[MkDocsConfig, Mapping[str, Any]]) -> Navigation:
    """Build site navigation from config and files."""
    nav_config = config['nav'] or nest_paths((f.src_uri for f in files.documentation_pages()))
    items = _data_to_navigation(nav_config, files, config)
    if not isinstance(items, list):
        items = [items]
    pages = _get_by_type(items, Page)
    _add_previous_and_next_links(pages)
    _add_parent_links(items)
    missing_from_config = [file for file in files.documentation_pages() if file.page is None]
    if missing_from_config:
        log.info('The following pages exist in the docs directory, but are not included in the "nav" configuration:\n  - {}'.format('\n  - '.join((file.src_path for file in missing_from_config))))
        for file in missing_from_config:
            Page(None, file, config)
    links = _get_by_type(items, Link)
    for link in links:
        (scheme, netloc, path, query, fragment) = urlsplit(link.url)
        if scheme or netloc:
            log.debug(f"An external link to '{link.url}' is included in the 'nav' configuration.")
        elif link.url.startswith('/'):
            log.debug(f"An absolute path to '{link.url}' is included in the 'nav' configuration, which presumably points to an external resource.")
        else:
            msg = f"A relative path to '{link.url}' is included in the 'nav' configuration, which is not found in the documentation files"
            log.warning(msg)
    return Navigation(items, pages)

----------

def test_nav_from_nested_files(self):
    expected = dedent("\n            Page(title=[blank], url='/')\n            Section(title='About')\n                Page(title=[blank], url='/about/license/')\n                Page(title=[blank], url='/about/release-notes/')\n            Section(title='Api guide')\n                Page(title=[blank], url='/api-guide/debugging/')\n                Page(title=[blank], url='/api-guide/running/')\n                Page(title=[blank], url='/api-guide/testing/')\n                Section(title='Advanced')\n                    Page(title=[blank], url='/api-guide/advanced/part-1/')\n            ")
    cfg = load_config(site_url='http://example.com/')
    fs = ['index.md', 'about/license.md', 'about/release-notes.md', 'api-guide/debugging.md', 'api-guide/running.md', 'api-guide/testing.md', 'api-guide/advanced/part-1.md']
    files = Files([File(s, cfg['docs_dir'], cfg['site_dir'], cfg['use_directory_urls']) for s in fs])
    site_navigation = get_navigation(files, cfg)
    self.assertEqual(str(site_navigation).strip(), expected)
    self.assertEqual(len(site_navigation.items), 3)
    self.assertEqual(len(site_navigation.pages), 7)
    self.assertEqual(repr(site_navigation.homepage), "Page(title=[blank], url='/')")

----------



Test Class Name: SiteNavigationTests