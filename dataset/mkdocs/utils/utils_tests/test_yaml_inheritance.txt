def yaml_load(source: IO, loader: Optional[Type[yaml.Loader]]=None) -> Optional[Dict[str, Any]]:
    """Return dict of source YAML file using loader, recursively deep merging inherited parent."""
    Loader = loader or get_yaml_loader()
    result = yaml.load(source, Loader=Loader)
    if result is not None and 'INHERIT' in result:
        relpath = result.pop('INHERIT')
        abspath = os.path.normpath(os.path.join(os.path.dirname(source.name), relpath))
        if not os.path.exists(abspath):
            raise exceptions.ConfigurationError(f"Inherited config file '{relpath}' does not exist at '{abspath}'.")
        log.debug(f'Loading inherited configuration file: {abspath}')
        with open(abspath, 'rb') as fd:
            parent = yaml_load(fd, Loader)
        result = merge(parent, result)
    return result

----------

@tempdir(files={'base.yml': BASEYML, 'parent.yml': PARENTYML})
def test_yaml_inheritance(self, tdir):
    expected = {'foo': 'bar', 'baz': {'sub1': 'replaced', 'sub2': 2, 'sub3': 'new'}, 'deep1': {'deep2-1': {'deep3-1': 'replaced', 'deep3-2': 'bar'}, 'deep2-2': 'baz'}}
    with open(os.path.join(tdir, 'base.yml')) as fd:
        result = utils.yaml_load(fd)
    self.assertEqual(result, expected)

----------



Test Class Name: UtilsTests