def create_media_urls(path_list: List[str], page: Optional[Page]=None, base: str='') -> List[str]:
    """
    Return a list of URLs relative to the given page or using the base.
    """
    return [normalize_url(path, page, base) for path in path_list]

----------

def test_create_media_urls_use_directory_urls(self):
    expected_results = {'https://media.cdn.org/jq.js': ['https://media.cdn.org/jq.js', 'https://media.cdn.org/jq.js', 'https://media.cdn.org/jq.js'], 'http://media.cdn.org/jquery.js': ['http://media.cdn.org/jquery.js', 'http://media.cdn.org/jquery.js', 'http://media.cdn.org/jquery.js'], '//media.cdn.org/jquery.js': ['//media.cdn.org/jquery.js', '//media.cdn.org/jquery.js', '//media.cdn.org/jquery.js'], 'media.cdn.org/jquery.js': ['media.cdn.org/jquery.js', '../media.cdn.org/jquery.js', '../../media.cdn.org/jquery.js'], 'local/file/jquery.js': ['local/file/jquery.js', '../local/file/jquery.js', '../../local/file/jquery.js'], 'image.png': ['image.png', '../image.png', '../../image.png'], 'style.css?v=20180308c': ['style.css?v=20180308c', '../style.css?v=20180308c', '../../style.css?v=20180308c'], '#some_id': ['#some_id', '#some_id', '#some_id']}
    cfg = load_config(use_directory_urls=True)
    pages = [Page('Home', File('index.md', cfg['docs_dir'], cfg['site_dir'], cfg['use_directory_urls']), cfg), Page('About', File('about.md', cfg['docs_dir'], cfg['site_dir'], cfg['use_directory_urls']), cfg), Page('FooBar', File('foo/bar.md', cfg['docs_dir'], cfg['site_dir'], cfg['use_directory_urls']), cfg)]
    for (i, page) in enumerate(pages):
        urls = utils.create_media_urls(expected_results.keys(), page)
        self.assertEqual([v[i] for v in expected_results.values()], urls)

----------



Test Class Name: UtilsTests