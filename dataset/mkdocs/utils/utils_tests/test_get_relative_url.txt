def get_relative_url(url: str, other: str) -> str:
    """
    Return given url relative to other.

    Both are operated as slash-separated paths, similarly to the 'path' part of a URL.
    The last component of `other` is skipped if it contains a dot (considered a file).
    Actual URLs (with schemas etc.) aren't supported. The leading slash is ignored.
    Paths are normalized ('..' works as parent directory), but going higher than the
    root has no effect ('foo/../../bar' ends up just as 'bar').
    """
    (dirname, _, basename) = other.rpartition('/')
    if '.' in basename:
        other = dirname
    other_parts = _norm_parts(other)
    dest_parts = _norm_parts(url)
    common = 0
    for (a, b) in zip(other_parts, dest_parts):
        if a != b:
            break
        common += 1
    rel_parts = ['..'] * (len(other_parts) - common) + dest_parts[common:]
    relurl = '/'.join(rel_parts) or '.'
    return relurl + '/' if url.endswith('/') else relurl

----------

def test_get_relative_url(self):
    for case in [dict(url='foo/bar', other='foo', expected='bar'), dict(url='foo/bar.txt', other='foo', expected='bar.txt'), dict(url='foo', other='foo/bar', expected='..'), dict(url='foo', other='foo/bar.txt', expected='.'), dict(url='foo/../../bar', other='.', expected='bar'), dict(url='foo/../../bar', other='foo', expected='../bar'), dict(url='foo//./bar/baz', other='foo/bar/baz', expected='.'), dict(url='a/b/.././../c', other='.', expected='c'), dict(url='a/b/c/d/ee', other='a/b/c/d/e', expected='../ee'), dict(url='a/b/c/d/ee', other='a/b/z/d/e', expected='../../../c/d/ee'), dict(url='foo', other='bar.', expected='foo'), dict(url='foo', other='bar./', expected='../foo'), dict(url='foo', other='foo/bar./', expected='..'), dict(url='foo', other='foo/bar./.', expected='..'), dict(url='foo', other='foo/bar././', expected='..'), dict(url='foo/', other='foo/bar././', expected='../'), dict(url='foo', other='foo', expected='.'), dict(url='.foo', other='.foo', expected='.foo'), dict(url='.foo/', other='.foo', expected='.foo/'), dict(url='.foo', other='.foo/', expected='.'), dict(url='.foo/', other='.foo/', expected='./'), dict(url='///', other='', expected='./'), dict(url='a///', other='', expected='a/'), dict(url='a///', other='a', expected='./'), dict(url='.', other='here', expected='..'), dict(url='..', other='here', expected='..'), dict(url='../..', other='here', expected='..'), dict(url='../../a', other='here', expected='../a'), dict(url='..', other='here.txt', expected='.'), dict(url='a', other='', expected='a'), dict(url='a', other='..', expected='a'), dict(url='a', other='b', expected='../a'), dict(url='a', other='b/..', expected='../a'), dict(url='a', other='b/../..', expected='a'), dict(url='a/..../b', other='a/../b', expected='../a/..../b'), dict(url='a/я/b', other='a/я/c', expected='../b'), dict(url='a/я/b', other='a/яя/c', expected='../../я/b')]:
        (url, other, expected) = (case['url'], case['other'], case['expected'])
        with self.subTest(url=url, other=other):
            self.assertEqual(utils.get_relative_url(url, other), expected)
            self.assertEqual(utils.get_relative_url('/' + url, other), expected)
            self.assertEqual(utils.get_relative_url(url, '/' + other), expected)
            self.assertEqual(utils.get_relative_url('/' + url, '/' + other), expected)

----------



Test Class Name: UtilsTests