def load_config(config_file: Optional[Union[str, IO]]=None, **kwargs) -> MkDocsConfig:
    """
    Load the configuration for a given file object or name

    The config_file can either be a file object, string or None. If it is None
    the default `mkdocs.yml` filename will loaded.

    Extra kwargs are passed to the configuration to replace any default values
    unless they themselves are None.
    """
    options = kwargs.copy()
    for (key, value) in options.copy().items():
        if value is None:
            options.pop(key)
    with _open_config_file(config_file) as fd:
        from mkdocs.config.defaults import MkDocsConfig
        cfg = MkDocsConfig(config_file_path=getattr(fd, 'name', ''))
        cfg.load_file(fd)
    cfg.load_dict(options)
    (errors, warnings) = cfg.validate()
    for (config_name, warning) in warnings:
        log.warning(f"Config value '{config_name}': {warning}")
    for (config_name, error) in errors:
        log.error(f"Config value '{config_name}': {error}")
    for (key, value) in cfg.items():
        log.debug(f"Config value '{key}' = {value!r}")
    if len(errors) > 0:
        raise exceptions.Abort(f'Aborted with {len(errors)} Configuration Errors!')
    elif cfg['strict'] and len(warnings) > 0:
        raise exceptions.Abort(f"Aborted with {len(warnings)} Configuration Warnings in 'strict' mode!")
    return cfg

----------

@mock.patch('mkdocs.utils.write_file')
@mock.patch('mkdocs.commands.build._build_template', return_value='')
def test_skip_theme_template_empty_output(self, mock_build_template, mock_write_file):
    cfg = load_config()
    env = cfg['theme'].get_env()
    with self.assertLogs('mkdocs') as cm:
        build._build_theme_template('main.html', env, mock.Mock(), cfg, mock.Mock())
    self.assertEqual('\n'.join(cm.output), "INFO:mkdocs.commands.build:Template skipped: 'main.html' generated empty output.")
    mock_write_file.assert_not_called()
    mock_build_template.assert_called_once()

----------



Test Class Name: BuildTests