def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_bp_group_list_operations(app: Sanic):
    blueprint_1 = Blueprint('blueprint_1', url_prefix='/bp1')
    blueprint_2 = Blueprint('blueprint_2', url_prefix='/bp2')

    @blueprint_1.route('/')
    def blueprint_1_default_route(request):
        return text('BP1_OK')

    @blueprint_2.route('/')
    def blueprint_2_default_route(request):
        return text('BP2_OK')
    blueprint_group_1 = Blueprint.group(blueprint_1, blueprint_2, url_prefix='/bp')
    blueprint_3 = Blueprint('blueprint_2', url_prefix='/bp3')

    @blueprint_3.route('/second')
    def blueprint_3_second_route(request):
        return text('BP3_OK')
    assert len(blueprint_group_1) == 2
    blueprint_group_1.append(blueprint_3)
    assert len(blueprint_group_1) == 3
    del blueprint_group_1[2]
    assert len(blueprint_group_1) == 2
    blueprint_group_1[1] = blueprint_3
    assert len(blueprint_group_1) == 2
    assert blueprint_group_1.url_prefix == '/bp'

----------



Test Class Name: default