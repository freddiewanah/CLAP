@staticmethod
def group(*blueprints: Union[Blueprint, BlueprintGroup], url_prefix: Optional[str]=None, version: Optional[Union[int, str, float]]=None, strict_slashes: Optional[bool]=None, version_prefix: str='/v') -> BlueprintGroup:
    """
        Create a list of blueprints, optionally grouping them under a
        general URL prefix.

        :param blueprints: blueprints to be registered as a group
        :param url_prefix: URL route to be prepended to all sub-prefixes
        :param version: API Version to be used for Blueprint group
        :param strict_slashes: Indicate strict slash termination behavior
            for URL
        """

    def chain(nested) -> Iterable[Blueprint]:
        """itertools.chain() but leaves strings untouched"""
        for i in nested:
            if isinstance(i, (list, tuple)):
                yield from chain(i)
            else:
                yield i
    bps = BlueprintGroup(url_prefix=url_prefix, version=version, strict_slashes=strict_slashes, version_prefix=version_prefix)
    for bp in chain(blueprints):
        bps.append(bp)
    return bps

----------

def test_bp_group_indexing(app: Sanic):
    blueprint_1 = Blueprint('blueprint_1', url_prefix='/bp1')
    blueprint_2 = Blueprint('blueprint_2', url_prefix='/bp2')
    group = Blueprint.group(blueprint_1, blueprint_2)
    assert group[0] == blueprint_1
    with raises(expected_exception=IndexError) as e:
        _ = group[3]

----------



Test Class Name: default