def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_bp_group_with_additional_route_params(app: Sanic):
    blueprint_1 = Blueprint('blueprint_1', url_prefix='/bp1')
    blueprint_2 = Blueprint('blueprint_2', url_prefix='/bp2')

    @blueprint_1.route('/request_path', methods=frozenset({'PUT', 'POST'}), version=2)
    def blueprint_1_v2_method_with_put_and_post(request: Request):
        if request.method == 'PUT':
            return text('PUT_OK')
        elif request.method == 'POST':
            return text('POST_OK')

    @blueprint_2.route('/route/<param>', methods=frozenset({'DELETE', 'PATCH'}), name='test')
    def blueprint_2_named_method(request: Request, param):
        if request.method == 'DELETE':
            return text(f'DELETE_{param}')
        elif request.method == 'PATCH':
            return text(f'PATCH_{param}')
    blueprint_group = Blueprint.group(blueprint_1, blueprint_2, url_prefix='/api')

    @blueprint_group.middleware('request')
    def authenticate_request(request: Request):
        global AUTH
        auth = request.headers.get('authorization')
        if auth:
            if AUTH not in auth:
                return text('Unauthorized', status=401)
        else:
            return text('Unauthorized', status=401)

    @blueprint_group.middleware('response')
    def enhance_response_middleware(request: Request, response: HTTPResponse):
        response.headers.add('x-test-middleware', 'value')
    app.blueprint(blueprint_group)
    header = {'authorization': ' '.join(['Basic', AUTH])}
    (_, response) = app.test_client.put('/v2/api/bp1/request_path', headers=header)
    assert response.text == 'PUT_OK'
    assert response.headers.get('x-test-middleware') == 'value'
    (_, response) = app.test_client.post('/v2/api/bp1/request_path', headers=header)
    assert response.text == 'POST_OK'
    (_, response) = app.test_client.delete('/api/bp2/route/bp2', headers=header)
    assert response.text == 'DELETE_bp2'
    (_, response) = app.test_client.patch('/api/bp2/route/bp2', headers=header)
    assert response.text == 'PATCH_bp2'
    (_, response) = app.test_client.put('/v2/api/bp1/request_path')
    assert response.status == 401

----------



Test Class Name: default