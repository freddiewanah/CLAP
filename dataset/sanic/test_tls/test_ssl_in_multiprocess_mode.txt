def run(app, level=logging.DEBUG):

    @app.after_server_start
    async def stop(app, _):
        app.stop()
    with caplog.at_level(level):
        Sanic.serve()
    return caplog.record_tuples

----------

@pytest.mark.skipif(sys.platform not in ('linux', 'darwin'), reason='This test requires fork context')
def test_ssl_in_multiprocess_mode(app: Sanic, caplog):
    ssl_dict = {'cert': localhost_cert, 'key': localhost_key}
    event = Event()

    @app.main_process_start
    async def main_start(app: Sanic):
        app.shared_ctx.event = event

    @app.after_server_start
    async def shutdown(app):
        app.shared_ctx.event.set()
        app.stop()
    assert not event.is_set()
    with use_context('fork'):
        with caplog.at_level(logging.INFO):
            app.run(ssl=ssl_dict)
    assert event.is_set()
    assert ('sanic.root', logging.INFO, "Goin' Fast @ https://127.0.0.1:8000") in caplog.record_tuples

----------



Test Class Name: Creator