def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize('app_verbosity,log_verbosity,exists', ((0, 0, True), (0, 1, False), (0, 2, False), (1, 0, True), (1, 1, True), (1, 2, False), (2, 0, True), (2, 1, True), (2, 2, True)))
def test_verbosity(app, caplog, app_verbosity, log_verbosity, exists):
    rand_string = str(uuid.uuid4())

    @app.get('/')
    def log_info(request):
        logger.info('DEFAULT')
        logger.info(rand_string, extra={'verbosity': log_verbosity})
        return text('hello')
    with caplog.at_level(logging.INFO):
        _ = app.test_client.get('/', server_kwargs={'verbosity': app_verbosity})
    record = ('sanic.root', logging.INFO, rand_string)
    if exists:
        assert record in caplog.record_tuples
    else:
        assert record not in caplog.record_tuples
    if app_verbosity == 0:
        assert ('sanic.root', logging.INFO, 'DEFAULT') in caplog.record_tuples

----------



Test Class Name: default