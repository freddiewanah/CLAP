@property
def json(self) -> Any:
    """
        :return: The request body parsed as JSON
        :rtype: Any
        """
    if self.parsed_json is None:
        self.load_json()
    return self.parsed_json

----------

def test_fallback_with_content_type_mismatch_accept(app):
    app.config.FALLBACK_ERROR_FORMAT = 'auto'
    (_, response) = app.test_client.get('/error', headers={'content-type': 'application/json', 'accept': 'text/plain'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    (_, response) = app.test_client.get('/error', headers={'content-type': 'text/html', 'accept': 'foo/bar'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    app.router.reset()

    @app.route('/alt1')
    @app.route('/alt2', error_format='text')
    @app.route('/alt3', error_format='html')
    def handler(_):
        raise Exception('problem here')
        return json({})
    app.router.finalize()
    (_, response) = app.test_client.get('/alt1', headers={'accept': 'foo/bar'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    (_, response) = app.test_client.get('/alt1', headers={'accept': 'foo/bar,*/*'})
    assert response.status == 500
    assert response.content_type == 'application/json'
    (_, response) = app.test_client.get('/alt2', headers={'accept': 'foo/bar'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    (_, response) = app.test_client.get('/alt2', headers={'accept': 'foo/bar,*/*'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    (_, response) = app.test_client.get('/alt3', headers={'accept': 'foo/bar'})
    assert response.status == 500
    assert response.content_type == 'text/plain; charset=utf-8'
    (_, response) = app.test_client.get('/alt3', headers={'accept': 'foo/bar,text/html'})
    assert response.status == 500
    assert response.content_type == 'text/html; charset=utf-8'

----------



Test Class Name: default