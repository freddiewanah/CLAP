def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_custom_request():
    app = Sanic(name='Test', request_class=CustomRequest)

    @app.route('/post', methods=['POST'])
    async def post_handler(request):
        return text('OK')

    @app.route('/get')
    async def get_handler(request):
        return text('OK')
    payload = {'test': 'OK'}
    headers = {'content-type': 'application/json'}
    (request, response) = app.test_client.post('/post', data=json_dumps(payload), headers=headers)
    assert request.body == b'{"TEST":"OK"}'
    assert request.json.get('TEST') == 'OK'
    assert response.text == 'OK'
    assert response.status == 200
    (request, response) = app.test_client.get('/get')
    assert request.body == b''
    assert response.text == 'OK'
    assert response.status == 200

----------



Test Class Name: CustomRequest