def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize('method', HTTP_METHODS)
def test_versioned_named_routes_get(method):
    app = Sanic('app')
    bp = Blueprint('test_bp', url_prefix='/bp')
    method = method.lower()
    route_name = f'route_{method}'
    route_name2 = f'route2_{method}'
    func = getattr(app, method)
    if callable(func):

        @func(f'/{method}', version=1, name=route_name)
        def handler(request):
            return text('OK')
    else:
        raise
    func = getattr(bp, method)
    if callable(func):

        @func(f'/{method}', version=1, name=route_name2)
        def handler2(request):
            return text('OK')
    else:
        raise
    app.blueprint(bp)
    assert app.router.routes_all['v1', method].name == f'app.{route_name}'
    route = app.router.routes_all['v1', 'bp', method]
    assert route.name == f'app.test_bp.{route_name2}'
    assert app.url_for(route_name) == f'/v1/{method}'
    url = app.url_for(f'test_bp.{route_name2}')
    assert url == f'/v1/bp/{method}'
    with pytest.raises(URLBuildError):
        app.url_for('handler')

----------



Test Class Name: default