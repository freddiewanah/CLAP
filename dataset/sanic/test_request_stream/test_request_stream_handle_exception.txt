def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_request_stream_handle_exception(app):
    """for handling exceptions properly"""

    @app.post('/post/<id>', stream=True)
    async def post(request, id):
        result = b''
        while True:
            body = await request.stream.read()
            if body is None:
                break
            result += body
        return text(result.decode())
    (request, response) = app.test_client.post('/in_valid_post', data=data)
    assert response.status == 404
    assert 'Requested URL /in_valid_post not found' in response.text
    (request, response) = app.test_client.get('/post/random_id')
    assert response.status == 405
    assert 'Method GET not allowed for URL /post/random_id' in response.text

----------



Test Class Name: SimpleView