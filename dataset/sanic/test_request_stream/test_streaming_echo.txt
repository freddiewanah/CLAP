def run(app, level=logging.DEBUG):

    @app.after_server_start
    async def stop(app, _):
        app.stop()
    with caplog.at_level(level):
        Sanic.serve()
    return caplog.record_tuples

----------

def test_streaming_echo():
    """2-way streaming chat between server and client."""
    app = Sanic(name='Test')

    @app.post('/echo', stream=True)
    async def handler(request):
        res = await request.respond(content_type='text/plain; charset=utf-8')
        await res.send(end_stream=False)
        async for data in request.stream:
            await res.send(data.swapcase())
        await res.send(b'-', end_stream=True)

    @app.listener('after_server_start')
    async def client_task(app, loop):
        try:
            (reader, writer) = await asyncio.open_connection('localhost', 8000)
            await client(app, reader, writer)
        finally:
            writer.close()
            app.stop()

    async def client(app, reader, writer):
        host = f'host: localhost:8000\r\n'.encode()
        writer.write(b'POST /echo HTTP/1.1\r\n' + host + b'content-length: 2\r\ncontent-type: text/plain; charset=utf-8\r\n\r\n')
        res = b''
        while not b'\r\n\r\n' in res:
            res += await reader.read(4096)
        assert res.startswith(b'HTTP/1.1 200 OK\r\n')
        assert res.endswith(b'\r\n\r\n')
        buffer = b''

        async def read_chunk():
            nonlocal buffer
            while not b'\r\n' in buffer:
                data = await reader.read(4096)
                assert data
                buffer += data
            (size, buffer) = buffer.split(b'\r\n', 1)
            size = int(size, 16)
            if size == 0:
                return None
            while len(buffer) < size + 2:
                data = await reader.read(4096)
                assert data
                buffer += data
            assert buffer[size:size + 2] == b'\r\n'
            (ret, buffer) = (buffer[:size], buffer[size + 2:])
            return ret
        writer.write(b'a')
        res = await read_chunk()
        assert res == b'A'
        writer.write(b'b')
        res = await read_chunk()
        assert res == b'B'
        res = await read_chunk()
        assert res == b'-'
        res = await read_chunk()
        assert res == None
    app.run(access_log=False, single_process=True)

----------



Test Class Name: SimpleView