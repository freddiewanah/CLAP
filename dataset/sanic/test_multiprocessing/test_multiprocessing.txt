def run(app, level=logging.DEBUG):

    @app.after_server_start
    async def stop(app, _):
        app.stop()
    with caplog.at_level(level):
        Sanic.serve()
    return caplog.record_tuples

----------

@pytest.mark.skipif(not hasattr(signal, 'SIGALRM'), reason='SIGALRM is not implemented for this platform, we have to come up with another timeout strategy to test these')
@pytest.mark.skipif(sys.platform not in ('linux', 'darwin'), reason='This test requires fork context')
def test_multiprocessing(app):
    """Tests that the number of children we produce is correct"""
    num_workers = random.choice(range(2, multiprocessing.cpu_count() * 2 + 1))
    process_list = set()

    @app.after_server_start
    async def shutdown(app):
        await sleep(2.1)
        app.stop()

    def stop_on_alarm(*args):
        for process in multiprocessing.active_children():
            process_list.add(process.pid)
    signal.signal(signal.SIGALRM, stop_on_alarm)
    signal.alarm(2)
    with use_context('fork'):
        app.run(HOST, 4120, workers=num_workers, debug=True)
    assert len(process_list) == num_workers + 1

----------



Test Class Name: default