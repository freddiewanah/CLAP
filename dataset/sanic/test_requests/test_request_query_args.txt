def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_request_query_args(app):
    params = [('test', 'value1'), ('test', 'value2')]

    @app.get('/')
    def handler(request):
        return text('pass')
    (request, response) = app.test_client.get('/', params=params)
    assert request.query_args == params
    assert request.parsed_not_grouped_args[False, False, 'utf-8', 'replace'] == request.query_args
    (request, response) = app.test_client.get('/?test=value1&test=value2')
    assert request.query_args == params
    params = [('test1', 'value1'), ('test2', 'value2')]
    (request, response) = app.test_client.get('/', params=params)
    assert request.query_args == params
    (request, response) = app.test_client.get('/')
    assert not request.query_args

----------



Test Class Name: Bar