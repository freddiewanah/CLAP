@property
def json(self) -> Any:
    """
        :return: The request body parsed as JSON
        :rtype: Any
        """
    if self.parsed_json is None:
        self.load_json()
    return self.parsed_json

----------

def test_standard_forwarded(app):

    @app.route('/')
    async def handler(request):
        return json(request.forwarded)
    app.config.PROXIES_COUNT = 1
    app.config.REAL_IP_HEADER = 'x-real-ip'
    headers = {'Forwarded': 'for=1.1.1.1, for=injected;host=", for="[::2]";proto=https;host=me.tld;path="/app/";secret=mySecret,for=broken;;secret=b0rked, for=127.0.0.3;scheme=http;port=1234', 'X-Real-IP': '127.0.0.2', 'X-Forwarded-For': '127.0.1.1', 'X-Scheme': 'ws', 'Host': 'local.site'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '127.0.0.2', 'proto': 'ws'}
    assert request.remote_addr == '127.0.0.2'
    assert request.scheme == 'ws'
    assert request.server_name == 'local.site'
    assert request.server_port == 80
    app.config.FORWARDED_SECRET = 'mySecret'
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '[::2]', 'proto': 'https', 'host': 'me.tld', 'path': '/app/', 'secret': 'mySecret'}
    assert request.remote_addr == '[::2]'
    assert request.server_name == 'me.tld'
    assert request.scheme == 'https'
    assert request.server_port == 443
    headers['Forwarded'] = ''
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '127.0.0.2', 'proto': 'ws'}
    (request, response) = app.test_client.get('/', headers={'Forwarded': '.'})
    assert response.json == {}
    headers = {'Forwarded': 'for=1.1.1.1;secret=x, for=127.0.0.1', 'X-Real-IP': '127.0.0.2'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '127.0.0.2'}
    assert request.remote_addr == '127.0.0.2'
    headers = {'Forwarded': 'Secret="mySecret";For=127.0.0.4;Port=1234'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '127.0.0.4', 'port': 1234, 'secret': 'mySecret'}
    headers = {'Forwarded': 'for=test;quoted="\\,x=x;y=\\";secret=mySecret'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': 'test', 'quoted': '\\,x=x;y=\\', 'secret': 'mySecret'}
    headers = {'Forwarded': 'for=test;secret=mySecret;b0rked;proto=wss;'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': 'test', 'secret': 'mySecret'}
    headers = {'Forwarded': 'for=test;b0rked;secret=mySecret;proto=wss'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'proto': 'wss', 'secret': 'mySecret'}
    headers = {'Forwarded': 'b0rked;secret=mySecret;proto=wss'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'proto': 'wss', 'secret': 'mySecret'}
    headers = {'Forwarded': 'PROTO=WSS;BY="CAFE::8000";FOR=unknown;PORT=X;HOST="A:2";PATH="/With%20Spaces%22Quoted%22/sanicApp?key=val";SECRET=mySecret'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'proto': 'wss', 'by': '[cafe::8000]', 'host': 'a:2', 'path': '/With Spaces"Quoted"/sanicApp?key=val', 'secret': 'mySecret'}
    app.config.FORWARDED_SECRET = '_proxySecret'
    headers = {'Forwarded': 'for=1.2.3.4; by=_proxySecret'}
    (request, response) = app.test_client.get('/', headers=headers)
    assert response.json == {'for': '1.2.3.4', 'by': '_proxySecret'}

----------



Test Class Name: Bar