def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_safe_method_with_body_ignored(app):

    @app.get('/')
    async def handler(request):
        return text('OK')
    payload = {'test': 'OK'}
    headers = {'content-type': 'application/json'}
    (request, response) = app.test_client.request('/', http_method='get', data=json_dumps(payload), headers=headers)
    assert request.body == b''
    assert request.json == None
    assert response.body == b'OK'

----------



Test Class Name: Bar