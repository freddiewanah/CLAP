def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize(('auth_type', 'token', 'username', 'password'), [(None, 'a1d895e0-553a-421a-8e22-5ff8ecb48cbf', None, None), ('Token', 'a1d895e0-553a-421a-8e22-5ff8ecb48cbf', None, None), ('Bearer', 'a1d895e0-553a-421a-8e22-5ff8ecb48cbf', None, None), ('Basic', encode_basic_auth_credentials('some_username', 'some_pass'), 'some_username', 'some_pass'), (None, None, None, None)])
def test_credentials(app, capfd, auth_type, token, username, password):

    @app.route('/')
    async def handler(request):
        return text('OK')
    if token:
        headers = {'content-type': 'application/json', 'Authorization': f'{auth_type} {token}' if auth_type else f'{token}'}
    else:
        headers = {'content-type': 'application/json'}
    (request, response) = app.test_client.get('/', headers=headers)
    if auth_type == 'Basic':
        assert request.credentials.username == username
        assert request.credentials.password == password
    else:
        (_, err) = capfd.readouterr()
        with pytest.raises(AttributeError):
            request.credentials.password
            assert 'Password is available for Basic Auth only' in err
            request.credentials.username
            assert 'Username is available for Basic Auth only' in err
    if token:
        assert request.credentials.token == token
        assert request.credentials.auth_type == auth_type
    else:
        assert request.credentials is None
        assert not hasattr(request.credentials, 'token')
        assert not hasattr(request.credentials, 'auth_type')
        assert not hasattr(request.credentials, '_username')
        assert not hasattr(request.credentials, '_password')

----------



Test Class Name: Bar