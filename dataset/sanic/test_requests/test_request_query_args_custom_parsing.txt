def get_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> RequestParameters:
    """
        Method to parse ``query_string`` using ``urllib.parse.parse_qs``.
        This methods is used by ``args`` property.
        Can be used directly if you need to change default parameters.

        :param keep_blank_values:
            flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as blank
            strings.  The default false value indicates that blank values
            are to be ignored and treated as if they were  not included.
        :type keep_blank_values: bool
        :param strict_parsing:
            flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored. If true,
            errors raise a ValueError exception.
        :type strict_parsing: bool
        :param encoding:
            specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the bytes.decode() method.
        :type encoding: str
        :param errors:
            specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the bytes.decode() method.
        :type errors: str
        :return: RequestParameters
        """
    if (keep_blank_values, strict_parsing, encoding, errors) not in self.parsed_args:
        if self.query_string:
            self.parsed_args[keep_blank_values, strict_parsing, encoding, errors] = RequestParameters(parse_qs(qs=self.query_string, keep_blank_values=keep_blank_values, strict_parsing=strict_parsing, encoding=encoding, errors=errors))
    return self.parsed_args[keep_blank_values, strict_parsing, encoding, errors]

----------

def test_request_query_args_custom_parsing(app):

    @app.get('/')
    def handler(request):
        return text('pass')
    (request, response) = app.test_client.get('/?test1=value1&test2=&test3=value3')
    assert request.get_query_args(keep_blank_values=True) == [('test1', 'value1'), ('test2', ''), ('test3', 'value3')]
    assert request.query_args == [('test1', 'value1'), ('test3', 'value3')]
    assert request.get_query_args(keep_blank_values=False) == [('test1', 'value1'), ('test3', 'value3')]
    assert request.get_args(keep_blank_values=True) == RequestParameters({'test1': ['value1'], 'test2': [''], 'test3': ['value3']})
    assert request.args == RequestParameters({'test1': ['value1'], 'test3': ['value3']})
    assert request.get_args(keep_blank_values=False) == RequestParameters({'test1': ['value1'], 'test3': ['value3']})

----------



Test Class Name: Bar