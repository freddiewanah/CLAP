def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_request_server_port_in_host_header(app):

    @app.get('/')
    def handler(request):
        return text('OK')
    (request, response) = app.test_client.get('/', headers={'Host': 'my-server:5555'})
    assert request.server_port == 5555
    (request, response) = app.test_client.get('/', headers={'Host': '[2a00:1450:400f:80c::200e]:5555'})
    assert request.server_port == 5555
    (request, response) = app.test_client.get('/', headers={'Host': 'mal_formed:5555'})
    if PORT is None:
        assert request.server_port != 5555
    else:
        assert request.server_port == app.test_client.port

----------



Test Class Name: Bar