def run(app, level=logging.DEBUG):

    @app.after_server_start
    async def stop(app, _):
        app.stop()
    with caplog.at_level(level):
        Sanic.serve()
    return caplog.record_tuples

----------

def test_listeners_triggered(caplog):
    app = Sanic('app')
    before_server_start = False
    after_server_start = False
    before_server_stop = False
    after_server_stop = False

    @app.listener('before_server_start')
    def do_before_server_start(*args, **kwargs):
        nonlocal before_server_start
        before_server_start = True

    @app.listener('after_server_start')
    def do_after_server_start(*args, **kwargs):
        nonlocal after_server_start
        after_server_start = True

    @app.listener('before_server_stop')
    def do_before_server_stop(*args, **kwargs):
        nonlocal before_server_stop
        before_server_stop = True

    @app.listener('after_server_stop')
    def do_after_server_stop(*args, **kwargs):
        nonlocal after_server_stop
        after_server_stop = True

    @app.route('/')
    def handler(request):
        return text('...')

    class CustomServer(uvicorn.Server):

        def install_signal_handlers(self):
            pass
    config = uvicorn.Config(app=app, loop='asyncio', limit_max_requests=0)
    server = CustomServer(config=config)
    start_message = 'You have set a listener for "before_server_start" in ASGI mode. It will be executed as early as possible, but not before the ASGI server is started.'
    stop_message = 'You have set a listener for "after_server_stop" in ASGI mode. It will be executed as late as possible, but not after the ASGI server is stopped.'
    with caplog.at_level(logging.DEBUG):
        server.run()
    assert ('sanic.root', logging.DEBUG, start_message) not in caplog.record_tuples
    assert ('sanic.root', logging.DEBUG, stop_message) not in caplog.record_tuples
    all_tasks = asyncio.all_tasks(asyncio.get_event_loop())
    for task in all_tasks:
        task.cancel()
    assert before_server_start
    assert after_server_start
    assert before_server_stop
    assert after_server_stop
    app.state.mode = Mode.DEBUG
    with caplog.at_level(logging.DEBUG):
        server.run()
    assert ('sanic.root', logging.DEBUG, start_message) not in caplog.record_tuples
    assert ('sanic.root', logging.DEBUG, stop_message) not in caplog.record_tuples
    app.state.verbosity = 2
    with caplog.at_level(logging.DEBUG):
        server.run()
    assert ('sanic.root', logging.DEBUG, start_message) in caplog.record_tuples
    assert ('sanic.root', logging.DEBUG, stop_message) in caplog.record_tuples

----------



Test Class Name: default