def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_bad_headers(app):

    @app.get('/')
    async def handler(request):
        return text('')

    @app.on_response
    async def reqid(request, response):
        response.headers['x-request-id'] = request.id
    client = ReusableClient(app, port=1234)
    bad_headers = {'bad': 'bad' * 5000}
    with client:
        (_, response1) = client.get('/')
        (_, response2) = client.get('/', headers=bad_headers)
    assert response1.status == 200
    assert response2.status == 413
    assert response1.headers['x-request-id'] != response2.headers['x-request-id']

----------



Test Class Name: default