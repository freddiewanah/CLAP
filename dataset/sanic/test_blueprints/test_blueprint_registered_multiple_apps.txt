def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_blueprint_registered_multiple_apps():
    app1 = Sanic('app1')
    app2 = Sanic('app2')
    bp = Blueprint('bp')

    @bp.get('/')
    async def handler(request):
        return text(request.route.name)
    app1.blueprint(bp)
    app2.blueprint(bp)
    for app in (app1, app2):
        (_, response) = app.test_client.get('/')
        assert response.text == f'{app.name}.bp.handler'

----------



Test Class Name: Error