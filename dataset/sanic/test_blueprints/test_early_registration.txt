def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_early_registration(app: Sanic):
    assert len(app.router.routes) == 0
    bp = Blueprint('bp')

    @bp.get('/one')
    async def one(_):
        return text('one')
    app.blueprint(bp)
    assert len(app.router.routes) == 1

    @bp.get('/two')
    async def two(_):
        return text('two')

    @bp.get('/three')
    async def three(_):
        return text('three')
    assert len(app.router.routes) == 3
    for path in ('one', 'two', 'three'):
        (_, response) = app.test_client.get(f'/{path}')
        assert response.text == path

----------



Test Class Name: Error