def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_bp_exception_handler_applied(app: Sanic):

    class Error(Exception):
        pass
    handled = Blueprint('handled')
    nothandled = Blueprint('nothandled')

    @handled.exception(Error)
    def handle_error(req, e):
        return text('handled {}'.format(e))

    @handled.route('/ok')
    def ok(request):
        raise Error('uh oh')

    @nothandled.route('/notok')
    def notok(request):
        raise Error('uh oh')
    app.blueprint(handled)
    app.blueprint(nothandled)
    (_, response) = app.test_client.get('/ok')
    assert response.status == 200
    assert response.text == 'handled uh oh'
    (_, response) = app.test_client.get('/notok')
    assert response.status == 500

----------



Test Class Name: default