def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize('expires', [timedelta(seconds=60)])
def test_cookie_expires(app: Sanic, expires: timedelta):
    expires_time = datetime.utcnow().replace(microsecond=0) + expires
    cookies = {'test': 'wait'}

    @app.get('/')
    def handler(request):
        response = text('pass')
        response.cookies['test'] = 'pass'
        response.cookies['test']['expires'] = expires_time
        return response
    (request, response) = app.test_client.get('/', cookies=cookies, raw_cookies=True)
    cookie_expires = datetime.utcfromtimestamp(response.raw_cookies['test'].expires).replace(microsecond=0)
    assert response.status == 200
    assert response.cookies['test'] == 'pass'
    assert cookie_expires == expires_time

----------



Test Class Name: default