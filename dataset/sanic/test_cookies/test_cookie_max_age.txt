def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize('max_age', ['0', 30, '30'])
def test_cookie_max_age(app, max_age):
    cookies = {'test': 'wait'}

    @app.get('/')
    def handler(request):
        response = text('pass')
        response.cookies['test'] = 'pass'
        response.cookies['test']['max-age'] = max_age
        return response
    (request, response) = app.test_client.get('/', cookies=cookies, raw_cookies=True)
    assert response.status == 200
    cookie = response.cookies.get('test')
    if str(max_age).isdigit() and int(max_age) == float(max_age) and (int(max_age) != 0):
        cookie_expires = datetime.utcfromtimestamp(response.raw_cookies['test'].expires).replace(microsecond=0)
        expires = datetime.utcnow().replace(microsecond=0) + timedelta(seconds=int(max_age))
        assert cookie == 'pass'
        assert cookie_expires == expires or cookie_expires == expires + timedelta(seconds=-1)
    else:
        assert cookie is None

----------



Test Class Name: default