@classmethod
def get_app(cls, name: Optional[str]=None, *, force_create: bool=False) -> 'Sanic':
    """
        Retrieve an instantiated Sanic instance
        """
    if name is None:
        if len(cls._app_registry) > 1:
            raise SanicException('Multiple Sanic apps found, use Sanic.get_app("app_name")')
        elif len(cls._app_registry) == 0:
            raise SanicException('No Sanic apps have been registered.')
        else:
            return list(cls._app_registry.values())[0]
    try:
        return cls._app_registry[name]
    except KeyError:
        if name == '__main__':
            return cls.get_app('__mp_main__', force_create=force_create)
        if force_create:
            return cls(name)
        raise SanicException(f"Sanic app name '{name}' not found.\nApp instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\nSee https://sanic.dev/en/guide/deployment/app-loader.html for more details.")

----------

def test_app_set_context(app: Sanic):
    app.ctx.foo = 1
    retrieved = Sanic.get_app(app.name)
    assert retrieved.ctx.foo == 1

----------



Test Class Name: default