def empty(status: int=204, headers: Optional[Dict[str, str]]=None) -> HTTPResponse:
    """
    Returns an empty response to the client.

    :param status Response code.
    :param headers Custom Headers.
    """
    return HTTPResponse(body=b'', status=status, headers=headers)

----------

@pytest.mark.parametrize('request_id,expected_type', ((99, int), (uuid4(), UUID), ('foo', str)))
def test_request_id(request_id, expected_type):
    app = Sanic('req-generator')

    @app.get('/')
    async def get(request):
        return response.empty()
    (request, _) = app.test_client.get('/', headers={'X-REQUEST-ID': f'{request_id}'})
    assert request.id == request_id
    assert type(request.id) == expected_type

----------



Test Class Name: default