def empty(status: int=204, headers: Optional[Dict[str, str]]=None) -> HTTPResponse:
    """
    Returns an empty response to the client.

    :param status Response code.
    :param headers Custom Headers.
    """
    return HTTPResponse(body=b'', status=status, headers=headers)

----------

def test_request_accept():
    app = Sanic('req-generator')

    @app.get('/')
    async def get(request):
        return response.empty()
    header_value = 'text/plain;format=flowed, text/plain, text/*, */*'
    (request, _) = app.test_client.get('/', headers={'Accept': header_value})
    assert str(request.accept) == header_value
    match = request.accept.match('*/*;format=flowed', 'text/plain;format=flowed', 'text/plain', 'text/*', '*/*')
    assert match == '*/*;format=flowed'
    assert match.header.mime == 'text/plain'
    assert match.header.params == {'format': 'flowed'}
    header_value = 'text/plain; q=0.5,   text/html, text/x-dvi; q=0.8, text/x-c'
    (request, _) = app.test_client.get('/', headers={'Accept': header_value})
    assert [str(i) for i in request.accept] == ['text/html', 'text/x-c', 'text/x-dvi;q=0.8', 'text/plain;q=0.5']
    match = request.accept.match('application/json', 'text/plain', 'text/html;format=flowed', 'text/*', '*/*')
    assert match == 'text/*'
    assert match.header.mime == 'text/html'
    assert match.header.q == 1.0
    assert not match.header.params

----------



Test Class Name: FooRequest