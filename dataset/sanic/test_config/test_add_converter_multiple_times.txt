def register_type(self, converter: Callable[[str], Any]) -> None:
    """
        Allows for adding custom function to cast from a string value to any
        other type. The function should raise ValueError if it is not the
        correct type.
        """
    if converter in self._converters:
        error_logger.warning(f"Configuration value converter '{converter.__name__}' has already been registered")
        return
    self._converters.append(converter)

----------

def test_add_converter_multiple_times(caplog):

    def converter():
        ...
    message = "Configuration value converter 'converter' has already been registered"
    config = Config()
    config.register_type(converter)
    with caplog.at_level(logging.WARNING):
        config.register_type(converter)
    assert ('sanic.error', logging.WARNING, message) in caplog.record_tuples
    assert len(config._converters) == 5

----------



Test Class Name: UltimateAnswer