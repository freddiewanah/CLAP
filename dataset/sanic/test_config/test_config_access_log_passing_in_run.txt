def run(app, level=logging.DEBUG):

    @app.after_server_start
    async def stop(app, _):
        app.stop()
    with caplog.at_level(level):
        Sanic.serve()
    return caplog.record_tuples

----------

@pytest.mark.parametrize('access_log', (True, False))
def test_config_access_log_passing_in_run(app: Sanic, access_log):
    assert app.config.ACCESS_LOG is False

    @app.listener('after_server_start')
    async def _request(sanic, loop):
        app.stop()
    app.run(port=1340, access_log=access_log, single_process=True)
    assert app.config.ACCESS_LOG is access_log

----------



Test Class Name: Config