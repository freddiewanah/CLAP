def parse_accept(accept: Optional[str]) -> AcceptList:
    """Parse an Accept header and order the acceptable media types in
    according to RFC 7231, s. 5.3.2
    https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2
    """
    if not accept:
        if accept == '':
            return AcceptList()
        accept = '*/*'
    try:
        a = [mt for mt in [MediaType._parse(mtype) for mtype in accept.split(',')] if mt]
        if not a:
            raise ValueError
        return AcceptList(sorted(a, key=lambda x: x.key))
    except ValueError:
        raise InvalidHeader(f'Invalid header value in Accept: {accept}')

----------

@pytest.mark.parametrize('raw,expected_subtype', (('show/first, show/second', 'first'), ('show/*, show/first', 'first'), ('*/*, show/first', 'first'), ('*/*, show/*', '*'), ('other/*; q=0.1, show/*; q=0.2', '*'), ('show/first; q=0.5, show/second; q=0.5', 'first'), ('show/first; foo=bar, show/second; foo=bar', 'first'), ('show/second, show/first; foo=bar', 'first'), ('show/second; q=0.5, show/first; foo=bar; q=0.5', 'first'), ('show/second; q=0.5, show/first; q=1.0', 'first'), ('show/first, show/second; q=1.0', 'second')))
def test_parse_accept_ordered_okay(raw, expected_subtype):
    ordered = headers.parse_accept(raw)
    assert ordered[0].type == 'show'
    assert ordered[0].subtype == expected_subtype

----------



Test Class Name: default