def parse_accept(accept: Optional[str]) -> AcceptList:
    """Parse an Accept header and order the acceptable media types in
    according to RFC 7231, s. 5.3.2
    https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2
    """
    if not accept:
        if accept == '':
            return AcceptList()
        accept = '*/*'
    try:
        a = [mt for mt in [MediaType._parse(mtype) for mtype in accept.split(',')] if mt]
        if not a:
            raise ValueError
        return AcceptList(sorted(a, key=lambda x: x.key))
    except ValueError:
        raise InvalidHeader(f'Invalid header value in Accept: {accept}')

----------

@pytest.mark.parametrize('raw', ('text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8', 'application/xml;q=0.9, */*;q=0.8, text/html, application/xhtml+xml', 'foo/bar;q=0.9, */*;q=0.8, text/html=0.8, text/plain, application/xhtml+xml'))
def test_accept_ordering(raw):
    """Should sort by q but also be stable."""
    accept = headers.parse_accept(raw)
    assert accept[0].type == 'text'
    raw1 = ', '.join((str(a) for a in accept))
    accept = headers.parse_accept(raw1)
    raw2 = ', '.join((str(a) for a in accept))
    assert raw1 == raw2

----------



Test Class Name: default