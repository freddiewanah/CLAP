def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

@pytest.mark.parametrize('method', HTTP_METHODS)
def test_versioned_routes_get(app, method):
    method = method.lower()
    func = getattr(app, method)
    if callable(func):

        @func(f'/{method}', version=1)
        def handler(request):
            return text('OK')
    else:
        raise Exception(f'Method: {method} is not callable')
    client_method = getattr(app.test_client, method)
    (request, response) = client_method(f'/v1/{method}')
    assert response.status == 200

----------



Test Class Name: default