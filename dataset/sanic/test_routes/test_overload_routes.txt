def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_overload_routes(app):

    @app.route('/overload', methods=['GET'])
    async def handler1(request):
        return text('OK1')

    @app.route('/overload', methods=['POST', 'PUT'])
    async def handler2(request):
        return text('OK2')
    (request, response) = app.test_client.get('/overload')
    assert response.text == 'OK1'
    (request, response) = app.test_client.post('/overload')
    assert response.text == 'OK2'
    (request, response) = app.test_client.put('/overload')
    assert response.text == 'OK2'
    (request, response) = app.test_client.delete('/overload')
    assert response.status == 405
    app.router.reset()
    with pytest.raises(RouteExists):

        @app.route('/overload', methods=['PUT', 'DELETE'])
        async def handler3(request):
            return text('Duplicated')

----------



Test Class Name: default