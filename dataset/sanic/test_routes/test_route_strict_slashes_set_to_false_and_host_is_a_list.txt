def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_route_strict_slashes_set_to_false_and_host_is_a_list(app):
    test_client = SanicTestClient(app, port=42101)
    site1 = f'127.0.0.1:{test_client.port}'

    @app.get('/get', host=[site1, 'site2.com'], strict_slashes=False)
    def get_handler(request):
        return text('OK')
    (request, response) = test_client.get('http://' + site1 + '/get')
    assert response.text == 'OK'
    app.router.finalized = False

    @app.post('/post', host=[site1, 'site2.com'], strict_slashes=False)
    def post_handler(request):
        return text('OK')
    (request, response) = test_client.post('http://' + site1 + '/post')
    assert response.text == 'OK'
    app.router.finalized = False

    @app.put('/put', host=[site1, 'site2.com'], strict_slashes=False)
    def put_handler(request):
        return text('OK')
    (request, response) = test_client.put('http://' + site1 + '/put')
    assert response.text == 'OK'
    app.router.finalized = False

    @app.delete('/delete', host=[site1, 'site2.com'], strict_slashes=False)
    def delete_handler(request):
        return text('OK')
    (request, response) = test_client.delete('http://' + site1 + '/delete')
    assert response.text == 'OK'

----------



Test Class Name: default