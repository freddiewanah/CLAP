def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_create_task(app):
    e = Event()

    async def coro():
        await asyncio.sleep(0.05)
        e.set()

    @app.route('/early')
    def not_set(request):
        return text(str(e.is_set()))

    @app.route('/late')
    async def set(request):
        await asyncio.sleep(0.1)
        return text(str(e.is_set()))
    app.add_task(coro)
    (request, response) = app.test_client.get('/early')
    assert response.body == b'False'
    app.signal_router.reset()
    app.add_task(coro)
    (request, response) = app.test_client.get('/late')
    assert response.body == b'True'

----------



Test Class Name: default