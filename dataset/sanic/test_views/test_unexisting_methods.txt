def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_unexisting_methods(app):

    class DummyView(HTTPMethodView):

        def get(self, request):
            return text('I am get method')
    app.add_route(DummyView.as_view(), '/')
    (request, response) = app.test_client.get('/')
    assert response.body == b'I am get method'
    (request, response) = app.test_client.post('/')
    assert b'Method POST not allowed for URL /' in response.body

----------



Test Class Name: DummyView