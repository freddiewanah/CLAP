def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_middleware_response_exception(app):
    result = {'status_code': 'middleware not run'}

    @app.middleware('response')
    async def process_response(request, response):
        result['status_code'] = response.status
        return response

    @app.exception(NotFound)
    async def error_handler(request, exception):
        return text('OK', exception.status_code)

    @app.route('/')
    async def handler(request):
        return text('FAIL')
    (request, response) = app.test_client.get('/page_not_found')
    assert response.text == 'OK'
    assert result['status_code'] == 404

----------



Test Class Name: default