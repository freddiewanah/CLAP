def text(body: str, status: int=200, headers: Optional[Dict[str, str]]=None, content_type: str='text/plain; charset=utf-8') -> HTTPResponse:
    """
    Returns response object with body in text format.

    :param body: Response data to be encoded.
    :param status: Response code.
    :param headers: Custom Headers.
    :param content_type: the content type (string) of the response
    """
    if not isinstance(body, str):
        raise TypeError(f'Bad body type. Expected str, got {type(body).__name__})')
    return HTTPResponse(body, status=status, headers=headers, content_type=content_type)

----------

def test_middleware_response_raise_cancelled_error(app, caplog):
    app.config.RESPONSE_TIMEOUT = 1

    @app.middleware('response')
    async def process_response(request, response):
        raise CancelledError('CancelledError at response middleware')

    @app.get('/')
    def handler(request):
        return text('OK')
    with caplog.at_level(logging.ERROR):
        (reqrequest, response) = app.test_client.get('/')
        assert response.status == 500
        assert ('sanic.error', logging.ERROR, "Exception occurred while handling uri: 'http://127.0.0.1:42101/'") not in caplog.record_tuples

----------



Test Class Name: default