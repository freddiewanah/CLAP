def shutdown_signal(self, signal, frame):
    if self._shutting_down:
        logger.info('Shutdown interrupted. Killing.')
        with suppress(ServerKilled):
            self.kill()
    logger.info('Received signal %s. Shutting down.', Signals(signal).name)
    self.monitor_publisher.send(None)
    self.shutdown()

----------

@patch('sanic.worker.process.os')
@patch('sanic.worker.manager.os')
def test_shutdown_signal_send_kill(manager_os_mock: Mock, process_os_mock: Mock):
    process = Mock()
    process.pid = 1234
    context = Mock()
    context.Process.return_value = process
    manager = WorkerManager(1, fake_serve, {}, context, (Mock(), Mock()), {})
    assert manager._shutting_down is False
    manager.shutdown_signal(SIGINT, None)
    assert manager._shutting_down is True
    process_os_mock.kill.assert_called_once_with(1234, SIGINT)
    manager.shutdown_signal(SIGINT, None)
    manager_os_mock.kill.assert_called_once_with(1234, SIGKILL)

----------



Test Class Name: default