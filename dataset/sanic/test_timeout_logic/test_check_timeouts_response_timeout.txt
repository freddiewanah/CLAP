def check_timeouts(self):
    """
        Runs itself periodically to enforce any expired timeouts.
        """
    try:
        if not self._task:
            return
        duration = current_time() - self._time
        stage = self._http.stage
        if stage is Stage.IDLE and duration > self.keep_alive_timeout:
            logger.debug('KeepAlive Timeout. Closing connection.')
        elif stage is Stage.REQUEST and duration > self.request_timeout:
            logger.debug('Request Timeout. Closing connection.')
            self._http.exception = RequestTimeout('Request Timeout')
        elif stage is Stage.HANDLER and self._http.upgrade_websocket:
            logger.debug('Handling websocket. Timeouts disabled.')
            return
        elif stage in (Stage.HANDLER, Stage.RESPONSE, Stage.FAILED) and duration > self.response_timeout:
            logger.debug('Response Timeout. Closing connection.')
            self._http.exception = ServiceUnavailable('Response Timeout')
        else:
            interval = min(self.keep_alive_timeout, self.request_timeout, self.response_timeout) / 2
            self.loop.call_later(max(0.1, interval), self.check_timeouts)
            return
        cancel_msg_args = ()
        if sys.version_info >= (3, 9):
            cancel_msg_args = ('Cancel connection task with a timeout',)
        self._task.cancel(*cancel_msg_args)
    except Exception:
        error_logger.exception('protocol.check_timeouts')

----------

def test_check_timeouts_response_timeout(protocol: HttpProtocol):
    protocol._http.stage = Stage.RESPONSE
    protocol._time = 0
    protocol.check_timeouts()
    protocol._task.cancel.assert_called_once()
    assert isinstance(protocol._http.exception, ServiceUnavailable)

----------



Test Class Name: default