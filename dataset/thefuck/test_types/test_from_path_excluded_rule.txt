@classmethod
def from_path(cls, path):
    """Creates rule instance from path.

        :type path: pathlib.Path
        :rtype: Rule

        """
    name = path.name[:-3]
    if name in settings.exclude_rules:
        logs.debug(u'Ignoring excluded rule: {}'.format(name))
        return
    with logs.debug_time(u'Importing rule: {};'.format(name)):
        try:
            rule_module = load_source(name, str(path))
        except Exception:
            logs.exception(u'Rule {} failed to load'.format(name), sys.exc_info())
            return
    priority = getattr(rule_module, 'priority', DEFAULT_PRIORITY)
    return cls(name, rule_module.match, rule_module.get_new_command, getattr(rule_module, 'enabled_by_default', True), getattr(rule_module, 'side_effect', None), settings.priority.get(name, priority), getattr(rule_module, 'requires_output', True))

----------

def test_from_path_excluded_rule(self, mocker, settings):
    load_source = mocker.patch('thefuck.types.load_source')
    settings.update(exclude_rules=['git'])
    rule_path = os.path.join(os.sep, 'rules', 'git.py')
    assert Rule.from_path(Path(rule_path)) is None
    assert not load_source.called

----------



Test Class Name: TestRule