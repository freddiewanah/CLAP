@git_support
def get_new_command(command):
    command_parts = command.script_parts[:]
    upstream_option_index = _get_upstream_option_index(command_parts)
    if upstream_option_index is not None:
        command_parts.pop(upstream_option_index)
        if len(command_parts) > upstream_option_index:
            command_parts.pop(upstream_option_index)
    else:
        push_idx = command_parts.index('push') + 1
        while len(command_parts) > push_idx and command_parts[len(command_parts) - 1][0] != '-':
            command_parts.pop(len(command_parts) - 1)
    arguments = re.findall('git push (.*)', command.output)[-1].replace("'", "\\'").strip()
    return replace_argument(' '.join(command_parts), 'push', 'push {}'.format(arguments))

----------

@pytest.mark.parametrize('script, new_command', [('git branch 0a', 'git branch -D 0a && git branch -a'), ('git branch 0v', 'git branch -D 0v && git branch -v'), ('git branch 0d foo', 'git branch -D 0d && git branch -d foo'), ('git branch 0D foo', 'git branch -D 0D && git branch -D foo'), ("git branch 0l 'maint-*'", "git branch -D 0l && git branch -l 'maint-*'"), ('git branch 0u upstream', 'git branch -D 0u && git branch -u upstream')])
def test_get_new_command_branch_exists(script, output_branch_exists, new_command):
    assert get_new_command(Command(script, output_branch_exists)) == new_command

----------



Test Class Name: default