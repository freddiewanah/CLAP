@git_support
def get_new_command(command):
    command_parts = command.script_parts[:]
    upstream_option_index = _get_upstream_option_index(command_parts)
    if upstream_option_index is not None:
        command_parts.pop(upstream_option_index)
        if len(command_parts) > upstream_option_index:
            command_parts.pop(upstream_option_index)
    else:
        push_idx = command_parts.index('push') + 1
        while len(command_parts) > push_idx and command_parts[len(command_parts) - 1][0] != '-':
            command_parts.pop(len(command_parts) - 1)
    arguments = re.findall('git push (.*)', command.output)[-1].replace("'", "\\'").strip()
    return replace_argument(' '.join(command_parts), 'push', 'push {}'.format(arguments))

----------

@pytest.mark.parametrize('script, branch_name, new_command', [('git push', 'master', 'git push --set-upstream origin master'), ('git push master', 'master', 'git push --set-upstream origin master'), ('git push -u', 'master', 'git push --set-upstream origin master'), ('git push -u origin', 'master', 'git push --set-upstream origin master'), ('git push origin', 'master', 'git push --set-upstream origin master'), ('git push --set-upstream origin', 'master', 'git push --set-upstream origin master'), ('git push --quiet', 'master', 'git push --set-upstream origin master --quiet'), ('git push --quiet origin', 'master', 'git push --set-upstream origin master --quiet'), ('git -c test=test push --quiet origin', 'master', 'git -c test=test push --set-upstream origin master --quiet'), ('git push', "test's", "git push --set-upstream origin test\\'s"), ('git push --force', 'master', 'git push --set-upstream origin master --force'), ('git push --force-with-lease', 'master', 'git push --set-upstream origin master --force-with-lease')])
def test_get_new_command(output, script, branch_name, new_command):
    assert get_new_command(Command(script, output)) == new_command

----------



Test Class Name: default