@git_support
def get_new_command(command):
    command_parts = command.script_parts[:]
    upstream_option_index = _get_upstream_option_index(command_parts)
    if upstream_option_index is not None:
        command_parts.pop(upstream_option_index)
        if len(command_parts) > upstream_option_index:
            command_parts.pop(upstream_option_index)
    else:
        push_idx = command_parts.index('push') + 1
        while len(command_parts) > push_idx and command_parts[len(command_parts) - 1][0] != '-':
            command_parts.pop(len(command_parts) - 1)
    arguments = re.findall('git push (.*)', command.output)[-1].replace("'", "\\'").strip()
    return replace_argument(' '.join(command_parts), 'push', 'push {}'.format(arguments))

----------

@pytest.mark.parametrize('command, new_commands', [(Command('tsuru log', 'tsuru: "log" is not a tsuru command. See "tsuru help".\n\nDid you mean?\n\tapp-log\n\tlogin\n\tlogout\n'), ['tsuru login', 'tsuru logout', 'tsuru app-log']), (Command('tsuru app-l', 'tsuru: "app-l" is not a tsuru command. See "tsuru help".\n\nDid you mean?\n\tapp-list\n\tapp-log\n'), ['tsuru app-log', 'tsuru app-list']), (Command('tsuru user-list', 'tsuru: "user-list" is not a tsuru command. See "tsuru help".\n\nDid you mean?\n\tteam-user-list\n'), ['tsuru team-user-list']), (Command('tsuru targetlist', 'tsuru: "targetlist" is not a tsuru command. See "tsuru help".\n\nDid you mean?\n\ttarget-list\n'), ['tsuru target-list'])])
def test_get_new_command(command, new_commands):
    assert get_new_command(command) == new_commands

----------



Test Class Name: default