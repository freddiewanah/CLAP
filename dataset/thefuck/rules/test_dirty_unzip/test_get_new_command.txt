@git_support
def get_new_command(command):
    command_parts = command.script_parts[:]
    upstream_option_index = _get_upstream_option_index(command_parts)
    if upstream_option_index is not None:
        command_parts.pop(upstream_option_index)
        if len(command_parts) > upstream_option_index:
            command_parts.pop(upstream_option_index)
    else:
        push_idx = command_parts.index('push') + 1
        while len(command_parts) > push_idx and command_parts[len(command_parts) - 1][0] != '-':
            command_parts.pop(len(command_parts) - 1)
    arguments = re.findall('git push (.*)', command.output)[-1].replace("'", "\\'").strip()
    return replace_argument(' '.join(command_parts), 'push', 'push {}'.format(arguments))

----------

@pytest.mark.parametrize('script,fixed,filename', [(u'unzip café', u"unzip café -d 'café'", u'café.zip'), (u'unzip foo', u'unzip foo -d foo', u'foo.zip'), (u"unzip 'foo bar.zip'", u"unzip 'foo bar.zip' -d 'foo bar'", u'foo.zip'), (u'unzip foo.zip', u'unzip foo.zip -d foo', u'foo.zip')])
def test_get_new_command(zip_error, script, fixed, filename):
    zip_error(filename)
    assert get_new_command(Command(script, '')) == fixed

----------



Test Class Name: default