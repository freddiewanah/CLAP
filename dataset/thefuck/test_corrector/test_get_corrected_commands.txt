def get_corrected_commands(self, command):
    """Returns generator with corrected commands.

        :type command: Command
        :rtype: Iterable[CorrectedCommand]

        """
    new_commands = self.get_new_command(command)
    if not isinstance(new_commands, list):
        new_commands = (new_commands,)
    for (n, new_command) in enumerate(new_commands):
        yield CorrectedCommand(script=new_command, side_effect=self.side_effect, priority=(n + 1) * self.priority)

----------

def test_get_corrected_commands(mocker):
    command = Command('test', 'test')
    rules = [Rule(match=lambda _: False), Rule(match=lambda _: True, get_new_command=lambda x: x.script + '!', priority=100), Rule(match=lambda _: True, get_new_command=lambda x: [x.script + '@', x.script + ';'], priority=60)]
    mocker.patch('thefuck.corrector.get_rules', return_value=rules)
    assert [cmd.script for cmd in get_corrected_commands(command)] == ['test!', 'test@', 'test;']

----------



Test Class Name: TestGetRules